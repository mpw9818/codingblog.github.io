<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>111111</title>
      <link href="/2020/04/12/11111111/"/>
      <url>/2020/04/12/11111111/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate框架</title>
      <link href="/2020/03/05/hibernate%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/03/05/hibernate%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="hibernate框架"><a href="#hibernate框架" class="headerlink" title="hibernate框架"></a>hibernate框架</h3><p>&emsp;&emsp;作为SSH三大框架之一的Hibernate，是用来把程序的Dao层和数据库打交道用的，它封装了JDBC的步骤，是我们对数据库的操作更加简单，更加快捷。利用Hibernate框架我们就可以不再编写重复的JDBC代码，不再反复的测试我们的SQL语句写的如何。这里这需要我们简单配置，调用框架给我们提供的方法，就可以完成对数据增删改查。</p><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h4><p>1.导入jar包 （required下所有的jar包 + lib 下 c3p0 的jar包 + 数据库 jar 包）<br>2.创建一个需要持久化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fkjava.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Entity:声明当前类是一个持久化bean，声明之后hibernate才会管理该bean,该注解必须存在</span></span><br><span class="line"><span class="comment"> * @Table:声明当前类是与数据库中哪一个表对应，如果没有则将类名作为表名</span></span><br><span class="line"><span class="comment"> *  - name：指定表名  </span></span><br><span class="line"><span class="comment"> *  -indexes：指定索引的相关信息</span></span><br><span class="line"><span class="comment"> * @Id：声明当前列是主键</span></span><br><span class="line"><span class="comment"> * @GeneratedValue：指定主键的生成策略</span></span><br><span class="line"><span class="comment"> *  - strategy=GenerationType.IDENTITY 用于mysql或者 sql server代表主键自动增长</span></span><br><span class="line"><span class="comment"> *  - strategy=GenerationType.SEQUENCE 用于oracle或者db2 表示通过序列进行主键值的生成</span></span><br><span class="line"><span class="comment"> * @Column:声明当前属性列的相关信息</span></span><br><span class="line"><span class="comment"> *   - name:指定列名</span></span><br><span class="line"><span class="comment"> *   - length：指定列的长度</span></span><br><span class="line"><span class="comment"> *   - unique：是否唯一</span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * @Transient：声明该属性 不用于数据库关联，是临时使用的字段</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @Id：声明该属性做主键</span></span><br><span class="line"><span class="comment"> * @GeneratedValue:指定主键的生成策略</span></span><br><span class="line"><span class="comment"> *  -  IDENTITY ：自增长。要求底层数据库支持自增加。比如MySQL、SQL Server</span></span><br><span class="line"><span class="comment"> *  -  SEQUENCE ：用sequence。要求底层数据库支持SEQUENCE 。比如Oracle、DB 2</span></span><br><span class="line"><span class="comment"> *  - AUTO  ：让系统自动判断数据库的类型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"TB_USER"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Id表示该Field是一个主键  ,  当需要多个字段一起作联合主键时，在属性上声明多个@Id,联合主键不需要声明主键的生成策略。</span></span><br><span class="line"><span class="comment">//  复合类型作主键时，使用的是 @EmbeddedId </span></span><br><span class="line"><span class="comment">// @GeneratedValue表示主键自动生成，strategy表示主键生成策略，</span></span><br><span class="line"><span class="comment">// IDENTITY是mysql或sql server的自动增长</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)  </span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Column(name="name")表示当前的Field（name）对应数据库的Column（name）</span></span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"name"</span>) </span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"sex"</span>)</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"age"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String sex, Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", age="</span></span><br><span class="line">+ age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.配置hibernate.cfg.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Hibernat的数据库方言，注意mysql5之后是MySQL5InnoDBDialect --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5InnoDBDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 连接数据库的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  jdbc:mysql:///j1510 直接连本机--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/j1601<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置DataSource --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_size"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获得连接的超时时间,如果超过这个时间,会抛出异常，单位毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最大的PreparedStatement的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每隔3000秒检查连接池里的空闲连接 ，单位是秒--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每次是否验证连接是否可用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sql语句显示在控制台 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">create：每次都会重新创建表</span></span><br><span class="line"><span class="comment">update：如果有表，就不管；如果没表，就创建 ，如果有更新，会更新</span></span><br><span class="line"><span class="comment">create-drop：每次都会重新创建表，之后删除，测试</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 告诉Hibernate自定义的映射文件</span></span><br><span class="line"><span class="comment">如果是xml文件：rosource</span></span><br><span class="line"><span class="comment">如果是类文件：class</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"org.fkjava.pojo.User"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.写测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fkjava.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.fkjava.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接池  通过连接获取连接  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hibernate4的写法读取配置文件    创建Configuration实例的时候默认加载  hibernate.properties配置文件  ,</span></span><br><span class="line"><span class="comment">//通过hibernate.properties管理数据源比较麻烦  所以现在主流的方式 通过hibernate.cfg.xml来管理数据源相关信息</span></span><br><span class="line"><span class="comment">//new Configuration().configure()：默认加载src下的hibernate.cfg.xml文件</span></span><br><span class="line"><span class="comment">//Configuration cfg = new Configuration().configure(); </span></span><br><span class="line"><span class="comment">// SessionFactory：整个数据库映射关系在程序中的内存映像，封装了数据源等信息。</span></span><br><span class="line"><span class="comment">//SessionFactory sessionFactory = cfg.buildSessionFactory(new StandardServiceRegistryBuilder().applySettings(cfg.getProperties()).build());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一条数据</span></span><br><span class="line"><span class="comment">// Session：负责CRUD操作，封装了连接。 </span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"><span class="comment">// 开启事务对象</span></span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"><span class="comment">// User对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"rose"</span>,<span class="string">"女"</span>,<span class="number">19</span>);</span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">Serializable id = session.save(user);</span><br><span class="line">System.out.println(<span class="string">"插入的数据id值["</span>+id+<span class="string">"]"</span>);</span><br><span class="line"><span class="comment">// 提交事务 </span></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-查询-：get-方法和-load-方法"><a href="#2-查询-：get-方法和-load-方法" class="headerlink" title="2.查询 ：get()方法和 load()方法"></a>2.查询 ：get()方法和 load()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据get方法获取对象的信息   get(对象的class类型，主键id的值) 特点:1、get是立即加载   2、如果找不到指定的数据则返回  null</span></span><br><span class="line"><span class="comment">//User user = session.get(User.class, 2);</span></span><br><span class="line"><span class="comment">//System.out.println("user:"+user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据load方法也可以获取对象的信息 load(对象的class类型，主键id的值) 特点:1、load指的是延时加载   2、找不到指定的记录的时候就会抛出异常</span></span><br><span class="line">User u = session.load(User<span class="class">.<span class="keyword">class</span>, 4)</span>;</span><br><span class="line">System.out.println(<span class="string">"u:"</span>+u.getName());</span><br></pre></td></tr></table></figure><h4 id="3-更新-：saveOrUpdate-方法和-update-方法"><a href="#3-更新-：saveOrUpdate-方法和-update-方法" class="headerlink" title="3.更新 ：saveOrUpdate()方法和 update()方法"></a>3.更新 ：saveOrUpdate()方法和 update()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">User  user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"翠花002"</span>);</span><br><span class="line">user.setAge(<span class="number">20</span>);</span><br><span class="line">user.setSex(<span class="string">'女'</span>);</span><br><span class="line"></span><br><span class="line">user.setId(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* saveOrUpdate方法既可以进行添加也可以进行更新操作    </span></span><br><span class="line"><span class="comment">* 通过判定user对象中是否有主键id值决定进行添加还是更新，</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 通过update方法 或者 saveOrUpdate方法进行更新的时候，会将对象中所有的列的信息进行更新，如果没有设置值，会使用默认值（int类型默认为0，引用类型默认为null）</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//1、通过saveOrUpdate方法进行更新</span></span><br><span class="line"><span class="comment">//session.saveOrUpdate(user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、调用update方法进行更新</span></span><br><span class="line"><span class="comment">//session.update(user);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、在持久化状态下进行更新操作</span></span><br><span class="line">User u = session.get(User<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line">u.setName(<span class="string">"tom"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tr.commit();</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h4 id="4-新增-：saveOrUpdate-方法、save-方法、persist-方法"><a href="#4-新增-：saveOrUpdate-方法、save-方法、persist-方法" class="headerlink" title="4.新增 ：saveOrUpdate()方法、save()方法、persist()方法"></a>4.新增 ：saveOrUpdate()方法、save()方法、persist()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建User对象</span></span><br><span class="line">User  user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"翠花003"</span>);</span><br><span class="line">user.setAge(<span class="number">20</span>);</span><br><span class="line">user.setSex(<span class="string">'女'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过save方法保存数据   特征 1、save有返回值，返回的是自动生成的主键的值    2、不能进行级联保存</span></span><br><span class="line"><span class="comment">//Serializable id = session.save(user);   </span></span><br><span class="line"><span class="comment">//System.out.println("id:"+id);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过persist方法保存数据   特征 1、persist没有返回值   2、可以进行级联保存</span></span><br><span class="line"><span class="comment">//session.persist(user);</span></span><br><span class="line"></span><br><span class="line">user.setId(<span class="number">8</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* saveOrUpdate方法既可以进行添加也可以进行更新操作    </span></span><br><span class="line"><span class="comment">* 通过判定user对象中是否有主键id值决定进行添加还是更新</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 通过update方法 或者 saveOrUpdate方法进行更新的时候，会将对象中所有的列的信息进行更新</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">session.saveOrUpdate(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tr.commit();</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h4 id="5-删除-：saveOrUpdate-方法、save-方法、persist-方法"><a href="#5-删除-：saveOrUpdate-方法、save-方法、persist-方法" class="headerlink" title="5.删除 ：saveOrUpdate()方法、save()方法、persist()方法"></a>5.删除 ：saveOrUpdate()方法、save()方法、persist()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">User  user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//指定需要删除的用户的id</span></span><br><span class="line">user.setId(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">session.delete(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tr.commit();</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h4 id="6-close-、clear-和-evict"><a href="#6-close-、clear-和-evict" class="headerlink" title="6.close()、clear() 和 evict()"></a>6.close()、clear() 和 evict()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction tr = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id获取用户信息   对象会session关联</span></span><br><span class="line">User user = session.get(User<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空session中所有的缓存，意味着之前与session有关联的对象全部会与session失去关联，变成脱管状态</span></span><br><span class="line">session.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从session中清除指定的对象，清除之后该对象会变成脱管状态</span></span><br><span class="line">session.evict(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">tr.commit();</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h3 id="7-集合映射"><a href="#7-集合映射" class="headerlink" title="7.集合映射"></a>7.集合映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Id</span></span><br><span class="line">   <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="meta">@Column</span>(name=<span class="string">"tb_name"</span>,length=<span class="number">10</span>,unique=<span class="keyword">true</span>)</span><br><span class="line">   <span class="keyword">private</span> String name;   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @ElementCollection:指定当前属性是一个集合属性 </span></span><br><span class="line"><span class="comment">    *  - targetClass：每一个元素的类型</span></span><br><span class="line"><span class="comment">    *  - fetch ：指定抓取策略   FetchType.LAZY 是懒加载的意思     FetchType.EAGER是立即加载的意思</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @CollectionTable：指定表的信息，通过该表维护集合属性中的数据 </span></span><br><span class="line"><span class="comment">    *  - @JoinColumn</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @OrderColumn:序列名称</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   <span class="meta">@ElementCollection</span>(targetClass=String<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.LAZY)</span><br><span class="line">   <span class="meta">@CollectionTable</span>(name=<span class="string">"user_name"</span>,</span><br><span class="line">   joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"user_id"</span>)&#125;)</span><br><span class="line">   <span class="meta">@OrderColumn</span>(name=<span class="string">"nick_order"</span>)</span><br><span class="line">   <span class="keyword">private</span> String[] names; <span class="comment">// 数组</span></span><br><span class="line">   </span><br><span class="line">.......     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* User user = new User();</span></span><br><span class="line"><span class="comment">user.setName("悟空");</span></span><br><span class="line"><span class="comment">user.setEmail("584614151@qq.com");</span></span><br><span class="line"><span class="comment">user.setAge(20);</span></span><br><span class="line"><span class="comment">user.setSex('男');</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">String[] names = &#123;"齐天大圣","弼马温","美猴王"&#125;;</span></span><br><span class="line"><span class="comment">//指定别名信息</span></span><br><span class="line"><span class="comment">user.setNames(names);</span></span><br><span class="line"><span class="comment">session.save(user);*/</span></span><br><span class="line"></span><br><span class="line">User u = session.get(User<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-一对多关联关系配置以及单项-双向关联"><a href="#8-一对多关联关系配置以及单项-双向关联" class="headerlink" title="8.一对多关联关系配置以及单项/双向关联"></a>8.一对多关联关系配置以及单项/双向关联</h3><p>Studnet类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Id</span></span><br><span class="line">   <span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="meta">@Column</span>(name=<span class="string">"tb_name"</span>,length=<span class="number">10</span>,unique=<span class="keyword">true</span>)</span><br><span class="line">   <span class="keyword">private</span> String name;   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@ManyToOne</span> : 多对一</span></span><br><span class="line"><span class="comment">    *  - targetEntity：当前类所关联的实体bean的类型</span></span><br><span class="line"><span class="comment">*  - fetch 指定抓取策略   FetchType.LAZY：懒加载    FetchType.EAGER：立即加载</span></span><br><span class="line"><span class="comment">*  - cascade指定级联策略   CascadeType.PERSIST代表级联保存   CascadeType.REMOVE代表级联删除   </span></span><br><span class="line"><span class="comment">                         CascadeType.ALL：级联相关操作都支持</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@JoinColumn</span>：指定外键的信息</span></span><br><span class="line"><span class="comment">    *  - name：指定外键的名字</span></span><br><span class="line"><span class="comment">    *  - referencedColumnName：外键class_id关联到Class班级表的哪一个列</span></span><br><span class="line"><span class="comment">    *  - foreignKey 指定外键的约束名，不写的话 会有默认生成</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//学生关联班级</span></span><br><span class="line">   <span class="meta">@ManyToOne</span>(targetEntity=Clazz<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.EAGER,cascade=CascadeType.PERSIST)</span><br><span class="line">   <span class="meta">@JoinColumn</span>(name=<span class="string">"clazz_id"</span>,referencedColumnName=<span class="string">"c_id"</span>, </span><br><span class="line">foreignKey=<span class="meta">@ForeignKey</span>(name=<span class="string">"FK_clazz_id"</span>))</span><br><span class="line">   <span class="keyword">private</span> Clazz clazz;</span><br><span class="line">.......</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Clzz类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_clazz"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clazz</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"c_id"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">// 班级主键id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String code;<span class="comment">// 班级编号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"tb_name"</span>, length = <span class="number">10</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">// 班级名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String bzr;<span class="comment">// 班主任</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  @OneToMany:一对多</span></span><br><span class="line"><span class="comment"> *  - targetEntity：当前类所关联的实体bean的类型</span></span><br><span class="line"><span class="comment"> *  - fetch 指定抓取策略   FetchType.LAZY：懒加载    FetchType.EAGER：立即加载</span></span><br><span class="line"><span class="comment"> *  - cascade指定级联策略   CascadeType.PERSIST代表级联保存   CascadeType.REMOVE代表级联删除   </span></span><br><span class="line"><span class="comment">                          CascadeType.ALL：级联相关操作都支持</span></span><br><span class="line"><span class="comment">        - mappedBy 指定关联关系对方实体bean的哪一个属性来维护                   </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//班级关联学生</span></span><br><span class="line"><span class="meta">@OneToMany</span>(targetEntity=Student<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.EAGER,</span><br><span class="line">cascade=CascadeType.ALL,mappedBy=<span class="string">"clazz"</span>)</span><br><span class="line">    <span class="keyword">private</span>  List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Clazz clazz = <span class="keyword">new</span> Clazz();</span><br><span class="line">clazz.setCode(<span class="string">"j233"</span>);</span><br><span class="line">clazz.setName(<span class="string">"java就业班"</span>);</span><br><span class="line">clazz.setBzr(<span class="string">"刘老师"</span>);</span><br><span class="line"></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"jack"</span>);</span><br><span class="line">s1.setAge(<span class="number">20</span>);</span><br><span class="line">s1.setEmail(<span class="string">"584614151@qq.com"</span>);</span><br><span class="line">s1.setSex(<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line">s1.setClazz(clazz);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 persist 保存学生信息 同时级联保存班级信息</span></span><br><span class="line"><span class="comment">//session.persist(s1);</span></span><br><span class="line"></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">s2.setName(<span class="string">"rose"</span>);</span><br><span class="line">s2.setAge(<span class="number">21</span>);</span><br><span class="line">s2.setEmail(<span class="string">"584616151@qq.com"</span>);</span><br><span class="line">s2.setSex(<span class="string">'男'</span>);</span><br><span class="line">s2.setClazz(clazz);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.persist(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询班级信息</span></span><br><span class="line">Clazz c1 = session.get(Clazz<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">System.out.println(<span class="string">"班级名字:"</span>+c1.getName());</span><br><span class="line"></span><br><span class="line">System.out.println(c1.getStudents());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Clazz clazz = <span class="keyword">new</span> Clazz();</span><br><span class="line">clazz.setCode(<span class="string">"j233"</span>);</span><br><span class="line">clazz.setName(<span class="string">"java就业班"</span>);</span><br><span class="line">clazz.setBzr(<span class="string">"刘老师"</span>);</span><br><span class="line"></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"jack"</span>);</span><br><span class="line">s1.setAge(<span class="number">20</span>);</span><br><span class="line">s1.setEmail(<span class="string">"584614151@qq.com"</span>);</span><br><span class="line">s1.setSex(<span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line">s1.setClazz(clazz);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 persist 保存学生信息 同时级联保存班级信息</span></span><br><span class="line"><span class="comment">//session.persist(s1);</span></span><br><span class="line"></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">s2.setName(<span class="string">"rose"</span>);</span><br><span class="line">s2.setAge(<span class="number">21</span>);</span><br><span class="line">s2.setEmail(<span class="string">"584616151@qq.com"</span>);</span><br><span class="line">s2.setSex(<span class="string">'男'</span>);</span><br><span class="line">s2.setClazz(clazz);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.persist(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询班级信息</span></span><br><span class="line">Clazz c1 = session.get(Clazz<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">System.out.println(<span class="string">"班级名字:"</span>+c1.getName());</span><br><span class="line"></span><br><span class="line">System.out.println(c1.getStudents());</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-一对一关联关系配置"><a href="#9-一对一关联关系配置" class="headerlink" title="9.一对一关联关系配置"></a>9.一对一关联关系配置</h3><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"c_id"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">// 用户id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"tb_name"</span>, length = <span class="number">10</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">// 用户名字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne</span>(targetEntity=Card<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.EAGER,cascade=CascadeType.PERSIST)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"card_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Card card;</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Card类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_card"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"tb_code"</span>, length = <span class="number">10</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * cascade=CascadeType.PERSIST:保存Card对象的时候，</span></span><br><span class="line"><span class="comment"> * 如果Card对象中有User对象的信息，那么可以进行级联保存，保存Card的时候同时将User信息进行保存</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="meta">@OneToOne</span>(targetEntity=User<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.EAGER,cascade=CascadeType.PERSIST)</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"jack"</span>);</span><br><span class="line"></span><br><span class="line">Card card = <span class="keyword">new</span> Card();</span><br><span class="line">card.setCode(<span class="string">"0000001..."</span>);</span><br><span class="line">card.setAddress(<span class="string">"长沙开福区..."</span>);</span><br><span class="line"><span class="comment">//card.setUser(user);</span></span><br><span class="line"></span><br><span class="line">user.setCard(card);</span><br><span class="line"></span><br><span class="line">session.persist(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-多对多关联关系配置"><a href="#10-多对多关联关系配置" class="headerlink" title="10.多对多关联关系配置"></a>10.多对多关联关系配置</h3><p>Student类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"tb_name"</span>, length = <span class="number">10</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToMany</span>(targetEntity=Course<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.LAZY,cascade=CascadeType.PERSIST)</span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"tb_s_c"</span>,joinColumns= &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"s_id"</span>)&#125;</span><br><span class="line">           ,inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"c_id"</span>)&#125;)</span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Course类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_course"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"c_id"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">// 课程id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"tb_name"</span>, length = <span class="number">10</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">// 课程名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> grade;<span class="comment">//课程学分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @ManyToMany:多对多</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @JoinTable：指定中间表的相关信息</span></span><br><span class="line"><span class="comment"> *   - name：指定中间表的名字</span></span><br><span class="line"><span class="comment"> *   - joinColumns：指定当前表在中间表 的 外键信息</span></span><br><span class="line"><span class="comment"> *   - inverseJoinColumns：指定Student对应的表在中间表中的外键信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(targetEntity=Student<span class="class">.<span class="keyword">class</span>,<span class="title">fetch</span></span>=FetchType.LAZY)</span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"tb_s_c"</span>,joinColumns= &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"c_id"</span>)&#125;</span><br><span class="line">           ,inverseJoinColumns = &#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"s_id"</span>)&#125;)</span><br><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建数据源</span></span><br><span class="line"><span class="comment">//Hibernate5创建连接工厂</span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Session类似于mybaits中的 sqlSession  底层封装了 Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"jack"</span>);</span><br><span class="line">s1.setSex(<span class="string">'男'</span>);</span><br><span class="line">s1.setAge(<span class="number">20</span>);</span><br><span class="line">s1.setEmail(<span class="string">"43444442@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">s2.setName(<span class="string">"rose"</span>);</span><br><span class="line">s2.setSex(<span class="string">'女'</span>);</span><br><span class="line">s2.setAge(<span class="number">20</span>);</span><br><span class="line">s2.setEmail(<span class="string">"43443242@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">Course c1 = <span class="keyword">new</span> Course();</span><br><span class="line">c1.setName(<span class="string">"java课程"</span>);</span><br><span class="line">c1.setGrade(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">Course c2 = <span class="keyword">new</span> Course();</span><br><span class="line">c2.setName(<span class="string">"大数据课程"</span>);</span><br><span class="line">c2.setGrade(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">Course c3 = <span class="keyword">new</span> Course();</span><br><span class="line">c3.setName(<span class="string">"人工智能课程"</span>);</span><br><span class="line">c3.setGrade(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jack选择了java课程以及大数据课程</span></span><br><span class="line">s1.getCourses().add(c1);</span><br><span class="line">s1.getCourses().add(c2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.persist(s1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rose选择了java课程和人工智能课程</span></span><br><span class="line">s2.getCourses().add(c1);</span><br><span class="line">s2.getCourses().add(c3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.persist(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当数据中已经存在课程的信息之后，学生选择课程 ，课进行如下操作  </span></span><br><span class="line">Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">s3.setName(<span class="string">"tom"</span>);</span><br><span class="line">s3.setSex(<span class="string">'男'</span>);</span><br><span class="line">s3.setAge(<span class="number">20</span>);</span><br><span class="line">s3.setEmail(<span class="string">"43466542@qq.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//tom选择了大数据  和  人工智能</span></span><br><span class="line">Course cc1 = <span class="keyword">new</span> Course();</span><br><span class="line">cc1.setId(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Course cc2 = <span class="keyword">new</span> Course();</span><br><span class="line">cc2.setId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">s3.getCourses().add(cc1);        </span><br><span class="line">s3.getCourses().add(cc2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//session.save(s3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//id为的6的学生  选择了 java   人工智能</span></span><br><span class="line">Student s =session.get(Student<span class="class">.<span class="keyword">class</span>, 6)</span>;</span><br><span class="line">s.getCourses().add(cc1);</span><br><span class="line">s.getCourses().add(cc2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-简单-hql-单表查询语句"><a href="#11-简单-hql-单表查询语句" class="headerlink" title="11.简单 hql 单表查询语句"></a>11.简单 hql 单表查询语句</h3><p>Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  <span class="comment">//声明该类为持久化类，如果不声明的话，Hibernate不会去管理该实体bean</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"tb_Student"</span>)<span class="comment">//声明改持久化类与哪一张表相对应  , 如果不用注解 @Table 声明表的信息时，会将类名做为表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为数据表添加数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSave</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取 数据库连接池    Hibernate中的连接池 SessionFactory     Mybatis中的连接池SqlSessionFactory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//configure()方法默认加载 src下的 hibernate.cfg.xml   </span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"><span class="comment">//构建数据库连接池    SessionFactory类似于 DataSource</span></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Mybatis中的连接 SqlSession    Hibernate中的连接叫 Session   底层相当于对  Connection  </span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"科比"</span>);</span><br><span class="line">s1.setAge(<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">s2.setName(<span class="string">"麦迪"</span>);</span><br><span class="line">s2.setAge(<span class="number">38</span>);</span><br><span class="line"></span><br><span class="line">Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">s3.setName(<span class="string">"詹姆斯"</span>);</span><br><span class="line">s3.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">session.save(s3);</span><br><span class="line">session.save(s2);</span><br><span class="line">session.save(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();  </span><br><span class="line">session.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSelect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 数据库连接池    Hibernate中的连接池 SessionFactory     Mybatis中的连接池SqlSessionFactory</span></span><br><span class="line"><span class="comment">//configure()方法默认加载 src下的 hibernate.cfg.xml   </span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"><span class="comment">//构建数据库连接池    SessionFactory类似于 DataSource</span></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Mybatis中的连接 SqlSession    Hibernate中的连接叫 Session   底层相当于对  Connection</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">/*Query&lt;Student&gt; query = session.createQuery("select s from Student s");</span></span><br><span class="line"><span class="comment">List&lt;Student&gt; stus = query.list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("select s from Student s").list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*List&lt;Student&gt; stus = session.createQuery("from Student").list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 只查询学生的年龄</span></span><br><span class="line"><span class="comment">/*List&lt;Integer&gt; ages = session.createQuery("select age from Student").list();</span></span><br><span class="line"><span class="comment">System.out.println("ages:"+ages);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* //给类 声明 别名</span></span><br><span class="line"><span class="comment">List&lt;Integer&gt; ages = session.createQuery("select s.age from Student s").list();</span></span><br><span class="line"><span class="comment">System.out.println("ages:"+ages);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 只查询学生的姓名</span></span><br><span class="line"><span class="comment">/* List&lt;String&gt; names = session.createQuery("select name from Student").list();</span></span><br><span class="line"><span class="comment">System.out.println("names:"+names);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select了几次 Object[]数组就是多少 </span></span><br><span class="line"><span class="comment">// 5. 只查询学生的姓名与年龄</span></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("select new Student(age,name) from Student").list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   List&lt;Object[]&gt; list = session.createQuery("select s.name,s.age from Student s").list();</span></span><br><span class="line"><span class="comment">for(Object[] obj : list)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(obj));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// select new 子句 可以改变List集合中放什么</span></span><br><span class="line"><span class="comment">// 6. select new list</span></span><br><span class="line"><span class="comment">/*List&lt;List&lt;Object[]&gt;&gt; list = session.createQuery("select new list(s.name,s.age) from Student s").list();</span></span><br><span class="line"><span class="comment">for(List&lt;Object[]&gt; obj : list)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(obj.size()+"--"+obj+"--"+obj.get(0)+"--"+obj.get(1));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. select new map</span></span><br><span class="line"><span class="comment">// 注意：as name是别名会作为map的key，s.name的结果会作为map的value</span></span><br><span class="line"><span class="comment">/*List&lt;Map&lt;Object, Object&gt;&gt; list  =  session.createQuery("select new map(s.name as name,s.age as age) from Student s").list();</span></span><br><span class="line"><span class="comment">for(Map&lt;Object, Object&gt; map : list)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(map);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据学生名字查询学生信息    麦迪</span></span><br><span class="line"><span class="comment">// 1. 参数查询  方式一</span></span><br><span class="line"><span class="comment">/* Query query =  session.createQuery("select s from Student s where s.name =: name ");</span></span><br><span class="line"><span class="comment">query.setParameter("name", "麦迪");</span></span><br><span class="line"><span class="comment">List&lt;Student&gt; stus = query.list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*List&lt;Student&gt; stus = session.createQuery("select s from Student s where s.name =: name ").setParameter("name", "麦迪").list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据学生名字以及学生年龄查询学生信息</span></span><br><span class="line"><span class="comment">// 2. 参数查询 方式二     ?可以加上数字  不能加英文字母或中文字母等</span></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("select s from Student s where s.name = ?1 and s.age = ?2")</span></span><br><span class="line"><span class="comment">.setParameter("1", "麦迪").setParameter("2", 38).list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数查询 方式三</span></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("select s from Student s where s.name = ? and s.age = ?")</span></span><br><span class="line"><span class="comment">.setParameter(0, "麦迪").setParameter(1, 38).list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 查询年龄大于18岁</span></span><br><span class="line"><span class="comment">/*List&lt;Student&gt; stus = session.createQuery("select s from Student s where s.age &gt; ? ")</span></span><br><span class="line"><span class="comment">.setParameter(0, 18).list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 当查询只有一条数据时，可以使用uniqueResult</span></span><br><span class="line"><span class="comment">/* Student stus = (Student)session.createQuery("select s from Student s where id = ? ")</span></span><br><span class="line"><span class="comment">.setParameter(0, 1).uniqueResult();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"><span class="comment">// 6. order by 排序</span></span><br><span class="line"><span class="comment">/*List&lt;Student&gt; stus = session.createQuery("from Student order by age asc").list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 最多显示N条记录</span></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("from Student ").setMaxResults(2).list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 从第几条开始查询</span></span><br><span class="line"><span class="comment">/* List&lt;Student&gt; stus = session.createQuery("from Student ").setFirstResult(1).list();</span></span><br><span class="line"><span class="comment">System.out.println("stus:"+stus);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 分页查询 </span></span><br><span class="line"><span class="comment">// 分页，4条数据，每页显示2条，计算得出总页数是2</span></span><br><span class="line"><span class="comment">// 第一页：setFirstResult(0),setMaxResults(2)</span></span><br><span class="line"><span class="comment">// 第二页：setFirstResult(2),setMaxResults(2)</span></span><br><span class="line"><span class="comment">// jsp页面传递第几页[0,1]，每页显示几条</span></span><br><span class="line">List&lt;Student&gt; stus = session.createQuery(<span class="string">"from Student "</span>).setFirstResult(<span class="number">2</span>).setMaxResults(<span class="number">2</span>).list();</span><br><span class="line">System.out.println(<span class="string">"stus:"</span>+stus);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-hql-多表关联查询"><a href="#12-hql-多表关联查询" class="headerlink" title="12.hql 多表关联查询"></a>12.hql 多表关联查询</h3><p>学生表（id、name、sex、age、clazz）和班级表 (id,code,students)</p><p>HibernateSelect类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSelect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 数据库连接池    Hibernate中的连接池 SessionFactory     Mybatis中的连接池SqlSessionFactory</span></span><br><span class="line"><span class="comment">//configure()方法默认加载 src下的 hibernate.cfg.xml   </span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"><span class="comment">//构建数据库连接池    SessionFactory类似于 DataSource</span></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接    Mybatis中的连接 SqlSession    Hibernate中的连接叫 Session   底层相当于对  Connection  </span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取学生年龄大于18岁的班级的编号</span></span><br><span class="line">findClazzByStudentAge(session);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据班级code查找学生信息</span></span><br><span class="line"><span class="comment">//findStudentsByClazzCode(session);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据班级code查找学生信息</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findStudentsByClazzCode</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line"><span class="comment">//学生直接通过  inner join 关联班级 属于显示连接</span></span><br><span class="line"><span class="comment">//String hql = "select  s from Student s inner join s.clazz c where c.code = 'j233'";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于学生关联班级的时候，学生是多方，班级是单方  多方关联单方的时候可以将 inner join 省略掉，省略掉之后属于隐式连接</span></span><br><span class="line">String hql = <span class="string">"select  s from Student s where s.clazz.code = 'j233'"</span>;</span><br><span class="line"><span class="comment">//获取学生信息</span></span><br><span class="line">List&lt;Student&gt; students = session.createQuery(hql).list();</span><br><span class="line">System.out.println(<span class="string">"students:"</span>+students);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取学生年龄大于18岁的班级</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findClazzByStudentAge</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单方关联多方的时候不可将 inner join 省略掉！！！</span></span><br><span class="line">String hql = <span class="string">"select  distinct c.code  from Clazz c  inner join c.students s  where s.age &gt; 18"</span>;</span><br><span class="line">List&lt;String&gt; codes = session.createQuery(hql).list();</span><br><span class="line">System.out.println(<span class="string">"codes:"</span>+codes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-聚合函数"><a href="#13-聚合函数" class="headerlink" title="13.聚合函数"></a>13.聚合函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSelect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 数据库连接池    Hibernate中的连接池 SessionFactory     Mybatis中的连接池SqlSessionFactory</span></span><br><span class="line"><span class="comment">//configure()方法默认加载 src下的 hibernate.cfg.xml   </span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"><span class="comment">//构建数据库连接池    SessionFactory类似于 DataSource</span></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"><span class="comment">//获取连接    Mybatis中的连接 SqlSession    Hibernate中的连接叫 Session   底层相当于对  Connection  </span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算学生年龄平均值</span></span><br><span class="line"><span class="comment">//double avgAge = (double)session.createQuery("select avg(age) from Student").uniqueResult();</span></span><br><span class="line"><span class="comment">//System.out.println("avgAge:"+avgAge);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算学生总人数</span></span><br><span class="line"><span class="keyword">long</span> num = (<span class="keyword">long</span>)session.createQuery(<span class="string">"select count(*) from Student"</span>).uniqueResult();</span><br><span class="line">System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算最大值  max   计算最小值 min  计算总和 sum  返回的记录只有一条  因此可以调用 Query对象的  uniqueResult 方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-二级缓存"><a href="#14-二级缓存" class="headerlink" title="14.二级缓存"></a>14.二级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSelect_</span>二级缓存<span class="title">session</span>效果测试 </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 数据库连接池    Hibernate中的连接池 SessionFactory     Mybatis中的连接池SqlSessionFactory</span></span><br><span class="line"><span class="comment">//configure()方法默认加载 src下的 hibernate.cfg.xml   </span></span><br><span class="line">StandardServiceRegistry standardServiceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().configure().build();</span><br><span class="line"><span class="comment">//构建数据库连接池    SessionFactory类似于 DataSource</span></span><br><span class="line">SessionFactory   sessionFactory = <span class="keyword">new</span> MetadataSources(standardServiceRegistry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//hibernate中session可以理解成连接  同时也可以理解成  一级缓存  </span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据学生id获取学生信息    由于id为1的学生信息在第一级缓存中没有，在第二级缓存中也没有 ，</span></span><br><span class="line"><span class="comment">因此此处会发送sql语句，并将查询到的数据存放在一级缓存以及二级缓存中</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">Student s1 = session.get(Student<span class="class">.<span class="keyword">class</span>, 1)</span>;<span class="comment">//  查询学生（一级 、二级）  以及  班级 （一级） </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于一级缓存中已经有学生id为1的学生信息因此此处不会发送sql语句至数据库</span></span><br><span class="line">Student s2 = session.get(Student<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭  一级 缓存    那么会将一级缓存中的数据清空，释放内存</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新获取session</span></span><br><span class="line">session = sessionFactory.openSession();</span><br><span class="line">session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取学生id为1的学生信息，在一级缓存中已经不存在了，但是二级缓存中还有学生id为1的学生信息，因此此处不会发送sql语句</span></span><br><span class="line">Student s3 = session.get(Student<span class="class">.<span class="keyword">class</span>, 1)</span>;<span class="comment">//此处会发送sql去查询班级的信息，因为Clazz没有开启二级缓存，同时一级缓存中的班级信息已经被清空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 获取学生id为2的学生信息，在一级缓存中没有该学生的信息，接着判断二级缓存中是否有该学生的信息，</span></span><br><span class="line"><span class="comment">* 如果二级缓存中有该学生的信息，则不发送sql语句，如果没有则发送sql语句，并将数据存放在一级缓存以及二级缓存中</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">Student s4 = session.get(Student<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2020/02/28/Spring/"/>
      <url>/2020/02/28/Spring/</url>
      
        <content type="html"><![CDATA[<h3 id="1-IoC和DI"><a href="#1-IoC和DI" class="headerlink" title="1.IoC和DI"></a>1.IoC和DI</h3><p> IoC（Inverse of Control：控制反转，Spring的原作者Rod Johnson）：  A组件（service）需要调用B组件(dao)，成为A组件依赖B组件。方式一、new一个；方式二、通过工厂获取一个；方式三、由容器提供了一个。方式一、二（传统）需要A组件主动去获取；方式三方式A组件(service)只要被动接收依赖的对象（dao）就行了——从A组件的角度来看：A组件由原来的主动获取变成被动接受，控制被反过来 —— 叫控制反转。</p><p> DI（Dependency Injection：依赖注入）： Martine Fowler。——从容器的角度来看：容器将被依赖B组件(dao)注入给A组件(service)  ——依赖注入。正因为有容器的依赖注入，A组件才得以接受容器的注入，实现控制反转。</p><h3 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2.依赖注入"></a>2.依赖注入</h3><p>依赖注入可分为3种：</p><ol><li>接口注入。很少使用。</li><li>设值注入：就是通过property元素控制调用setter方法，就是所谓的设值注入。</li><li>构造注入：就是constructor-arg控制调用有参数的构造器，由构造器来注入被依赖组件。就是所谓的构造器注入。</li></ol><ul><li><p>bean元素 ：驱动使用new调用构造器。 默认它总是调用无参数的构造器。如果想控制它调用有参数的构造器，就需要在&lt;bean…/&gt;元素里添加&lt;constructor-arg…/&gt;子元素，每个该元素代表一个构造器参数。</p></li><li><p>property元素： 驱动它调用setter方法。 对象创建出来之后，立即就会被调用。</p></li><li><p>constructor-arg元素： 驱动调用有参数的构造器。</p></li></ul><p>构造注入和set注入的区别：<br>构造注入 在对象建立时就准备好所有资源,如果要建立的对象关系很多(参数多)，<br>使用构造注入会在建构函式上留下一长串参数,且不易记忆,但是如果想要让一些数据成员或资源变为只读或私有,可以选择构造注入。</p><p>set注入 在对象建立好后,使用set注入内容，可以有明确的名称，可以了解注入的对象是什么，setXXX当然比Constructor上某个参数的位置代表某个对象好，但是使用set注入由于提供了setXXX方法,所以不能保证相关的数据成员或资源在执行时不会被更改设定</p><p>总结：如果想要让一些数据成员或资源变为只读或私有,可以选择构造注入。大多数时候都是使用set注入。</p><h4 id="2-1设值注入"><a href="#2-1设值注入" class="headerlink" title="2.1设值注入"></a>2.1设值注入</h4><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span>  String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Date bDate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=====经过User的无参构造器===="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getbDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setbDate</span><span class="params">(Date bDate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bDate = bDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", sex="</span> + sex + <span class="string">", bDate="</span> + bDate + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*强内聚（一个类的功能越多越好） 低耦合（对象所依赖的尽量少）</span></span><br><span class="line"><span class="comment">* 依赖关系（耦合），service依赖dao</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">//加载spring核心配置文件，让spring容器进行初始化</span></span><br><span class="line">   ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//从容器中获取User对象</span></span><br><span class="line">   User user = context.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   System.out.println(<span class="string">"user:"</span>+user);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         User user = new User();</span></span><br><span class="line"><span class="comment">         user.setId(1);</span></span><br><span class="line"><span class="comment">         user.setName("jack");</span></span><br><span class="line"><span class="comment">         user.setSex("男");</span></span><br><span class="line"><span class="comment">         user.setbDate(birdate);</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jack"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过value指定sex的值为男 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 通过ref指定需要传入的bean的id --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bDate"</span> <span class="attr">ref</span>=<span class="string">"birdate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"birdate"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2构造注入"><a href="#2-2构造注入" class="headerlink" title="2.2构造注入"></a>2.2构造注入</h4><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 强内聚（一个类的功能越多越好） 低耦合（对象所依赖的尽量少）</span></span><br><span class="line"><span class="comment">  * 依赖关系（耦合），service依赖dao</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加载spring核心配置文件，让spring容器进行初始化</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从容器中根据bean的id获取User对象   如果id不存在则在程序运行的时候会出现异常</span></span><br><span class="line">    User user = context.getBean(<span class="string">"user"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"user:"</span>+user);   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从容器中获取User对象</span></span><br><span class="line">    User user02 = context.getBean(<span class="string">"user02"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"user02:"</span>+user02);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         User user = new User(1,"rose",'女',birdate);         </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            index:指定参数下标</span></span><br><span class="line"><span class="comment">            value：指定参数的值</span></span><br><span class="line"><span class="comment">            type:指定参数的类型</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"rose"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">type</span>=<span class="string">"char"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">ref</span>=<span class="string">"birdate"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         </span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user02"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            name:指定参数名字</span></span><br><span class="line"><span class="comment">            value：指定参数的值</span></span><br><span class="line"><span class="comment">            type:指定参数的类型</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jack"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">type</span>=<span class="string">"char"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bDate"</span> <span class="attr">ref</span>=<span class="string">"birdate"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span> </span><br><span class="line">         </span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"birdate"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Bean别名"><a href="#3-Bean别名" class="headerlink" title="3.Bean别名"></a>3.Bean别名</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                     给bean声明别名</span></span><br><span class="line"><span class="comment">                             方案一:通过name属性</span></span><br><span class="line"><span class="comment">                             方案二:通过标签通过&lt;alias.../&gt;元素专门指定执行别名信息</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">name</span>=<span class="string">"us"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"us"</span> <span class="attr">alias</span>=<span class="string">"userInfo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-简化配置"><a href="#4-简化配置" class="headerlink" title="4.简化配置"></a>4.简化配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--  &lt;bean id="user" class="com.zx.bean.User"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="id" value="1"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="name" value="jack"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">p:id</span>=<span class="string">"1"</span> <span class="attr">p:name</span>=<span class="string">"jack"</span> <span class="attr">p:sex</span>=<span class="string">"女"</span> <span class="attr">p:bDate-ref</span>=<span class="string">"bdate"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"us"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">c:_0</span>=<span class="string">"2"</span> <span class="attr">c:_1</span>=<span class="string">"tom"</span> <span class="attr">c:_2</span>=<span class="string">"男"</span> <span class="attr">c:_3-ref</span>=<span class="string">"bdate"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bdate"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-嵌套bean"><a href="#5-嵌套bean" class="headerlink" title="5.嵌套bean"></a>5.嵌套bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">p:id</span>=<span class="string">"1"</span> <span class="attr">p:name</span>=<span class="string">"jack"</span> <span class="attr">p:sex</span>=<span class="string">"男"</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                                配置嵌套bean </span></span><br><span class="line"><span class="comment">            1、嵌套bean无需配置id，因为不能通过id从容器中获取到</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.Dog"</span> <span class="attr">p:id</span>=<span class="string">"2"</span> <span class="attr">p:dogName</span>=<span class="string">"泰迪"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user02"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">c:_0</span>=<span class="string">"1"</span> <span class="attr">c:_1</span>=<span class="string">"jack"</span> <span class="attr">c:_2</span>=<span class="string">"男"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--          配置嵌套bean  --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.Dog"</span> <span class="attr">p:id</span>=<span class="string">"2"</span> <span class="attr">p:dogName</span>=<span class="string">"阿拉斯加"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-bean的自动装配"><a href="#6-bean的自动装配" class="headerlink" title="6.bean的自动装配"></a>6.bean的自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-autowire</span>=<span class="string">"byName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">      byName：根据setter方法名来自动装配。Spring查找容器中全部Bean，</span></span><br><span class="line"><span class="comment">               找出其中id属性与setter方法名去掉set前缀后同名的Bean来完成注入。</span></span><br><span class="line"><span class="comment">               如果没有找到匹配的Bean实例，则Spring不会进行任何注入，也不报错</span></span><br><span class="line"><span class="comment">      &lt;bean id="user" class="com.zx.bean.User" p:id="1" </span></span><br><span class="line"><span class="comment">      p:name="jack" p:sex="男" autowire="byName"&gt;&lt;/bean&gt; </span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      byType：根据setter方法的形参类型来自动装配。BeanFactory查找容器中全部Bean，</span></span><br><span class="line"><span class="comment">      如果正好有一个Bean类型与setter形参类型匹配，就自动注入这个Bean；</span></span><br><span class="line"><span class="comment">      如果有多个这样的Bean，就抛出一个异常：NoUniqueBeanDefinitionException；</span></span><br><span class="line"><span class="comment">      如果没有找到匹配的Bean实例，则Spring不会进行任何注入，也不报错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">constructor：通过构造器进行注入，首先查找是否有bean的id和形参名字一致，如果有则注入</span></span><br><span class="line"><span class="comment">如果没有则查找是否有和参数类型匹配的进行注入</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">     no：不使用自动装配。Bean依赖必须通过ref元素定义</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     default： 由上级标签&lt;beans&gt;的default-autowire属性确定。这是默认的配置</span></span><br><span class="line"><span class="comment">       --&gt;</span> </span><br><span class="line">     </span><br><span class="line">       <span class="comment">&lt;!-- &lt;bean id="user" class="com.zx.bean.User" p:id="1" </span></span><br><span class="line"><span class="comment">      p:name="jack" p:sex="男" autowire="byType"&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- &lt;bean id="user" class="com.zx.bean.User" c:_0="1" </span></span><br><span class="line"><span class="comment">      c:_1="jack" c:_2="男" autowire="constructor"&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- &lt;bean id="user" class="com.zx.bean.User" p:id="1" </span></span><br><span class="line"><span class="comment">      p:name="jack" p:sex="男" autowire="no"&gt;&lt;/bean&gt; --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">p:id</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">"jack"</span> <span class="attr">p:sex</span>=<span class="string">"男"</span> <span class="attr">autowire</span>=<span class="string">"default"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.Dog"</span> <span class="attr">p:id</span>=<span class="string">"3"</span> <span class="attr">p:dogName</span>=<span class="string">"旺旺"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-集合属性的注入"><a href="#7-集合属性的注入" class="headerlink" title="7.集合属性的注入"></a>7.集合属性的注入</h3><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String[] names;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Integer&gt; ages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Properties  props;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getNames() &#123;</span><br><span class="line"><span class="keyword">return</span> names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNames</span><span class="params">(String[] names)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.names = names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(List&lt;String&gt; address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Integer&gt; <span class="title">getAges</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAges</span><span class="params">(Set&lt;Integer&gt; ages)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ages = ages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maps = maps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Properties <span class="title">getProps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.props = props;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", names="</span> + Arrays.toString(names) + <span class="string">", address="</span> + address + <span class="string">", ages="</span> + ages</span><br><span class="line">+ <span class="string">", maps="</span> + maps + <span class="string">", props="</span> + props + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-autowire</span>=<span class="string">"byName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.User"</span> <span class="attr">p:id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"names"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>开福区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>岳麓区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ages"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>21<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maps"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"0001"</span> <span class="attr">value</span>=<span class="string">"中南大学"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"0002"</span> <span class="attr">value</span>=<span class="string">"湖南大学"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"0003"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>长沙理工<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"01"</span>&gt;</span>java<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"02"</span>&gt;</span>python<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-抽象bean"><a href="#8-抽象bean" class="headerlink" title="8.抽象bean"></a>8.抽象bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-autowire</span>=<span class="string">"byName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 配置抽象bean </span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         abstract="true":声明该 bean是抽象bean</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         当多个bean中属性名与属性值都一致的情况下  可以将 公共的信息抽取至抽象bean中</span></span><br><span class="line"><span class="comment">         子bean可以通过 parent  指定 抽象父bean的信息,并不需要创建一个Animal类。</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"animal"</span>   <span class="attr">p:id</span>=<span class="string">"1"</span> <span class="attr">p:name</span>=<span class="string">"旺财"</span> <span class="attr">p:age</span>=<span class="string">"1"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.Dog"</span> <span class="attr">parent</span>=<span class="string">"animal"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.zx.bean.Cat"</span>  <span class="attr">p:address</span>=<span class="string">"开福区XX"</span> <span class="attr">parent</span>=<span class="string">"animal"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟hibernate框架</title>
      <link href="/2020/01/05/%E6%A8%A1%E6%8B%9Fhibernate%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/01/05/%E6%A8%A1%E6%8B%9Fhibernate%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="hibernate框架"><a href="#hibernate框架" class="headerlink" title="hibernate框架"></a>hibernate框架</h3><p>&emsp;&emsp;作为SSH三大框架之一的Hibernate，是用来把程序的Dao层和数据库打交道用的，它封装了JDBC的步骤，是我们对数据库的操作更加简单，更加快捷。利用Hibernate框架我们就可以不再编写重复的JDBC代码，不再反复的测试我们的SQL语句写的如何。这里这需要我们简单配置，调用框架给我们提供的方法，就可以完成对数据增删改查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.bind.v2.model.core.ID;</span><br><span class="line"><span class="keyword">import</span> com.zx.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.zx.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> com.zx.annotation.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟Hibernate框架，实现数据的增 删 改 查等操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据clazz获取表名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">getTableName</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类名作为默认表名</span></span><br><span class="line">String tableName = clazz.getName();</span><br><span class="line"><span class="comment">// 获取类名上的注解</span></span><br><span class="line">Table table = clazz.getAnnotation(Table<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (table != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 类上有表名注解</span></span><br><span class="line">tableName = table.name();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tableName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*//定义方法获取列名</span></span><br><span class="line"><span class="comment">   public  String getColumnName(Field field) &#123;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   String columnName = field.getName();</span></span><br><span class="line"><span class="comment">   //获取字段上的注解</span></span><br><span class="line"><span class="comment">   Column column = field.getAnnotation(Column.class);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">   if(column != null) &#123;</span></span><br><span class="line"><span class="comment">   columnName = column.name();</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   return columnName;</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   &#125;*/</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">Connection con =<span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册数据库连接</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/book"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建StringBuffer对象来拼接sql语句 "insert into 表名（列1，列2，列3...） values(?,?,?...)"</span></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="comment">// 获取表名</span></span><br><span class="line">String tableName =<span class="keyword">this</span>.getTableName(t.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象的class类型</span></span><br><span class="line">Class&lt;?&gt; clazz = t.getClass();</span><br><span class="line">Field[]  fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">sql.append(<span class="string">"insert into "</span> + tableName + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 遍历字段数组,拼接列名</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段上注解为id的</span></span><br><span class="line">Id id = fields[i].getAnnotation(Id<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 该字段为主键</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len++;</span><br><span class="line">String columnName = fields[i].getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段上的注解</span></span><br><span class="line">Column column = fields[i].getAnnotation(Column<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (column != <span class="keyword">null</span>) &#123;</span><br><span class="line">columnName = column.name();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sql.append(i == fields.length - <span class="number">1</span> ? columnName + <span class="string">")"</span> : columnName + <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sql.append(<span class="string">" values("</span>);</span><br><span class="line"><span class="comment">// 拼接values()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">sql.append(i == len - <span class="number">1</span> ? <span class="string">"?)"</span> : <span class="string">"?,"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"sql:"</span> + sql.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取PrepareStatement</span></span><br><span class="line"> ps = con.prepareStatement(sql.toString());</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fields[i+1].setAccessible(true);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ps.setObject(i+1, fields[i+1].get(t));</span></span><br><span class="line"><span class="comment"> * System.out.println("fields[i].get(t):"+fields[i+1].get(t));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> Id id = fields[i].getAnnotation(Id<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">"I:"</span> + i);</span><br><span class="line"> <span class="comment">// 根据字段名以及Class获取属性描述其对象</span></span><br><span class="line"> PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(fields[i].getName(), clazz);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取字段对应的get方法</span></span><br><span class="line"> Method getMethod = pd.getReadMethod();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 利用反射技术，调用方法</span></span><br><span class="line"> Object val = getMethod.invoke(t);</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">"val:"</span> + val);</span><br><span class="line"> ps.setObject(i, val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ps!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ps.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 ,根据id删</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/book"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">// 准备sql语句 delete from 表名 where id = ？</span></span><br><span class="line"><span class="comment">// 获取表名</span></span><br><span class="line">String tableName = <span class="keyword">this</span>.getTableName(clazz);</span><br><span class="line"></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sql.append(<span class="string">"delete from "</span> + tableName + <span class="string">" where id= ?"</span>);</span><br><span class="line">System.out.println(<span class="string">"del:"</span> + sql.toString());</span><br><span class="line"><span class="comment">// 获取prepareStatement</span></span><br><span class="line">ps = con.prepareStatement(sql.toString());</span><br><span class="line">ps.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询 所有的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">query</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/book"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">// 准备sql语句 select *from 表名</span></span><br><span class="line"><span class="comment">// 获取表 名</span></span><br><span class="line">String tableName = <span class="keyword">this</span>.getTableName(clazz);</span><br><span class="line"></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sql.append(<span class="string">"select *from "</span> + tableName);</span><br><span class="line">System.out.println(<span class="string">"del:"</span> + sql.toString());</span><br><span class="line"><span class="comment">// 获取prepareStatement</span></span><br><span class="line">ps = con.prepareStatement(sql.toString());</span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合用来封装数据</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有字段</span></span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建实例</span></span><br><span class="line"> Object obj = clazz.newInstance();</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据字段名以及Class获取属性描述其对象</span></span><br><span class="line">   PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(fields[i].getName(), clazz);</span><br><span class="line"></span><br><span class="line">   Method setMethod = pd.getWriteMethod();</span><br><span class="line"></span><br><span class="line">   Object val = rs.getObject(fields[i].getName());</span><br><span class="line"></span><br><span class="line">   setMethod.invoke(obj, val);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  list.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (List&lt;T&gt;) list;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据 根据主键id查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">query</span><span class="params">(Class&lt;?&gt; clazz,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/book"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">// 准备sql语句 select *from 表名</span></span><br><span class="line"><span class="comment">//获取表名</span></span><br><span class="line">String tableName =<span class="keyword">this</span>.getTableName(clazz);</span><br><span class="line"></span><br><span class="line">StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sql.append(<span class="string">"select *from "</span> + tableName+<span class="string">" where id =? "</span>);</span><br><span class="line">System.out.println(<span class="string">"del:"</span> + sql.toString());</span><br><span class="line"><span class="comment">// 获取prepareStatement</span></span><br><span class="line">ps = con.prepareStatement(sql.toString());</span><br><span class="line">ps.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合用来封装数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有字段</span></span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建实例</span></span><br><span class="line">  Object obj = clazz.newInstance();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字段名以及Class获取属性描述其对象</span></span><br><span class="line">PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(fields[i].getName(), clazz);</span><br><span class="line"></span><br><span class="line">Method setMethod = pd.getWriteMethod();</span><br><span class="line"></span><br><span class="line">Object val = rs.getObject(fields[i].getName());</span><br><span class="line"></span><br><span class="line">setMethod.invoke(obj, val);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T) obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id更新数据  update student set sex='男' where id=4;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Class&lt;?&gt; clazz,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     Connection con = <span class="keyword">null</span>;</span><br><span class="line">     PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取数据库驱动</span></span><br><span class="line"> Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> <span class="comment">// 获取连接</span></span><br><span class="line"> con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/book"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"> <span class="comment">// 准备sql语句 select *from 表名</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 获取表名</span></span><br><span class="line"> String tableName = <span class="keyword">this</span>.getTableName(clazz);</span><br><span class="line"></span><br><span class="line"> StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"> sql.append(<span class="string">"update  "</span>+ tableName+<span class="string">" set sex='男' where id= ?"</span>);</span><br><span class="line"> System.out.println(<span class="string">"del:"</span> + sql.toString());</span><br><span class="line"> <span class="comment">// 获取prepareStatement</span></span><br><span class="line"> ps = con.prepareStatement(sql.toString());</span><br><span class="line"> ps.setInt(<span class="number">1</span>, id);</span><br><span class="line"> <span class="comment">// 执行sql</span></span><br><span class="line"> ps.executeUpdate();</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2020/01/02/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/01/02/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="文件上传要素："><a href="#文件上传要素：" class="headerlink" title="文件上传要素："></a>文件上传要素：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"提交地址"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span>  <span class="comment">&lt;!--name值随便写&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>后台Servlet上必须加上注解   @MultipartConfig</p></blockquote><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>UploadListener类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fkjava.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span>  </span>&#123; </span><br><span class="line">         <span class="comment">// 初始化创建一个上传的文件夹，如果文件夹存在就不再重复创建</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获得ServletContext</span></span><br><span class="line">    ServletContext context = event.getServletContext();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获得web项目的根路径下的upload的路径</span></span><br><span class="line">    String realPath = context.getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath:"</span>+realPath);</span><br><span class="line">    <span class="comment">// 构造一个File</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="comment">// 判断该File是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    <span class="comment">// 如果不存在，创建</span></span><br><span class="line">    file.mkdirs();</span><br><span class="line">    System.out.println(<span class="string">"创建上传文件夹成功!"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"上传文件夹已经存在!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UploadServlet类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fkjava.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传的要素</span></span><br><span class="line"><span class="comment"> * 1、页面中请求方式必须是  post请求</span></span><br><span class="line"><span class="comment"> * 2、form表单必须加上属性 enctype="multipart/form-data"</span></span><br><span class="line"><span class="comment"> * 3、后台Servlet上必须加上注解   <span class="doctag">@MultipartConfig</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UploadServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(<span class="string">"username："</span> + username);</span><br><span class="line"></span><br><span class="line">Part part = request.getPart(<span class="string">"pic"</span>);</span><br><span class="line"><span class="comment">/*常用方法*/</span></span><br><span class="line"> System.out.println(<span class="string">"name："</span> + part.getName());</span><br><span class="line">System.out.println(<span class="string">"size："</span> + part.getSize());</span><br><span class="line">System.out.println(<span class="string">"SubmittedFileName："</span> + part.getSubmittedFileName());</span><br><span class="line">System.out.println(<span class="string">"ContentType："</span> + part.getContentType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得上传的文件的原来的名称 1.jpg   ==  &gt;  434343fdfdffd.jpg</span></span><br><span class="line">String fileName = part.getSubmittedFileName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过UUID生成随机数</span></span><br><span class="line">String fn = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得上传的文件夹路径</span></span><br><span class="line">String filePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">System.out.println(<span class="string">"filePath:"</span>+filePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传        File.separator 用于获取文件分隔符       d:upload/4343434334343.jpg</span></span><br><span class="line">part.write(filePath + File.separator + fn+fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length()));</span><br><span class="line">System.out.println(<span class="string">"上传文件成功!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'fileUpload'</span> <span class="attr">method</span>= <span class="string">'post'</span> <span class="attr">enctype</span>=<span class="string">'multipart/form-data'</span>&gt;</span></span><br><span class="line">        选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'pic'</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义数据源</title>
      <link href="/2019/12/31/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2019/12/31/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>解析配置文件，获得连接的参数。</li><li>创建一个集合[连接池]。</li><li>用户到连接池获取连接<br>– 连接池空：创建连接，通过动态代理绑定连接，返回代理对象给用户。<br>– 连接池中有连接：直接拿一个返回给用户。</li><li>用户操作完成，调用close方法。</li><li>判断用户调用的是close方法，检查连接池最大可以保持数，如果没有到最大可保存数，将连接放入集合，不执行close方法。如果已经到最大可保存数，直接调用close方法关闭连接。 </li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>MyDataSourceTest类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.自定义数据源;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建连接对象</span></span><br><span class="line">MyDataSource dataSource = <span class="keyword">new</span> MyDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定数据库连接</span></span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定数据库的url地址</span></span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/booksys"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//数据库的账号</span></span><br><span class="line">dataSource.setUserName(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库的密码</span></span><br><span class="line">dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置最大活跃数</span></span><br><span class="line">dataSource.setMaxActive(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置最大保留数</span></span><br><span class="line">dataSource.setMaxIdle(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从连接池中获取连接</span></span><br><span class="line">Connection con1 = dataSource.getConnection();</span><br><span class="line">Connection con2 = dataSource.getConnection();</span><br><span class="line">Connection con3 = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"con1:"</span>+con1);</span><br><span class="line">System.out.println(<span class="string">"con2"</span>+con2);</span><br><span class="line">System.out.println(<span class="string">"con3"</span>+con3);</span><br><span class="line"></span><br><span class="line">con1.close();</span><br><span class="line">con2.close();</span><br><span class="line">        con3.close();</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">"-----------------------------"</span>);</span><br><span class="line">    </span><br><span class="line">        Connection con4 = dataSource.getConnection();</span><br><span class="line">Connection con5 = dataSource.getConnection();</span><br><span class="line">Connection con6 = dataSource.getConnection();</span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"con1:"</span>+con4);</span><br><span class="line">System.out.println(<span class="string">"con2"</span>+con5);</span><br><span class="line">System.out.println(<span class="string">"con3"</span>+con6);</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyDataSource:自定义数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.自定义数据源;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String driverClassName;<span class="comment">// 指定数据库连接</span></span><br><span class="line"><span class="keyword">private</span> String url;<span class="comment">// 指定数据库的url地址</span></span><br><span class="line"><span class="keyword">private</span> String userName;<span class="comment">// 数据库的账号</span></span><br><span class="line"><span class="keyword">private</span> String password;<span class="comment">// 数据库的密码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxActive;<span class="comment">// 指定最大活动数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxIdle;<span class="comment">// 设置最大保留数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> activeNow = <span class="number">0</span>;<span class="comment">// 当前活动数,默认为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义集合用来充当连接池的角色</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Connection&gt; sets = <span class="keyword">new</span> HashSet&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义set,get方法用于在代理类中获取集合的长度---连接的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;Connection&gt; sets)</span></span>&#123;</span><br><span class="line">MyDataSource.sets = sets;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Connection&gt; <span class="title">getSets</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义获取连接的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 比较当前活动数与最大活动数，</span></span><br><span class="line"><span class="keyword">if</span> (activeNow &lt; maxActive) &#123;</span><br><span class="line"><span class="comment">// 可以拿连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断连接池是否有连接，</span></span><br><span class="line"><span class="keyword">if</span> (!sets.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 连接池有连接</span></span><br><span class="line">Iterator&lt;Connection&gt; iterator = sets.iterator();</span><br><span class="line">Connection con = iterator.next();</span><br><span class="line">activeNow++; <span class="comment">// 当前活动数+1</span></span><br><span class="line">sets.remove(con);</span><br><span class="line"><span class="keyword">return</span> ConnectionProxy.bindObj(con,maxIdle);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接池没有连接，通过jdbc从数据库中拿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册驱动</span></span><br><span class="line">Class.forName(driverClassName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/booksys"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前活动数 + 1</span></span><br><span class="line">activeNow++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ConnectionProxy.bindObj(con,maxIdle);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyDataSource</span><span class="params">(String driverClassName, String url, String userName, String password, <span class="keyword">int</span> MaxActive,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> maxIdle, <span class="keyword">int</span> activeNow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.driverClassName = driverClassName;</span><br><span class="line"><span class="keyword">this</span>.url = url;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line"><span class="keyword">this</span>.maxActive = MaxActive;</span><br><span class="line"><span class="keyword">this</span>.maxIdle = maxIdle;</span><br><span class="line"><span class="keyword">this</span>.activeNow = activeNow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDriverClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverClassName</span><span class="params">(String driverClassName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.driverClassName = driverClassName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.url = url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getMaxActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maxActive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setMaxActive</span><span class="params">(<span class="keyword">int</span> maxActive)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxActive = maxActive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maxIdle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxIdle</span><span class="params">(<span class="keyword">int</span> maxIdle)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxIdle = maxIdle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getActiveNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> activeNow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setActiveNow</span><span class="params">(<span class="keyword">int</span> activeNow)</span> </span>&#123;</span><br><span class="line">MyDataSource.activeNow = activeNow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.自定义数据源;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Set&lt;Connection&gt; sets = MyDataSource.getSets();</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">bindObj</span><span class="params">(Connection t,<span class="keyword">int</span> maxIdle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (Connection)Proxy.newProxyInstance(t.getClass().getClassLoader(),t.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(method.getName().equals(<span class="string">"close"</span>)) &#123;</span><br><span class="line"><span class="comment">//获取当前活动数</span></span><br><span class="line">                 <span class="keyword">int</span> active = MyDataSource.getActiveNow();</span><br><span class="line"><span class="comment">//调用连接对象的close方法</span></span><br><span class="line"><span class="keyword">if</span>(sets.size()&lt;maxIdle) &#123;</span><br><span class="line"><span class="comment">//连接池中连接数&lt;最大保留数，回收连接</span></span><br><span class="line">active--;<span class="comment">//当前活动数-1</span></span><br><span class="line">MyDataSource.setActiveNow(active);</span><br><span class="line">sets.add(t);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">Object result = method.invoke(t, args);</span><br><span class="line">active--;<span class="comment">//当前活动数-1</span></span><br><span class="line">MyDataSource.setActiveNow(active);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//执行的是除close（）的其他方法</span></span><br><span class="line">Object result = method.invoke(t, args);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/2019/12/31/%E6%B3%9B%E5%9E%8B/"/>
      <url>/2019/12/31/%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1.泛型可以理解为在类上面贴了一个标签，作用是编译器通过标签确定类型。<br>2.所谓泛型：就是允许在定义类、接口时指定类型形参，这个类型形参将在声明变量、创建对象时确定(即传入实际的类型参数，也可称为类型实参)。 从而把原来程序运行时可能发生问题，转变为编译时的问题。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>▲在底层运行时会先执行一个“擦除”的动作。<br>▲泛型不支持继承。<br>▲泛型中声明的类型支持通配符。</p><h3 id="类型通配符使用场景"><a href="#类型通配符使用场景" class="headerlink" title="类型通配符使用场景"></a>类型通配符使用场景</h3><p>&emsp;List<String>不能被当成List<Object>对象使用，也就是说List<String>不是List<Object>的子类。 String是继承Object的,但是泛型String并不是继承泛型Object。</p><p>&emsp;假设现在需要定义一个方法，该方法里有一个集合形参，但是集合形参的元素是不确定的，那我们应该怎样定义?</p><p>&emsp;为了解决类型被限制死了不能动态根据实例来确定的缺点，引入了类型通配符(?)。为了表示各种泛型List的父类，我们需要使用类型通配符，类型通配符是一个问号(?),将一个问号作为类型实参传给List集合,写做List&lt;?&gt;(意思是未知类型元素的List)，它的元素类型可以匹配任何类型。</p><p>&emsp;通配符上限  List&lt;? extends Number&gt; 类型必须继承Number<br>&emsp;通配符下限   List&lt;? super Integer&gt; 类型必须是Integer或者Integer的父类</p><h3 id="泛型入门及泛型的“擦除”机制"><a href="#泛型入门及泛型的“擦除”机制" class="headerlink" title="泛型入门及泛型的“擦除”机制"></a>泛型入门及泛型的“擦除”机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.泛型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zx.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型入门</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   List  list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">   </span><br><span class="line">   list.add(<span class="string">"jack"</span>);</span><br><span class="line">   list.add(<span class="number">20</span>);</span><br><span class="line">   list.add(<span class="string">"123"</span>);</span><br><span class="line">   </span><br><span class="line">   User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"rose"</span>,<span class="string">"123"</span>);</span><br><span class="line">   list.add(user);</span><br><span class="line">   </span><br><span class="line">   User user2 = <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"tom"</span>,<span class="string">"123"</span>);</span><br><span class="line">   list.add(user2);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//System.out.println("集合的长度:"+list.size());</span></span><br><span class="line">      </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++) &#123;</span><br><span class="line">  Object obj = list.get(i);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">  User  u = (User)obj;</span><br><span class="line">  System.out.println(<span class="string">"name:"</span>+u.getName()+<span class="string">" pass:"</span>+u.getPassword());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//定义集合的时候声明泛型</span></span><br><span class="line">   List&lt;User&gt;   userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   userList.add(user);</span><br><span class="line">   userList.add(user2);</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;userList.size();i++) &#123;</span><br><span class="line">   User u = userList.get(i);</span><br><span class="line">   System.out.println(<span class="string">"name:"</span>+u.getName()+<span class="string">" pass:"</span>+u.getPassword());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">     System.out.println(<span class="string">"集合的长度:"</span>+userList.size());</span><br><span class="line">             </span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//泛型 存在  “擦除” 机制，程序编译完成之后，泛型会被 檫除|抹除</span></span><br><span class="line">   Class&lt;?&gt; clazz = userList.getClass();</span><br><span class="line">   <span class="comment">//获取集合的add方法</span></span><br><span class="line">   Method method = clazz.getMethod(<span class="string">"add"</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="comment">//调用方法添加数据</span></span><br><span class="line">   method.invoke(userList, <span class="string">"jack"</span>);</span><br><span class="line">   System.out.println(<span class="string">"集合的长度:"</span>+userList.size());</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(Object obj : userList) &#123;</span><br><span class="line">   System.out.println(<span class="string">"obj:"</span>+obj);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型不支持继承"><a href="#泛型不支持继承" class="headerlink" title="泛型不支持继承"></a>泛型不支持继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.泛型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zx.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型不支持继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//定义集合的时候声明泛型</span></span><br><span class="line">        List&lt;String&gt;   names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        names.add(<span class="string">"jack"</span>);</span><br><span class="line">        names.add(<span class="string">"rose"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为泛型不支持继承 ，因此如下方法调用会出现异常</span></span><br><span class="line">        <span class="comment">//play(names);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public static void play(List&lt;Object&gt; names) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型通配符讲解"><a href="#泛型通配符讲解" class="headerlink" title="泛型通配符讲解"></a>泛型通配符讲解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.泛型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型通配符讲解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  List&lt;Byd&gt;  byds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     </span><br><span class="line">  List&lt;Bmw&gt;  bmws = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">  List&lt;Dog&gt;  dogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="comment">/* play(byds);</span></span><br><span class="line"><span class="comment">  play(bmws);</span></span><br><span class="line"><span class="comment">  play(dogs);*/</span>  </span><br><span class="line">    </span><br><span class="line">  play02(byds);</span><br><span class="line">  play02(bmws);</span><br><span class="line">  <span class="comment">//因为  dogs中的数据  并没有继承  Car因为不可以作为实参来调用  play02方法</span></span><br><span class="line">  <span class="comment">//play02(dogs);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方法用于接收汽车相关信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">play</span><span class="params">(List&lt;?&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通配符上限  类型 必须属于Car的子类或者Car类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">play02</span><span class="params">(List&lt;? extends Car&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> Car car = list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"car----&gt;run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Byd</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Byd----&gt;run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"Bmw----&gt;run"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Dog----&gt;run"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.泛型.自定义泛型类;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义泛型类   泛型约束符   建议使用   E E代表Element   或者     T  T代表Type</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//定义数据用于存放集合中的元素信息</span></span><br><span class="line">   Object[]  arr = <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">   <span class="comment">//定义下标  用于记录  数据中当前添加的元素的索引位置</span></span><br><span class="line">   <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//往集合中添加数据</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   arr[index++] = e;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//从集合中获取元素</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   Object obj = arr[num];</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> (E)obj;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">   <span class="comment">//也可以在方法上声明泛型</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T  <span class="title">getObj</span><span class="params">(Object t)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> (T)t;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.泛型.自定义泛型类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MyList&lt;String&gt;   mylist = <span class="keyword">new</span> MyList&lt;&gt;();</span><br><span class="line">    mylist.add(<span class="string">"jack"</span>);</span><br><span class="line">    mylist.add(<span class="string">"rose"</span>);</span><br><span class="line">    </span><br><span class="line">    String name = mylist.get(<span class="number">0</span>);    </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理</title>
      <link href="/2019/12/30/%E4%BB%A3%E7%90%86/"/>
      <url>/2019/12/30/%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="代理类型"><a href="#代理类型" class="headerlink" title="代理类型"></a>代理类型</h3><p>&emsp;Java的代理分为静态代理和动态代理。Java的代理都是基于接口实现的。</p><pre><code>静态代理的局限性：只能代理某一类型接口的实例。不能代理任意接口任意方法的操作。动态代理灵活性很大，在任意时候任意地方都可以使用代理功能，前提是该对象有接口。</code></pre><p>&emsp;Java 动态代理机制的出现，使得 Java 开发人员不用手工编写代理类，只要简单地指定一组接口及委托类对象，便能动态地获得代理类。代理类会负责将所有的方法调用分派到委托对象上反射执行，在分派执行的过程中，开发人员还可以按需调整委托类对象及其功能，这是一套非常灵活有弹性的代理框架。</p><p>1.要了解 Java 动态代理的机制，首先需要了解以下相关的类或接口：</p><p>&emsp;java.lang.reflect.Proxy：这是 Java 动态代理机制的主类，它提供了一组静态方法来为一组接口动态地生成代理类及其对象。</p><p>重点方法:该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class[] interfaces, InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><p>java.lang.reflect.InvocationHandler：这是调用处理器接口，它自定义了一个 invoke 方法，用于集中处理在动态代理类对象上的方法调用，通常在该方法中实现对委托类的代理访问。</p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>InvocationHandler():该方法用于为指定类装载器、一组接口及调用处理器生成动态代理类实例。该方法负责集中处理动态代理类上的所有方法调用。第一个参数既是代理类实例，第二个参数是被调用的方法对象 第三个参数是调用参数。调用处理器根据这三个参数进行预处理或分派到委托类实例上发射执行。</p><h3 id="代码实现动态代理"><a href="#代码实现动态代理" class="headerlink" title="代码实现动态代理"></a>代码实现动态代理</h3><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.静态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.动态代理.DynamicMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建被代理对象</span></span><br><span class="line">StudentMapper sm = <span class="keyword">new</span> StudentMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建被代理对象</span></span><br><span class="line">UserMapper um = <span class="keyword">new</span> UserMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">DynamicMapper staticMapper = <span class="keyword">new</span> DynamicMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理对象不能转成被代理对象，接收的时候，必须用实现的接口进行接收</span></span><br><span class="line">IMapper im = (IMapper) staticMapper.bindObj(sm);</span><br><span class="line"></span><br><span class="line">String val = im.eat(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(<span class="string">"val:"</span>+val);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamicMapper类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.动态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供方法为被代理对象进行动然代理，代理完成之后 需要将别代理对象返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">bindObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"====做饭==="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调被代理 对象的业务逻辑，args:目标方法参数信息  result：目标方法返回值</span></span><br><span class="line">Object result = method.invoke(obj,args);</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"===收拾==="</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.静态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapper</span> <span class="keyword">implements</span> <span class="title">IMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">eat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"===StudentMapper===="</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"StudentMapper--eat"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IMapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.静态代理;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">eat</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解--Annotation</title>
      <link href="/2019/12/30/%E6%B3%A8%E8%A7%A3-Annotation/"/>
      <url>/2019/12/30/%E6%B3%A8%E8%A7%A3-Annotation/</url>
      
        <content type="html"><![CDATA[<p>▲所有Java类都是Object的子类。<br>▲所有Annotation都是java.lang.annotation.Annotation的子类<br>▲Annotation通常作用在package、Class、Field、Method上面。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>JDK提供了几个特殊的Annotation，称为元Annotation，只能用在Annotation上面，元Annotation就是用于修饰注解的注解。比较常用的元Annotation，比如@Target、@Retention</p><pre><code>@Target(vaule= ElementType.TYPE)@Target注解表示定义的Annotation作用在哪里。ElementType.TYPE：只能作用在class、interface、Enum上面。ElementType.Field：只能作用在Field上面ElementType.Method：只能作用在Method上面</code></pre><p><font color='red'>如果不指定@Target,那么意味着作用位置不受限制</font>    </p><pre><code>@Retention注解表示Annotation的保留策略RetentionPolicy.Class：运行时不保留，不可以通过反射读取。RetentionPolicy.RUNTIME：运行是保留，可以通过反射读取。自定义注解90%是这种。RetentionPolicy.SOURCE：丢弃。</code></pre><h3 id="自定义注解类编写的一些规则"><a href="#自定义注解类编写的一些规则" class="headerlink" title="自定义注解类编写的一些规则"></a>自定义注解类编写的一些规则</h3><ol><li>Annotation定义为@interface, 所有的Annotation会自动继承java.lang.annotation.Annotation这一接口,并且不能再去继承别的类或是接口.</li><li>参数成员只能用public或默认(default)这两个访问权修饰</li><li>参数成员只能用基本数据类型和String、Enum、Class、annotations等数据类型,以及这一些类型的数组.</li><li>要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation对象,除此之外没有别的获取注解对象的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.注解;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取注解中静态成员的值</span></span><br><span class="line">  <span class="keyword">boolean</span> f = MyOverride.flag;</span><br><span class="line">  System.out.println(<span class="string">"f:"</span>+f);</span><br><span class="line">  <span class="comment">//获取People的class类型</span></span><br><span class="line">  Class&lt;?&gt; clazz = People<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取People类上的MyOverride注解实例</span></span><br><span class="line">  MyOverride myOverride = clazz.getAnnotation(MyOverride<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  String name = myOverride.name();</span><br><span class="line">  System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">  </span><br><span class="line">  String val = myOverride.value();</span><br><span class="line">  System.out.println(<span class="string">"val:"</span>+val);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//注解作用在字段上，获取字段信息</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  Method method = clazz.getMethod(<span class="string">"getId"</span>);</span><br><span class="line">  MyOverride override = method.getAnnotation(MyOverride<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  System.out.println(<span class="string">"override.name():"</span>+override.value());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.注解;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(value=ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyOverride &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//静态   final成员变量</span></span><br><span class="line"> <span class="keyword">public</span>  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//实例成员变量</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "jack"</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "123"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zx.注解;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyOverride</span>(<span class="string">"abc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2019/12/30/%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/12/30/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>&emsp;&emsp;每一个对象运行时都有一个对应的Class对象。如果要用反射，必须先获取Class对象。</p><h3 id="Class的获取有三种方式"><a href="#Class的获取有三种方式" class="headerlink" title="Class的获取有三种方式"></a>Class的获取有三种方式</h3><p>&emsp;1. 已经有对象的情况，调用对象的getClass方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Class&lt;?&gt; clazz = user.getClass();</span><br></pre></td></tr></table></figure><p>&emsp;2.直接 类名.class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = User<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;3.不知道对象的情况，只知道对象的全限名字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(String className)</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">"org.fkjava.bean.User"</span>);</span><br></pre></td></tr></table></figure><h3 id="Class重点掌握方法"><a href="#Class重点掌握方法" class="headerlink" title="Class重点掌握方法"></a>Class重点掌握方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">"org.fkjava.bean.User"</span>); <span class="comment">//根据全限名获得Class对象</span></span><br><span class="line">Object obj = clazz.newInstance();<span class="comment">//通过Class创建实例，相当于调用无参数构造器创建实例</span></span><br></pre></td></tr></table></figure><h2 id="Field-–-Class的字段信息"><a href="#Field-–-Class的字段信息" class="headerlink" title="Field – Class的字段信息"></a>Field – Class的字段信息</h2><p>Field没有构造器，只能通过Class获取</p><h3 id="重点方法"><a href="#重点方法" class="headerlink" title="重点方法"></a>重点方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredFields()：获得所有字段(私有和非私有都可以获取)，返回字段数组。</span><br><span class="line"></span><br><span class="line">getDeclaredField(<span class="string">"字段名"</span>)：根据字段名获得字段对象(私有和非私有都可以获取)。</span><br><span class="line"></span><br><span class="line">getFields()：获得所有字段(不能获取私有字段)，返回字段数组。</span><br><span class="line"></span><br><span class="line">getField(<span class="string">"字段名"</span>)：根据字段名获得字段对象(不能获取私有字段)</span><br><span class="line"></span><br><span class="line">getName()：获得字段名。</span><br><span class="line"></span><br><span class="line">getType()：获得字段类型。</span><br><span class="line"></span><br><span class="line">set(Object obj, Object value)：给字段赋值的方法，value表示字段要赋的值，obj表示字段的对象。</span><br><span class="line"></span><br><span class="line">get(Object obj)：从字段上取值的方法。obj表示字段的对象。</span><br><span class="line"></span><br><span class="line">isAccessible()：判断是否进行安全检查，可访问返回<span class="keyword">true</span>，不可访问返回<span class="keyword">false</span>。</span><br><span class="line"></span><br><span class="line">setAccessible(<span class="keyword">true</span>)：设置是否进行安全检查，值为 <span class="keyword">true</span> 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 <span class="keyword">false</span> 则指示反射的对象应该实施 Java 语言访问检查。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect获取<span class="class"><span class="keyword">class</span>类型的常用方式</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javaApp.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建User对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象的class类型</span></span><br><span class="line">Class&lt;?&gt; clazz = user.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类中声明的所有的字段，不能获取私有的字段</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字段名字获取字段对象</span></span><br><span class="line"><span class="comment">//Field field = clazz.getField("id");</span></span><br><span class="line"><span class="comment">//System.out.println("字段名："+field.getName()+"type:"+field.getType()+"modifiers"+field.getModifiers());</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取所有的字段信息 </span></span><br><span class="line">Field[] declardFields= clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字段名字获取字段对象,可以获取私有的字段</span></span><br><span class="line">Field field2 = clazz.getDeclaredField(<span class="string">"id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取类中生命的所有的方法，不能获取私有的方法</span></span><br><span class="line">Method[] method= clazz.getMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据方法名字获取方法,不能获取私有的方法</span></span><br><span class="line">Method method2 = clazz.getMethod(<span class="string">"getId"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有的方法，可以获取私有的方法，但方法一般都不会去私有</span></span><br><span class="line">Method [] method3 = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据方法名字获取方法，可以获取私有的方法</span></span><br><span class="line">Method method4 = clazz.getDeclaredMethod(<span class="string">"setId"</span>,<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用反射技术调用user对象的setId()方法</span></span><br><span class="line">        method4.invoke(user, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用反射技术调用user对象的getId()方法</span></span><br><span class="line">        method2.invoke(user);</span><br><span class="line"> System.out.println(<span class="string">"id:"</span>+method2.invoke(user));</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当字段是public修饰时，可以用以下方法,</span></span><br><span class="line"><span class="comment"> 私有的直接这样做会发生异常，java.lang.IllegalAccessException</span></span><br><span class="line"><span class="comment"> 可以通过field.setAccessible(true) 取消安全检查解决，这样做会破坏java的封装性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//account字段是public的，</span></span><br><span class="line"> Field field3 = clazz.getField(<span class="string">"account"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//给user对象的account属性赋值</span></span><br><span class="line"> field3.set(user,<span class="string">"jack"</span>);</span><br><span class="line"> <span class="comment">//取值</span></span><br><span class="line"> field3.get(user);</span><br><span class="line"> System.out.println(<span class="string">"account:"</span>+field3.get(user));</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Method-–-Class的方法"><a href="#Method-–-Class的方法" class="headerlink" title="Method – Class的方法"></a>Method – Class的方法</h2><p>Method没有构造器，只能通过Class获取。</p><h3 id="重点方法-1"><a href="#重点方法-1" class="headerlink" title="重点方法"></a>重点方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredMethods()：获取所有方法。</span><br><span class="line"></span><br><span class="line">getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：根据方法名获取方法，name是方法名，parameterTypes是可变参数，表示方法所需要的参数。</span><br><span class="line"></span><br><span class="line">invoke(Object obj,  Object... args)：调用方法，obj表示调用方法的对象，args是可变参数，表示调用该方法需要传递的参数。</span><br><span class="line"></span><br><span class="line">getName()：获得方法名。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
          <category> java高级技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟Tomcat解析xml文件</title>
      <link href="/2019/12/28/%E6%A8%A1%E6%8B%9FTomcat%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/"/>
      <url>/2019/12/28/%E6%A8%A1%E6%8B%9FTomcat%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="模拟Tomcat解析xml文件"><a href="#模拟Tomcat解析xml文件" class="headerlink" title="模拟Tomcat解析xml文件"></a>模拟Tomcat解析xml文件</h4><p>&emsp;&emsp;思路：获取用户输入的路径，获取servlet-mapping 节点，如果用户输入的路径与servlet-mapping 下url-pattern值相同，拿到servelt-name的值,获取所以servlet节点,将拿到servelt-name的值与所以servlet节点下的值比较，相同的话，拿到此servlet下的servlet-class的值。然后可以创建实例了，之后通过反射技术就可以调用service方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过指定的映射地址执行对应的servlet的service方法</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建 Scanner对象用于获取用户输入的信息</span></span><br><span class="line"> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> System.out.println(<span class="string">"请输入访问地址:"</span>);</span><br><span class="line"> String url = scanner.next();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//通过输入流加载  book.xml</span></span><br><span class="line">   InputStream  in = <span class="keyword">new</span> FileInputStream(<span class="string">"src/myweb.xml"</span>);</span><br><span class="line">   <span class="comment">//获取文档对象模型</span></span><br><span class="line">   Document doc = <span class="keyword">new</span> SAXReader().read(in);</span><br><span class="line">   <span class="comment">//获取根节点    webapp</span></span><br><span class="line">   Element rootele = doc.getRootElement();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//获取根节点    webapp 下所有的  servlet-mapping节点</span></span><br><span class="line">   List&lt;Element&gt; eles  = rootele.elements(<span class="string">"servlet-mapping"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//获取根节点    webapp 下所有的  servlet节点</span></span><br><span class="line">   List&lt;Element&gt; servlets  = rootele.elements(<span class="string">"servlet"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Element ele : eles) &#123;</span><br><span class="line">  String text = ele.element(<span class="string">"url-pattern"</span>).getText();</span><br><span class="line">     <span class="keyword">if</span>(text.equals(url)) &#123;</span><br><span class="line">  <span class="comment">//映射地址匹配成功获取对应的servlet-name的文本值</span></span><br><span class="line">  String servletName = ele.element(<span class="string">"servlet-name"</span>).getText();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(Element sele : servlets) &#123;</span><br><span class="line">  String servletNa = sele.element(<span class="string">"servlet-name"</span>).getText();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(servletName.equals(servletNa)) &#123;</span><br><span class="line">  <span class="comment">//根据对应的servlet的名字   == 》 找到对应的class</span></span><br><span class="line">  String classInfo = sele.element(<span class="string">"servlet-class"</span>).getText();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"classInfo:"</span>+classInfo);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据类的全限名|包名.类名    获取类Class类型</span></span><br><span class="line">  Class&lt;?&gt; clazz = Class.forName(classInfo);</span><br><span class="line">    <span class="comment">//创建该类的实例</span></span><br><span class="line">  Object obj = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取service方法的 Method对象</span></span><br><span class="line">  Method method = clazz.getDeclaredMethod(<span class="string">"service"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用反射技术调用service方法</span></span><br><span class="line">  method.invoke(obj,<span class="string">"jack"</span>,<span class="string">"rose"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   System.out.println(<span class="string">"访问地址不存在： 404"</span>);</span><br><span class="line">   </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .XML文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML文件创建&amp;解析&amp;更新&amp;删除</title>
      <link href="/2019/12/28/XML%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA-%E8%A7%A3%E6%9E%90-%E6%9B%B4%E6%96%B0-%E5%88%A0%E9%99%A4/"/>
      <url>/2019/12/28/XML%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA-%E8%A7%A3%E6%9E%90-%E6%9B%B4%E6%96%B0-%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是XML？"><a href="#什么是XML？" class="headerlink" title="什么是XML？"></a>什么是XML？</h2><p>&emsp;&emsp;XML,可扩展标记语言。XML语言出现的根本目标在于如何准确有效的描述有关系的数据。Xml技术是w3c组织发布的，目前推荐遵循的是W3C组织于2000发布的XML1.0规范。W3C并非一个由官方所批准的标准组织，它的成员由IBM、Microsoft这样的公司所组成。W3C只是发布推荐标准，但是由于该组织自身的权威性往往成为事实上的标准。</p><h2 id="XML和HTML的区别"><a href="#XML和HTML的区别" class="headerlink" title="XML和HTML的区别"></a>XML和HTML的区别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTML例子</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 有开头有结尾</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">br</span>&gt;</span> 只有开头,由此可见，html标记并不是非常严谨的</span><br><span class="line">HTML是专门用来在页面显示数据的，更多的是排版工作。</span><br><span class="line"></span><br><span class="line">XML例子：</span><br><span class="line"><span class="tag">&lt;<span class="name">lcl</span>&gt;</span><span class="tag">&lt;/<span class="name">lcl</span>&gt;</span>  xml有开头必须有结尾</span><br></pre></td></tr></table></figure><h2 id="XML的作用"><a href="#XML的作用" class="headerlink" title="XML的作用"></a>XML的作用</h2><p>1.<font color='red'>数据存储</font>：可以使用XML文件存储数据。<br>2.<font color='red'>信息配置</font>：XML技术除用于保存数据之外，它还经常用作软件配置文件，在web开发中，到处可见XML配置文件，web项目web.xml，Struts2、Hibernate、Spring都使用XML做配置。<br>3.<font color='red'>数据交换</font>：通过网络交换数据的时候，XML是最佳方案，因为任何的语言的都支持XML的生成以及解析。微信支付有用到。</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"ISO-8859-1"</span>?&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don<span class="string">'t forget the meeting!&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/note&gt;</span></span><br></pre></td></tr></table></figure><p>（1）.xml的第一行一定是xml的定义，包括版本和字符编码。<br>（2）note称为根元素（节点）,一个xml必须有并且只有一个根元素。<br>（3）所有 XML 元素都须有关闭标签|结束标签    。<br>（4）标签对大小写敏感。<br>（5）必须正确地嵌套。<br>（6）<to>是note的子元素,子元素下面还可以有子元素。<br>（7）属性值须加引号。</p><h2 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h2><p>&emsp;&emsp;在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束。</p><h3 id="为什么需要XML约束？"><a href="#为什么需要XML约束？" class="headerlink" title="为什么需要XML约束？"></a>为什么需要XML约束？</h3><p>&emsp;&emsp;对于一个格式良好的XML文档，我们只能保证这个文档的格式符合XML规范，但是元素与元素的关系、元素与属性的关系，属性的取值是否正确，我们就无法得知了。如果仅仅是在有限的应用中使用，或者作为配置文件，数据的存储传输，它是能很好的满足我们的应用。但是作为和其他应用的数据交换，就有必要提供一种机制，保证XML文档结构，元素与元素之间的关系，属性的取值是否符合要求了。</p><h3 id="两种约束"><a href="#两种约束" class="headerlink" title="两种约束"></a>两种约束</h3><p>1.DTD(Document Type Definition)，全称为文档类型定义吗，功能有限，现在不用了。<br>2.<font color='red'>Schema</font>，功能强大，DTD的替代者。</p><blockquote><p>相对DTD而言，XML Schema具有如下优势：<br>1.XML Schema 基于 XML 编写，可读性更好。<br>2.支持为元素内容或属性值指定数据类型，功能更完善，更强大。<br>3.可针对未来的需求进行扩展。<br>4.XML Schema 支持命名空间。<br>5.XML Schema 是 W3C 标准。</p></blockquote><h3 id="XML解析的API-–jar包"><a href="#XML解析的API-–jar包" class="headerlink" title="XML解析的API –jar包"></a>XML解析的API –jar包</h3><p>XML解析需要包jar包<br>（1）JAXP： sun公司提供的API<br>（2）jdom: 一个解析XML的开源框架,解析XML很方便.里面大多数都是抽象类和类。<br>（3）<font color='red'>dom4j</font>: 一个解析XML的开源框架,解析XML很方便.里面大多数都是接口，比jdom更加灵活。<br>（4）JAXB解析 : Java API For XML Binding，JDK 5的时候自动的一个API，能够自动实现XML和Java对象的转换。</p><h2 id="DOM4J操作XML案例"><a href="#DOM4J操作XML案例" class="headerlink" title="DOM4J操作XML案例"></a>DOM4J操作XML案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="comment">//import org.dom4j.io.OutputFormat;</span></span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成xml文件</span></span><br><span class="line">createXml();</span><br><span class="line"><span class="comment">// 解析xml文件</span></span><br><span class="line">readXml();</span><br><span class="line"><span class="comment">// 更新节点信息</span></span><br><span class="line">update();</span><br><span class="line"><span class="comment">// 删除xml中节点信息</span></span><br><span class="line">delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成xml文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">FileOutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个空文档(Document对象)，用来封装数据</span></span><br><span class="line">Document document = DocumentHelper.createDocument();</span><br><span class="line"><span class="comment">// 创建根元素</span></span><br><span class="line">Element root_node = document.addElement(<span class="string">"books"</span>);</span><br><span class="line"><span class="comment">// 创建第一个book元素</span></span><br><span class="line">Element book_node = root_node.addElement(<span class="string">"book"</span>);</span><br><span class="line">book_node.addAttribute(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">book_node.addElement(<span class="string">"name"</span>).setText(<span class="string">"西游记"</span>);</span><br><span class="line">book_node.addElement(<span class="string">"author"</span>).setText(<span class="string">"吴承恩"</span>);</span><br><span class="line">book_node.addElement(<span class="string">"desc"</span>).setText(<span class="string">"中国古典四大名著之一"</span>);</span><br><span class="line"><span class="comment">// 第二个book元素</span></span><br><span class="line">Element book_node2 = root_node.addElement(<span class="string">"book"</span>);</span><br><span class="line"></span><br><span class="line">book_node2.addAttribute(<span class="string">"id"</span>, <span class="string">"2"</span>);<span class="comment">// 给book添加属性 key 值</span></span><br><span class="line">book_node2.addElement(<span class="string">"name"</span>).setText(<span class="string">"水浒传"</span>);</span><br><span class="line">book_node2.addElement(<span class="string">"author"</span>).setText(<span class="string">"施耐庵"</span>);</span><br><span class="line">book_node2.addElement(<span class="string">"desc"</span>).setText(<span class="string">"108条好汉"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写出到指定的位置包括文件名 ，这里仅仅是将文件生成，还没有内容</span></span><br><span class="line">os = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化对象，可以不进行格式化，那么默认使用utf-8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * OutputFormat of = OutputFormat.createPrettyPrint(); of.setEncoding("GBK");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建xml的输出对象，拿到输出流像os指向的路径写出</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(os);</span><br><span class="line"><span class="comment">// 将document中封装的内容写出</span></span><br><span class="line">writer.write(document);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析xml文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 通过输入流加载book.xml</span></span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(<span class="string">"src/book.xml"</span>);</span><br><span class="line"><span class="comment">// 获取文档对象模型</span></span><br><span class="line">Document doc = <span class="keyword">new</span> SAXReader().read(in);</span><br><span class="line"><span class="comment">// 获取根节点 books</span></span><br><span class="line">Element rootele = doc.getRootElement();</span><br><span class="line"><span class="comment">// 获取根节点下的所有子节点 book</span></span><br><span class="line">List&lt;Element&gt; books = rootele.elements();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Element ele : books) &#123;</span><br><span class="line"><span class="comment">// 获取booked节点下name节点的文本值</span></span><br><span class="line">String name = ele.element(<span class="string">"name"</span>).getText();</span><br><span class="line">System.out.println(<span class="string">"name:"</span> + name);</span><br><span class="line"><span class="comment">// 获取booke节点的id属性值</span></span><br><span class="line">String idVal = ele.attribute(<span class="string">"id"</span>).getText();</span><br><span class="line">System.out.println(<span class="string">"idVal:"</span> + idVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新xml中节点信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">OutputStream out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过输入流加载book.xml</span></span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(<span class="string">"src/book.xml"</span>);</span><br><span class="line"><span class="comment">// 获取文档对象模型</span></span><br><span class="line">Document document = <span class="keyword">new</span> SAXReader().read(in);</span><br><span class="line"><span class="comment">// 获取文档根节点</span></span><br><span class="line">Element root_node = document.getRootElement();</span><br><span class="line"><span class="comment">// 获取根节点下所有的子节点</span></span><br><span class="line">List&lt;Element&gt; book_node = root_node.elements();</span><br><span class="line"><span class="comment">// 遍历所有子节点</span></span><br><span class="line"><span class="keyword">for</span> (Element book : book_node) &#123;</span><br><span class="line"></span><br><span class="line">Attribute id = book.attribute(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(id.getValue())) &#123;</span><br><span class="line">id.setValue(<span class="string">"001"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将book节点下子节点name文本值 为西游记的改成大话西游</span></span><br><span class="line">Element name_node = book.element(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"西游记"</span>.equals(name_node.getText())) &#123;</span><br><span class="line"></span><br><span class="line">name_node.setText(<span class="string">"大话西游"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拿到输出流，写出新文件</span></span><br><span class="line">out = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化对象，可以不进行格式化，那么默认使用utf-8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * OutputFormat of = OutputFormat.createPrettyPrint(); of.setEncoding("GBK");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建xml的输出对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(out);</span><br><span class="line">writer.write(document);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除xml中节点以及属性</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定需要解析的xml文件的路劲</span></span><br><span class="line">in = <span class="keyword">new</span> FileInputStream(<span class="string">"src/bool.xml"</span>);</span><br><span class="line"><span class="comment">// 加载xml至内存</span></span><br><span class="line">Document document = <span class="keyword">new</span> SAXReader().read(in);</span><br><span class="line"><span class="comment">// 获取根节点</span></span><br><span class="line">Element root_node = document.getRootElement();</span><br><span class="line"><span class="comment">// 获取根节点下的所有子节点</span></span><br><span class="line">List&lt;Element&gt; book_node = root_node.elements();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Element book : book_node) &#123;</span><br><span class="line"><span class="comment">// 获取id属性</span></span><br><span class="line">Attribute id = book.attribute(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(id.getValue())) &#123;</span><br><span class="line"><span class="comment">// 删除id属性</span></span><br><span class="line">book.remove(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取author 元素</span></span><br><span class="line">Element author = book.element(<span class="string">"author"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"吴承恩"</span>.equals(author.getText())) &#123;</span><br><span class="line"><span class="comment">// 删除author 元素</span></span><br><span class="line">book.remove(author);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写出路径</span></span><br><span class="line">os = <span class="keyword">new</span> FileOutputStream(<span class="string">"src/book.xml"</span>);</span><br><span class="line"><span class="comment">// 格式化对象，可以不进行格式化，那么默认使用utf-8</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * OutputFormat of = OutputFormat.createPrettyPrint(); of.setEncoding("GBK");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建xml的输出对象</span></span><br><span class="line">XMLWriter writer = <span class="keyword">new</span> XMLWriter(os);</span><br><span class="line">writer.write(document);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .XML文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态&amp;抽象类&amp;接口</title>
      <link href="/2019/12/21/%E5%A4%9A%E6%80%81&amp;%E6%8A%BD%E8%B1%A1%E7%B1%BB&amp;%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/12/21/%E5%A4%9A%E6%80%81&amp;%E6%8A%BD%E8%B1%A1%E7%B1%BB&amp;%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-多态的概述及其代码体现"><a href="#1-多态的概述及其代码体现" class="headerlink" title="1.多态的概述及其代码体现"></a>1.多态的概述及其代码体现</h3><ul><li>A:多态(polymorphic)概述<ul><li>事物存在的多种形态 </li></ul></li><li>B:多态前提<ul><li>a:要有继承关系。</li><li>b:要有方法重写。</li><li>c:要有父类引用指向子类对象。</li></ul></li><li>C:案例演示<ul><li>代码体现多态</li></ul></li></ul><h3 id="2-多态中的成员访问特点之成员变量"><a href="#2-多态中的成员访问特点之成员变量" class="headerlink" title="2.多态中的成员访问特点之成员变量"></a>2.多态中的成员访问特点之成员变量</h3><ul><li>成员变量<ul><li>编译看左边(父类)，运行看左边(父类)。</li></ul></li></ul><h3 id="3-多态中的成员访问特点之成员方法"><a href="#3-多态中的成员访问特点之成员方法" class="headerlink" title="3.多态中的成员访问特点之成员方法"></a>3.多态中的成员访问特点之成员方法</h3><ul><li>成员方法<ul><li>编译看左边(父类)，运行看右边(子类)。</li></ul></li></ul><h3 id="4-多态中的成员访问特点之静态成员方法"><a href="#4-多态中的成员访问特点之静态成员方法" class="headerlink" title="4.多态中的成员访问特点之静态成员方法"></a>4.多态中的成员访问特点之静态成员方法</h3><ul><li>静态方法<ul><li>编译看左边(父类)，运行看左边(父类)。</li><li>(静态和类相关，算不上重写，所以，访问还是左边的)</li><li>只有非静态的成员方法,编译看左边,运行看右边 </li></ul></li></ul><h3 id="5-多态中向上转型和向下转型"><a href="#5-多态中向上转型和向下转型" class="headerlink" title="5.多态中向上转型和向下转型"></a>5.多态中向上转型和向下转型</h3><ul><li>A:案例演示<ul><li>详细讲解多态中向上转型和向下转型<br>Person p = new SuperMan();向上转型<br>SuperMan sm = (SuperMan)p;向下转型<h3 id="6-多态的好处和弊端"><a href="#6-多态的好处和弊端" class="headerlink" title="6.多态的好处和弊端"></a>6.多态的好处和弊端</h3></li></ul></li><li>A:多态的好处<ul><li>a:提高了代码的维护性(继承保证)</li><li>b:提高了代码的扩展性(由多态保证)</li></ul></li><li>B:案例演示<ul><li>多态的好处</li><li>可以当作形式参数,可以接收任意子类对象</li></ul></li><li>C:多态的弊端<ul><li>不能使用子类的特有属性和行为。</li></ul></li><li>D:案例演示<br>  method(Animal a)<br>  method(Cat c)</li></ul><h3 id="7-多态中的题目分析题"><a href="#7-多态中的题目分析题" class="headerlink" title="7.多态中的题目分析题"></a>7.多态中的题目分析题</h3><ul><li><p>A:看下面程序是否有问题，如果没有，说出结果</p></li><li><pre><code>class Fu {    public void show() {        System.out.println(&quot;fu show&quot;);    }}class Zi extends Fu {    public void show() {        System.out.println(&quot;zi show&quot;);    }    public void method() {        System.out.println(&quot;zi method&quot;);    }}class Test1Demo {    public static void main(String[] args) {        Fu f = new Zi();        f.method();        f.show();    }}</code></pre></li><li><p>B:看下面程序是否有问题，如果没有，说出结果</p></li><li><pre><code>class A {    public void show() {        show2();    }    public void show2() {        System.out.println(&quot;我&quot;);    }}class B extends A {    public void show2() {        System.out.println(&quot;爱&quot;);    }}class C extends B {    public void show() {        super.show();    }    public void show2() {        System.out.println(&quot;你&quot;);    }}public class Test2DuoTai {    public static void main(String[] args) {        A a = new B();        a.show();        B b = new C();        b.show();    }}</code></pre></li></ul><h3 id="8-抽象类的概述及其特点"><a href="#8-抽象类的概述及其特点" class="headerlink" title="8.抽象类的概述及其特点"></a>8.抽象类的概述及其特点</h3><ul><li>A:抽象类概述<ul><li>抽象就是看不懂的 </li></ul></li><li>B:抽象类特点<ul><li>a:抽象类和抽象方法必须用abstract关键字修饰<ul><li>abstract class 类名 {}</li><li>public abstract void eat();</li></ul></li><li>b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口</li><li>c:抽象类不能实例化那么，抽象类如何实例化呢?<ul><li>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。</li></ul></li><li>d:抽象类的子类<ul><li>要么是抽象类</li><li>要么重写抽象类中的所有抽象方法</li></ul></li></ul></li><li>C:案例演示<ul><li>抽象类特点B:抽象类特点</li><li>a:抽象类和抽象方法必须用abstract关键字修饰<ul><li>abstract class 类名 {}</li><li>public abstract void eat();</li></ul></li><li>b:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口</li><li>c:抽象类不能实例化那么，抽象类如何实例化呢?<ul><li>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态。</li></ul></li><li>d:抽象类的子类<ul><li>要么是抽象类</li><li>要么重写抽象类中的所有抽象方法</li></ul></li></ul></li></ul><h3 id="9-抽象类的成员特点"><a href="#9-抽象类的成员特点" class="headerlink" title="9.抽象类的成员特点"></a>9.抽象类的成员特点</h3><ul><li>A:抽象类的成员特点<ul><li>a:成员变量：既可以是变量，也可以是常量。abstract是否可以修饰成员变量?不能修饰成员变量</li><li>b:构造方法：有。<ul><li>用于子类访问父类数据的初始化。</li></ul></li><li>c:成员方法：既可以是抽象的，也可以是非抽象的。</li></ul></li><li>B:案例演示<ul><li>抽象类的成员特点</li></ul></li><li>C:抽象类的成员方法特性：<ul><li>a:抽象方法 强制要求子类做的事情。</li><li>b:非抽象方法 子类继承的事情，提高代码复用性。</li></ul></li></ul><h3 id="10-抽象类中的面试题"><a href="#10-抽象类中的面试题" class="headerlink" title="10.抽象类中的面试题"></a>10.抽象类中的面试题</h3><ul><li><p>A:面试题1</p><ul><li>一个抽象类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?<br>可以,这么做目的只有一个,就是不让其他类创建本类对象,交给子类完成</li></ul></li><li><p>B:面试题2</p><ul><li>abstract不能和哪些关键字共存?</li></ul></li></ul><blockquote><p>1.abstract和static：用abstract修饰的方法是抽象方法，抽象方法没有方法体。用static修饰的方法是静态方法，静态方法可以用‘类名.调用’。调用一个抽象方法是没有任何意义的。<br>2.abstract和final：抽象方法没有方法体，要求子类去重写，而用final修饰的方法不能被重写。<br>3.abstract和private：被abstract修饰的方法是为了让子类看到并强制重写，而用private修饰的方法不让子类访问。</p></blockquote><h3 id="11-接口的概述及其特点"><a href="#11-接口的概述及其特点" class="headerlink" title="11.接口的概述及其特点"></a>11.接口的概述及其特点</h3><ul><li>A:接口概述<ul><li>从狭义的角度讲就是指java中的interface</li><li>从广义的角度讲对外提供规则的都是接口 </li></ul></li><li>B:接口特点<ul><li>a:接口用关键字interface表示    <ul><li>interface 接口名 {}</li></ul></li><li>b:类实现接口用implements表示<ul><li>class 类名 implements 接口名 {}</li></ul></li><li>c:接口不能实例化<ul><li>那么，接口如何实例化呢?</li><li>按照多态的方式来实例化。</li></ul></li><li>d:接口的子类<ul><li>a:可以是抽象类。但是意义不大。</li><li>b:可以是具体类。要重写接口中的所有抽象方法。(推荐方案)</li></ul></li></ul></li></ul><h3 id="12-接口的成员特点"><a href="#12-接口的成员特点" class="headerlink" title="12.接口的成员特点"></a>12.接口的成员特点</h3><ul><li>A:接口成员特点<ul><li>成员变量；只能是常量，并且是静态的并公共的。<pre><code>* 默认修饰符：public static final* 建议：自己手动给出。</code></pre></li><li>构造方法：接口没有构造方法。</li><li>成员方法：只能是抽象方法。<pre><code>* 默认修饰符：public abstract* 建议：自己手动给出。</code></pre></li></ul></li></ul><h3 id="13-类与类-类与接口-接口与接口的关系"><a href="#13-类与类-类与接口-接口与接口的关系" class="headerlink" title="13.类与类,类与接口,接口与接口的关系"></a>13.类与类,类与接口,接口与接口的关系</h3><ul><li>A:类与类,类与接口,接口与接口的关系<ul><li>a:类与类：<ul><li>继承关系,只能单继承,可以多层继承。</li></ul></li><li>b:类与接口：<ul><li>实现关系,可以单实现,也可以多实现。</li><li>并且还可以在继承一个类的同时实现多个接口。</li></ul></li><li>c:接口与接口：<ul><li>继承关系,可以单继承,也可以多继承。</li></ul></li></ul></li></ul><h3 id="14-抽象类和接口的区别"><a href="#14-抽象类和接口的区别" class="headerlink" title="14.抽象类和接口的区别"></a>14.抽象类和接口的区别</h3><ul><li><p>A:成员区别</p><ul><li>抽象类：<ul><li>成员变量：可以变量，也可以常量</li><li>构造方法：有</li><li>成员方法：可以抽象，也可以非抽象</li></ul></li><li>接口：<ul><li>成员变量：只可以常量</li><li>成员方法：只可以抽象</li></ul></li></ul></li><li><p>B:关系区别</p><ul><li>类与类<ul><li>继承，单继承</li></ul></li><li>类与接口<ul><li>实现，单实现，多实现</li></ul></li><li>接口与接口<ul><li>继承，单继承，多继承</li></ul></li></ul></li><li><p>C:设计理念区别</p><ul><li>抽象类 被继承体现的是：”is a”的关系。抽象类中定义的是该继承体系的共性功能。</li><li>接口 被实现体现的是：”like a”的关系。接口中定义的是该继承体系的扩展功能。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础面试题</title>
      <link href="/2019/12/21/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/12/21/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<pre><code>第一题：哪句是编译失败的呢？为什么呢？ byte b1=3,b2=4,b; b=b1+b2;//出错,因为在JAVA虚拟机中默认是int类型转换，虚拟机不知道b1，b2 中的数值到底是多少，所有会抛出可能损失精度的错误;    //虚拟机会把  b1,b2  转换成 int类型在进行运算，两个int类型的数值相加结果任然是int类型，int类型 不能赋值给 byte类型b=3+4;//没有错，java虚拟机会计算出结果7然后赋值给b.第二题：byte by = 130;有没有问题?有问题如何解决?结果是多少呢?  byte 的数值范围是 -128~127  130已经超出byte取值范围 运算是会砍掉前面的 三个8位，结果会变成-126，详细计算过程看原码补码反码那篇。第三题:哪句是编译失败的呢？为什么呢？byte b = 10;//没有错，检查右边没有超过byte的范围（-128到127）b = b + 1;//出错,这句java虚拟机会把，b转换成int类型 相当于  int b + int 类型的1 然后赋值给Byte类型 int是4个字节  byte是1个字节 所有会抛出损失精度.b++;//这句java虚拟机会做一个自动转换动作  相当于  b=(byte)(b+1)所以不会报错b+=1;//同上，如果b是127， 那么加1后变成128了，成了int类型了，超过了byte类型的最大范围了，系统会强转，把int类型的 前面三个高位丢弃，丢弃后，如果剩下的一位中，最高位为1，则取反然后加1，就成了负数了，如果最高位为0，直接把值赋给b 。</code></pre><p><font color='red'>++,–,+=,-=运算，系统会做一个自动转换动作</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见的算术运算符有哪些?  <span class="comment">// + - * / % ++ -- += -= *= /= </span></span><br><span class="line">+运算符的作用有哪些?<span class="comment">// 连接符号（当字符串在前面时 必须作为连接符来使用） 算数运算符  </span></span><br><span class="line">答:正号,字符串连接符号,算术运算符</span><br><span class="line">除法和取余的区别? <span class="comment">//  / 除法是求商   % 求余数</span></span><br><span class="line">++和--的使用规则?<span class="comment">//  a++ 先赋值在运算，  ++a  先运算  再赋值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常见的关系运算符有哪些?</span><br><span class="line">答:  ==  &gt; &lt; &lt;= &gt;= !=</span><br><span class="line">关系运算符的结果有什么特点?</span><br><span class="line">答：输出的结果是<span class="keyword">boolean</span>类型, 要么为 <span class="keyword">true</span>, 要么为 <span class="keyword">false</span>.</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的值传递"><a href="#基本数据类型的值传递" class="headerlink" title="基本数据类型的值传递"></a>基本数据类型的值传递</h3><p><img src="https://i.loli.net/2019/12/21/db7GC36IAwOsVS9.png" alt="" title="基本数据类型的值传递"></p><h3 id="引用数据类型的值传递"><a href="#引用数据类型的值传递" class="headerlink" title="引用数据类型的值传递"></a>引用数据类型的值传递</h3><p><img src="https://i.loli.net/2019/12/21/9qhLmIoZ2xHWaAQ.png" alt="" title="引用数据类型的值传递"></p><h3 id="1-写一个单例模式"><a href="#1-写一个单例模式" class="headerlink" title="1.写一个单例模式"></a>1.写一个单例模式</h3><p>饿汉模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明本类一个私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个供外界访问的方法, 获取当前类的实例    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明本类一个私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个供外界访问的方法, 获取当前类的实例, </span></span><br><span class="line">    <span class="comment">//synchronized:同步锁,可以保证在同一时刻  只有一个线程进入该方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span>  Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-冒泡排序的实现"><a href="#2-冒泡排序的实现" class="headerlink" title="2.冒泡排序的实现"></a>2.冒泡排序的实现</h3><p>原理：比较两个相邻的元素，将值大的元素交换至右端。</p><p>思路：依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。重复第一趟步骤，直至全部排序完成。</p><p>第一趟比较完成后，最后一个数一定是数组中最大的一个数，所以第二趟比较的时候最后一个数不参与比较；</p><p>第二趟比较完成后，倒数第二个数也一定是数组中第二大的数，所以第三趟比较的时候最后两个数不参与比较；</p><p>依次类推，每一趟比较次数-1；</p><p>……</p><p>举例说明：要排序数组：int[] arr={6,3,8,2,9,1};   </p><p>第一趟排序：</p><p>　　　　第一次排序：6和3比较，6大于3，交换位置：  3  6  8  2  9  1</p><p>　　　　第二次排序：6和8比较，6小于8，不交换位置：3  6  8  2  9  1</p><p>　　　　第三次排序：8和2比较，8大于2，交换位置：  3  6  2  8  9  1</p><p>　　　　第四次排序：8和9比较，8小于9，不交换位置：3  6  2  8  9  1</p><p>　　　　第五次排序：9和1比较：9大于1，交换位置：  3  6  2  8  1  9</p><p>　　　　第一趟总共进行了5次比较， 排序结果：      3  6  2  8  1  9</p><hr><p>第二趟排序：</p><p>　　　　第一次排序：3和6比较，3小于6，不交换位置：3  6  2  8  1  9</p><p>　　　　第二次排序：6和2比较，6大于2，交换位置：  3  2  6  8  1  9</p><p>　　　　第三次排序：6和8比较，6大于8，不交换位置：3  2  6  8  1  9</p><p>　　　　第四次排序：8和1比较，8大于1，交换位置：  3  2  6  1  8  9</p><p>　　　　第二趟总共进行了4次比较， 排序结果：      3  2  6  1  8  9</p><hr><p>第三趟排序：</p><p>　　　　第一次排序：3和2比较，3大于2，交换位置：  2  3  6  1  8  9</p><p>　　　　第二次排序：3和6比较，3小于6，不交换位置：2  3  6  1  8  9</p><p>　　　　第三次排序：6和1比较，6大于1，交换位置：  2  3  1  6  8  9</p><p>　　　　第二趟总共进行了3次比较， 排序结果：         2  3  1  6  8  9</p><hr><p>第四趟排序：</p><p>　　　　第一次排序：2和3比较，2小于3，不交换位置：2  3  1  6  8  9</p><p>　　　　第二次排序：3和1比较，3大于1，交换位置：  2  1  3  6  8  9</p><p>　　　　第二趟总共进行了2次比较， 排序结果：        2  1  3  6  8  9</p><hr><p>第五趟排序：</p><p>　　　　第一次排序：2和1比较，2大于1，交换位置：  1  2  3  6  8  9</p><p>　　　　第二趟总共进行了1次比较， 排序结果：  1  2  3  6  8  9</p><hr><p>最终结果：1  2  3  6  8  9</p><hr><p>由此可见：N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;arr.length-i;j++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序的优点：每进行一趟排序，就会少比较一次，因为每进行一趟排序都会找出一个较大值。如上例：第一趟比较之后，排在最后的一个数一定是最大的一个数，第二趟排序的时候，只需要比较除了最后一个数以外的其他的数，同样也能找出一个最大的数排在参与第二趟比较的数后面，第三趟比较的时候，只需要比较除了最后两个数以外的其他的数，以此类推……也就是说，没进行一趟比较，每一趟少比较一次，一定程度上减少了算法的量。</p><p>用时间复杂度来说：</p><p>　　1.如果我们的数据正序，只需要走一趟即可完成排序。所需的比较次数C和记录移动次数M均达到最小值，即：Cmin=n-1;Mmin=0;所以，冒泡排序最好的时间复杂度为O(n)。</p><p>　　2.如果很不幸我们的数据是反序的，则需要进行n-1趟排序。每趟排序要进行n-i次比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：冒泡排序的最坏时间复杂度为：O(n2) 。</p><p>Cmax = n(n-1) / 2 = O(n2)  Mmax = 3n(n-1) / 2 = O(n2)<br>综上所述：冒泡排序总的平均时间复杂度为：O(n2) 。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　　　<span class="keyword">int</span>[] arr=&#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line">　　　　System.out.println(<span class="string">"排序前数组为："</span>);</span><br><span class="line">　　　　<span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line">　　　　　　System.out.print(num+<span class="string">" "</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//外层循环控制排序趟数</span></span><br><span class="line">　　　　　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;<span class="comment">//内层循环控制每一趟排序多少次</span></span><br><span class="line">　　　　　　　　<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">　　　　　　　　　　<span class="keyword">int</span> temp=arr[j];</span><br><span class="line">　　　　　　　　　　arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">　　　　　　　　　　arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125; </span><br><span class="line">　　　　System.out.println();</span><br><span class="line">　　　　System.out.println(<span class="string">"排序后的数组为："</span>);</span><br><span class="line"> 　　　　<span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line"> 　　　　　　System.out.print(num+<span class="string">" "</span>);</span><br><span class="line"> 　　　　&#125; </span><br><span class="line">　　&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-重载与重写的区别"><a href="#3-重载与重写的区别" class="headerlink" title="3.重载与重写的区别"></a>3.重载与重写的区别</h3><p>1.重载与重写都是java多态性的不同表现，重载是一个类中多态性的表现，重写是父类与子类之间多态性的体现。<br>2.重载的特点是方法名相同，形参列表不同（参数个数不同、参数类型不同、参数的多类型顺序不同），与方法的返回值类型无关。重写的特点是方法名相同，形参列表也相同，与方法的返回值类型有关。<br>3.重写 - 两同两小一大  （两同–方法名相同，形参列表也相同，两小–子类的返回值类型要么与父类相同，要么是父类返回值类型的子类、子类抛出的异常类型要么与父类相同，要么是父类抛出的异常类型的子类，一大–子类的访问权限要么比父类的访问权限大，要么相同。）</p><h3 id="4-常见的-Runtime（运行时）异常"><a href="#4-常见的-Runtime（运行时）异常" class="headerlink" title="4.常见的 Runtime（运行时）异常"></a>4.常见的 Runtime（运行时）异常</h3><p>1.ArithmaticException  算数异常<br>2.ArrayIndexOutOfBoundsException   数组下标越界异常<br>3.NullPointerException    空指针<br>4.ClassCastException   类型转换异常<br>5.IllegalArgumentException   非法参数异常<br>6.StringIndexOutOfException   字符串下标越界异常</p><h3 id="5-Error-与-Exception-的区别"><a href="#5-Error-与-Exception-的区别" class="headerlink" title="5.Error 与 Exception 的区别"></a>5.Error 与 Exception 的区别</h3><p>1.Error与Exception 都是继承自 Throwable类<br>2.Error 一般是指虚拟机相关的问题，如系统崩溃、虚拟机出错误、动态链接失败等，这种错误无法恢复或不可能捕获，将导致应用程序中断。通常应用程序无法处理这些错误，因此应用程序不应该试图使用catch块来捕获Error对象。<br>3.Exception 表示一种设计或实现问题，是可以预料的意外情况，并且应该被捕获并进行相应处理。</p><h3 id="6-抽象类和接口的区别"><a href="#6-抽象类和接口的区别" class="headerlink" title="6.抽象类和接口的区别"></a>6.抽象类和接口的区别</h3><p>abstract可以用来修饰类和方法，不能修饰成员变量。<br>1.抽象类是用abstract修饰的类，抽象类不能直接创建实例，抽象类中不一定要有抽象方法，抽象类中也可以有普通方法。但一个类中有抽象方法，那必须声明为抽象类。<br>2.抽象类中的所有抽象方法必须由具体子类进行实现，如果没有都实现，那么该子类也要声明为一个抽象类。<br>3.接口是可以说是抽象类的特例，接口中所有的方法都必须是抽象方法，接口中的定义的方法默认是用 public abstract 修饰的，接口中定义的成员变量默认是用 public static final 修饰的。<br>4.抽象类中可以有构造方法，接口中不能有构造方法。<br>5.抽象类中可以有普通的成员变量，接口中不能有普通的成员变量。<br>6.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。<br>7.抽象类中的抽象方法的访问类型可以是public，protected和默认访问权限。但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。即使你不写修饰符，默认也是public的。<br>8.抽象类中可以包含静态方法，接口中不能包含静态方法。<br>9.抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。<br>10.一个类可以只能继承一个抽象类，但可以实现多个接口。</p><h3 id="7-abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized"><a href="#7-abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized" class="headerlink" title="7.abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized?"></a>7.abstract的method是否可同时是static，是否可同时是native，是否可同时是synchronized?</h3><p>abstract的method 不可以是static的，因为抽象的方法是要被子类实现的，而static与子类扯不上关系！</p><p>native方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在着被子类实现的问题，所以，它也不能是抽象的，不能与abstract混用。</p><p>关于synchronized与abstract不能同时使用。因为synchronized修饰一个方法时，表明将会使用该方法的调用者作为同步监视器，但对于一个abstract方法而言，它所在类是一个抽象类，抽象类也无法创建实例，因此也就无法确定synchronized修饰方法时的同步监视器了，因此synchronized与abstract不能同时使用。 </p><h3 id="8-构造器-Constructor-是否可被-override-（重写）"><a href="#8-构造器-Constructor-是否可被-override-（重写）" class="headerlink" title="8.构造器 Constructor 是否可被 override （重写）"></a>8.构造器 Constructor 是否可被 override （重写）</h3><p>构造器 Constructor 不能被继承， 因此不能被重写 Override， 但可以被重载 Overload。</p><h3 id="9-String类是否可以被继承？"><a href="#9-String类是否可以被继承？" class="headerlink" title="9.String类是否可以被继承？"></a>9.String类是否可以被继承？</h3><p>String类是用final修饰的最终类，不能被继承。</p><h3 id="10-try-里有一个-return-语句，那么紧跟在这个-try-后的-finally-里的-code-会不会被执行，什么时候被执行，在-return-前还是后？"><a href="#10-try-里有一个-return-语句，那么紧跟在这个-try-后的-finally-里的-code-会不会被执行，什么时候被执行，在-return-前还是后？" class="headerlink" title="10.try {}里有一个 return 语句，那么紧跟在这个 try 后的 finally {}里的 code 会不会被执行，什么时候被执行，在 return 前还是后？"></a>10.try {}里有一个 return 语句，那么紧跟在这个 try 后的 finally {}里的 code 会不会被执行，什么时候被执行，在 return 前还是后？</h3><p>会执行，在 return 前执行。</p><h3 id="11-两个对象值相同-x-equals-y-true-，但却可以有不同的-hash-code，这句话对不对？"><a href="#11-两个对象值相同-x-equals-y-true-，但却可以有不同的-hash-code，这句话对不对？" class="headerlink" title="11.两个对象值相同(x.equals(y) == true)，但却可以有不同的 hash code，这句话对不对？"></a>11.两个对象值相同(x.equals(y) == true)，但却可以有不同的 hash code，这句话对不对？</h3><p>不对，如果两个对象x和y满足 x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：</p><pre><code>(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。</code></pre><p>首先equals方法必须满足自反性（x.equals(x)必须返回true）、对称性（x.equals(y)返回true时，y.equals(x)也必须返回true）、传递性（x.equals(y)和y.equals(z)都返回true时，x.equals(z)也必须返回true）和一致性（当x和y引用的对象信息没有被修改时，多次调用x.equals(y)应该得到同样的返回值），而且对于任何非null值的引用x，x.equals(null)必须返回false。</p><p>实现高质量的equals方法的诀窍包括：</p><ol><li><p>使用==操作符检查”参数是否为这个对象的引用”；</p></li><li><p>使用instanceof操作符检查”参数是否为正确的类型”；</p></li><li><p>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</p></li><li><p>编写完equals方法后，问自己它是否满足对称性、传递性、一致性；</p></li><li><p>重写equals时总是要重写hashCode；</p></li><li><p>不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。</p></li></ol><h3 id="12-当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"><a href="#12-当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？" class="headerlink" title="12.当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"></a>12.当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</h3><p>值传递，java中只有值传递参数，但一个对象实例作为一个参数被传递到方法中时，参数值就是该对象的引用，对象的内容可以在方法中被改变，但对象的引用是永远不会改变的。</p><h3 id="13-swtich-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上"><a href="#13-swtich-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上" class="headerlink" title="13.swtich 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上"></a>13.swtich 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上</h3><p>switch支持int和枚举类型，可以用char,byte,short,int类型，jdk1.7中支持string类型，但是不支持long类型。</p><h3 id="14-ArrayList-和-Vector-的区别-HashMap-和-Hashtable-的区别"><a href="#14-ArrayList-和-Vector-的区别-HashMap-和-Hashtable-的区别" class="headerlink" title="14.ArrayList 和 Vector 的区别, HashMap 和 Hashtable 的区别"></a>14.ArrayList 和 Vector 的区别, HashMap 和 Hashtable 的区别</h3><p>ArrayList 和 Vector<br> 1.ArrayList和 Vector 都继承了 List 接口，它们都是有序、元素可重复的集合。<br> 2.Vector 是线程安全的，性能比较差，ArrayList 是线程不安全的，性能较好。</p><p>即使我们要在多线程环境下使用List集合，也应该选择ArrayList，而不是Vector，因为Java还提供了一个Collections工具类，它可以把ArrayList包装成线程安全的集合类。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList());</span><br></pre></td></tr></table></figure><p>HashMap与Hashtable的区别主要有如下两点：<br>  1.HashMap允许使用null作为key或value，而Hashtable不允许。<br>  2.HashMap是线程不安全的，因此性能较好；但Hashtable是线程安全的，因此性能较差。</p><p>实际上，实际在多线程环境下，Java提供了Collections工具类把HashMap包装成线程安全的类，因此依然应该使用HashMap，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map map = Collections. synchronizedMap(<span class="keyword">new</span> HashMap());</span><br></pre></td></tr></table></figure><h3 id="15-GC-是什么-为什么要有-GC"><a href="#15-GC-是什么-为什么要有-GC" class="headerlink" title="15.GC 是什么? 为什么要有 GC"></a>15.GC 是什么? 为什么要有 GC</h3><p>  GC 是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。</p><h3 id="16-float-型-float-f-3-4-是否正确"><a href="#16-float-型-float-f-3-4-是否正确" class="headerlink" title="16.float 型 float f=3.4 是否正确?"></a>16.float 型 float f=3.4 是否正确?</h3><p>不对，小数后没有加 f 或 F ，默认是 double 类型的数据。double 转 float ,发生强制类型转换，应写成 float f = (float) 3.4 </p><h3 id="17-String-与-StringBuffer-的区别。"><a href="#17-String-与-StringBuffer-的区别。" class="headerlink" title="17.String 与 StringBuffer 的区别。"></a>17.String 与 StringBuffer 的区别。</h3><p>String 的长度是不可变的， StringBuffer 的长度是可变的。如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用 StringBuffer，如果最后需要 String，那么使用 StringBuffer 的 toString()方法。</p><h3 id="18-运行时异常与一般异常有何异同"><a href="#18-运行时异常与一般异常有何异同" class="headerlink" title="18.运行时异常与一般异常有何异同?"></a>18.运行时异常与一般异常有何异同?</h3><p>异常表示程序运行过程中可能出现的非正常状态， 运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。 java 编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p><h3 id="19-说出-ArrayList-Vector-LinkedList-的存储性能和特性"><a href="#19-说出-ArrayList-Vector-LinkedList-的存储性能和特性" class="headerlink" title="19.说出 ArrayList,Vector, LinkedList 的存储性能和特性"></a>19.说出 ArrayList,Vector, LinkedList 的存储性能和特性</h3><p>  ArrayList 和 Vector 都是使用数组方式存储数据， 此数组元素数大于实际存储的数据以便增加和插入元素， 它们都允许直接按序号索引元素， 但是插入元素要涉及数组元素移动等内存操作， 所以索引数据快而插入数据慢， Vector 由于使用了 synchronized 方法（线程安全），通常性能上较 ArrayList 差， 而LinkedList 使用双向链表实现存储， 按序号索引数据需要进行前向或后向遍历， 但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p><h3 id="20-什么是Java序列化，如何实现Java序列化？或者请解释Serializable接口的作用。"><a href="#20-什么是Java序列化，如何实现Java序列化？或者请解释Serializable接口的作用。" class="headerlink" title="20.什么是Java序列化，如何实现Java序列化？或者请解释Serializable接口的作用。"></a>20.什么是Java序列化，如何实现Java序列化？或者请解释Serializable接口的作用。</h3><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对 对象流进行读写操作时所引发的问题。</p><p>序列化的实现： 将需要被序列化的类实现 Serializable 接口，该接口没有需要实现的方法， implements Serializable 只是为了标注该对象是可被序列化的， 然后使用一个输出流(如：FileOutputStream)来构造一个 ObjectOutputStream(对象流)对象， 接着， 使用 ObjectOutputStream 对象的 writeObject(Object obj)方法就可以将参数为 obj 的对象写出(即保存其状态)，要恢复的话则用输入流。</p><p>序列化对于Java开发非常重要，例如在web开发中，如果对象需要保存在了Session中，Tomcat在某些时候需要把Session中的对象序列化到硬盘，因此放入Session中的对象必须是可序列化的，要么实现Serializable接口，要么实现Externalizable接口。还有，如果一个对象要经过网络传输（比如RMI远程方法调用的形参或返回值），这个对象也应该是可序列化的。</p><h3 id="21-多线程有几种实现方法-都是什么-同步有几种实现方法-都是什么"><a href="#21-多线程有几种实现方法-都是什么-同步有几种实现方法-都是什么" class="headerlink" title="21.多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么?"></a>21.多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么?</h3><p>多线程有四种实现方法：<br>1.继承 Thread 类，重写 run 方法，创建该线程类的实例，并调用 start()方法来启动多线程。<br>2.实现 Runnable 类，重写 run 方法，创建该线程类的实例，并将该实例作为 target 来创建 Thread 的实例，然后调用Thread对象的 start()方法来启动多线程。<br>3.实现Callable接口，重写 run 方法，创建该线程类的实例，并将该实例作为 target 来创建 FutureTask的实例，并将该实例作为 target 来创建 Thread 的实例，然后调用Thread对象的 start()方法来启动多线程。</p><p>同步有三种实现方法：<br>1.使用synchronized关键字修饰类或者代码块； （synchronized 保证原子性、可见性和有序性）<br>2.使用Volatile关键字修饰变量；  （volatile 保证原子性，不保证有序性）<br>3.在类中加入重入锁。     （保证原子性、可见性和有序性）</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.使用<span class="keyword">synchronized</span>关键字</span><br><span class="line"><span class="comment">//保证原子性和有序性</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Increase</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increasementAndPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用<span class="keyword">volatile</span></span><br><span class="line"><span class="comment">//保证原子性，不保证有序性</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Increase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increasementAndPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.使用重入锁</span><br><span class="line"><span class="comment">//保证原子性和有序性</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Increase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increasementAndPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        System.out.println(i++);</span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-xml有哪些解析技术？每种技术的特点什么？"><a href="#22-xml有哪些解析技术？每种技术的特点什么？" class="headerlink" title="22.xml有哪些解析技术？每种技术的特点什么？"></a>22.xml有哪些解析技术？每种技术的特点什么？</h3><p>DOM、SAX、STAX</p><p>DOM : 文档全部载入后再解析，适合对XML的随机访问。<br>SAX : 边读边解析，适合对XML的顺序访问。</p><h3 id="打印昨天的当前时刻？"><a href="#打印昨天的当前时刻？" class="headerlink" title="打印昨天的当前时刻？"></a>打印昨天的当前时刻？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Java编程,打印昨天的当前时刻</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  Calendar cal = Calendar.getInstance();</span><br><span class="line">  cal.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line">  Date date = cal.getTime();</span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">  String str = sdf.format(date);</span><br><span class="line">  System.out.println(str);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-子类和父类的加载顺序"><a href="#23-子类和父类的加载顺序" class="headerlink" title="23.子类和父类的加载顺序"></a>23.子类和父类的加载顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"B"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ars)</span></span>&#123;</span><br><span class="line">      A ab = <span class="keyword">new</span> B(); <span class="comment">//执行到此处,结果: （ 12AB ）</span></span><br><span class="line">      System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">      ab = <span class="keyword">new</span> B(); <span class="comment">//执行到此处,结果: （  AB  ）</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象时调用顺序如下：</p><p>①先初始化父类和子类的静态成员。</p><p>②父类非静态成员。</p><p>③父类构造方法。</p><p>④子类非静态成员。</p><p>⑤子类构造方法。</p><p>另外需要注意的是，加static的语句块在加载类时就加载初始化了；不加static的语句块即初始化块，是在创建类的对象的时候才加载，在调用构造方法之前要先调用初始化块。</p><h3 id="24-Oracle语法-每页记录10条-表：CREATE-TABLE-temp-1-ID-INT-NAME-VARCHAR2-100"><a href="#24-Oracle语法-每页记录10条-表：CREATE-TABLE-temp-1-ID-INT-NAME-VARCHAR2-100" class="headerlink" title="24.Oracle语法,每页记录10条 表：CREATE TABLE temp_1(ID INT,NAME VARCHAR2(100))"></a>24.Oracle语法,每页记录10条 表：CREATE TABLE temp_1(ID INT,NAME VARCHAR2(100))</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT rowNumId,ID,<span class="function">NAME <span class="title">from</span>  <span class="params">(SELECT ROWNUM as rowId,ID,NAME from temp_1)</span> t</span></span><br><span class="line"><span class="function">Where rowNumId between 1 and 10</span>;</span><br></pre></td></tr></table></figure><h3 id="25-SQL语句中IN与EXISTS的区别"><a href="#25-SQL语句中IN与EXISTS的区别" class="headerlink" title="25.SQL语句中IN与EXISTS的区别?"></a>25.SQL语句中IN与EXISTS的区别?</h3><p>1、适用表的类型不同。<br> in是子查询为驱动表，外面的表为被驱动表，故适用于子查询结果集小而外面的表结果集大的情况。<br> exists是外面的表为驱动表，子查询里面的表为被驱动表，故适用于外面的表结果集小而子查询结果集大的情况。<br>2、子查询关联不同。<br> exists一般都是关联子查询。对于关联子查询，必须先执行外层查询，接着对所有通过过滤条件的记录，执行内层查询。外层查询和内层查询相互依赖，因为外层查询会把数据传递给内层查询。<br> in则一般都是非关联子查询，非关联子查询则必须先完成内层查询之后，外层查询才能介入。<br>3、执行次数不同。<br> IN 语句：只执行一次，确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。<br> EXISTS语句：执行次数根据表的长度而定。指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。</p><h3 id="26-一个文件中的数据要在控制台上显示，首先需要（-）。"><a href="#26-一个文件中的数据要在控制台上显示，首先需要（-）。" class="headerlink" title="26.一个文件中的数据要在控制台上显示，首先需要（ ）。"></a>26.一个文件中的数据要在控制台上显示，首先需要（ ）。</h3><p>A.System.out.print (buffer[i]);<br>B.FileOutputStream fout = new FileOutputStream(this.filename);<br>C.FileInputStream fin = new FileInputStream(this.filename);<br>D.System.in.read(buffer);</p><pre><code>答案：C 一个文件中的数据要在控制台显示，首先需要获取文件中的内容，使用FileInputStream fin = new FileInputStream(this.filename);</code></pre><h3 id="27-执行语句“int-a-‘2’-”后，a的值是（-）"><a href="#27-执行语句“int-a-‘2’-”后，a的值是（-）" class="headerlink" title="27.执行语句“int a= ‘2’ ”后，a的值是（ ）"></a>27.执行语句“int a= ‘2’ ”后，a的值是（ ）</h3><pre><code>50，一个简便的记忆法：0：48  A:65  a:97，数字连起来是486597 -&gt; 486 597 -&gt; 486 (486 + 111)</code></pre><h3 id="28-以下是java-concurrent包下的4个类，选出差别最大的一个"><a href="#28-以下是java-concurrent包下的4个类，选出差别最大的一个" class="headerlink" title="28.以下是java concurrent包下的4个类，选出差别最大的一个()"></a>28.以下是java concurrent包下的4个类，选出差别最大的一个()</h3><p>A.Semaphore<br>B.ReentrantLock<br>C.Future<br>D.CountDownLatch   </p><pre><code>答案：CA、Semaphore：类，控制某个资源可被同时访问的个数;B、ReentrantLock：类，具有与使用synchronized方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大；C、Future：接口，表示异步计算的结果；D、CountDownLatch： 类，可以用来在一个线程中等待多个线程完成任务的类。</code></pre><h3 id="29-如果一个list初始化为-5，3，1-，执行以下代码后，其结果为（）？"><a href="#29-如果一个list初始化为-5，3，1-，执行以下代码后，其结果为（）？" class="headerlink" title="29.如果一个list初始化为{5，3，1}，执行以下代码后，其结果为（）？"></a>29.如果一个list初始化为{5，3，1}，执行以下代码后，其结果为（）？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums.add(<span class="number">6</span>);</span><br><span class="line">nums.add(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">nums.remove(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>解析：<br>初始化为{5,3,1}<br>nums.add(6)后list为{5,3,1,6}<br>nums.add(0,4)是在0号索引上添加数字4得到list为{4,5,3,1,6}<br>nums.remove(1)是将1号索引上的5进行remove得到list为{4,3,1,6}</p><h3 id="30-given-the-following-code-what-will-be-the-output"><a href="#30-given-the-following-code-what-will-be-the-output" class="headerlink" title="30.given the following code,what will be the output?"></a>30.given the following code,what will be the output?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i=<span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span></span>&#123;</span><br><span class="line">        Test t=<span class="keyword">new</span> Test( );</span><br><span class="line">        t.first( );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">5</span>;</span><br><span class="line">    Value v=<span class="keyword">new</span> Value( );</span><br><span class="line">    v.i=<span class="number">25</span>;</span><br><span class="line">    second(v,i);</span><br><span class="line">    System.out.println(v.i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    v.i = <span class="number">20</span>;</span><br><span class="line">    Value val = <span class="keyword">new</span> Value( );</span><br><span class="line">    v = val;</span><br><span class="line">    System.out.println(v.i+<span class="string">" "</span>+i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>答案：15 0 20 ，考察的是值传递与引用传递，Java中原始数据类型都是值传递，传递的是值得副本，形参的改变不会影响实际参数的值， 引用传递传递的是引用类型数据，包括String,数组，列表, map,类对象等类型，形参与实参指向的是同一内存地址，因此形参改变会影响实参的值。可能有人会选择B，包括我刚开始也是。总以为v不是已经指向了val了吗？？为什么还是20呢？不应该是15吗？其实，原因很简单。现在我们把second（）换一下public void second(Value tmp,int i){    i = 0;    tmp.i = 20;    Value val = newValue( );    tmp = val;    System.out.println(tmp.i+&quot; &quot;+i);}这个tmp其实相当于是一个指向原来first中的V这个对象的指针，也就是对v对象的引用而已。但是引用是会改变所指的地址的值的。所以在second中当tmp.i= 20的时候，就把原来first中的v的i值改为20了。接下来，又把tmp指向了新建的一个对象，所以在second中的tmp现在指的是新的对象val，i值为15.当执行完毕second后，在first中在此输出v.i的时候，应为前面second中已经把该位置的i的值改为了20，所以输出的是20.至于疑惑v指向了val，其实只是名字的问题，在second中的v实践也是另外的一个变量，名字相同了而已，这个估计也是纠结的重点。</code></pre><h3 id="30-下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换："><a href="#30-下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换：" class="headerlink" title="30.下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换："></a>30.下面哪段程序能够正确的实现了GBK编码字节流到UTF-8编码字节流的转换：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] src,dst;</span><br></pre></td></tr></table></figure><p>A.dst=String.fromBytes(src，”GBK”).getBytes(“UTF-8”)<br>B.dst=new String(src，”GBK”).getBytes(“UTF-8”)<br>C.dst=new String(“GBK”，src).getBytes()<br>D.dst=String.encode(String.decode(src，”GBK”))，”UTF-8” )  </p><p><font color='red'>正确答案: B ,先解码再编码,用new String(src，”GBK”)解码得到字符串,再用getBytes(“UTF-8”)得到UTF8编码字节数组</font></p><h3 id="31-以下代码的输出结果是？"><a href="#31-以下代码的输出结果是？" class="headerlink" title="31.以下代码的输出结果是？"></a>31.以下代码的输出结果是？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> B t1 = <span class="keyword">new</span> B();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> B t2 = <span class="keyword">new</span> B();</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"构造块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        B t = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>正确答案: C   你的答案: A (错误)    </code></pre><p>类加载时，<font color='red'>并不是静态块最先初始化,而是静态域，而静态域中包含静态变量、静态块和静态方法,其中需要初始化的是静态变量和静态块.而他们两个的初始化顺序是靠他们俩的位置决定的!</font><br>开始时JVM加载B.class，对所有的静态成员进行声明，t1 t2被初始化为默认值，为null，又因为t1 t2需要被显式初始化，所以对t1进行显式初始化，初始化代码块→构造函数（没有就是调用默认的构造函数），咦！静态代码块咋不初始化？因为在开始时已经对static部分进行了初始化，虽然只对static变量进行了初始化，但在初始化t1时也不会再执行static块了，因为JVM认为这是第二次加载类B了，所以static会在t1初始化时被忽略掉，所以直接初始化非static部分，也就是构造块部分（输出’’构造块’’）接着构造函数（无输出）。接着对t2进行初始化过程同t1相同（输出’构造块’），此时就对所有的static变量都完成了初始化，接着就执行static块部分（输出’静态块’），接着执行，main方法，同样也，new了对象，调用构造函数输出（’构造块’）<br>总结：程序入口main方法要执行首先要加载类B 2.静态域：分为静态变量，静态方法，静态块。这里面涉及到的是静态变量和静态块，当执行到静态域时，按照静态域的顺序加载。并且静态域只在类的第一次加载时执行 3.每次new对象时，会执行一次构造块和构造方法，构造块总是在构造方法前执行（当然，第一次new时，会先执行静态域，静态域〉构造块〉构造方法） 注意：加载类时并不会调用构造块和构造方法，只有静态域会执行 4.根据前三点，首先加载类B，执行静态域的第一个静态变量，static b1=new B，输出构造块和构造方法（空）。ps:这里为什么不加载静态方法呢？因为执行了静态变量的初始化，意味着已经加载了B的静态域的一部分，这时候不能再加载另一个静态域了，否则属于重复加载 了（静态域必须当成一个整体来看待。否则加载会错乱） 于是，依次static b2 =new B，输出构造块，再执行静态块，完成对整个静态域的加载，再执行main方法，new b，输出构造块。</p><h3 id="32-以下哪一个正则表达式不能与字符串“https-www-tensorflow-org-”（不含引号）匹配？（）"><a href="#32-以下哪一个正则表达式不能与字符串“https-www-tensorflow-org-”（不含引号）匹配？（）" class="headerlink" title="32.以下哪一个正则表达式不能与字符串“https://www.tensorflow.org/”（不含引号）匹配？（）"></a>32.以下哪一个正则表达式不能与字符串“<a href="https://www.tensorflow.org/”（不含引号）匹配？（）" target="_blank" rel="noopener">https://www.tensorflow.org/”（不含引号）匹配？（）</a></h3><p>A.[a-z]+://[a-z.]+/<br>B.https[://]www[.]tensorflow[.]org[/]<br>C.[htps]+://<a href="http://www.tensorflow.org/" target="_blank" rel="noopener">www.tensorflow.org/</a><br>D.[a-zA-Z.:/]+</p><pre><code>正确答案: B   你的答案: D (错误)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[:<span class="comment">//]</span></span><br></pre></td></tr></table></figure><p>这是个很明显的陷阱<br>[ ] 里面是不重复的，所以等价于[:/]<br>如果[ ]后面没有带+号的话，是不会贪婪匹配的，就只能匹配到:/中的其中一个 </p><h3 id="33-java8中，忽略内部接口的情况，不能用来修饰interface里的方法的有（-）"><a href="#33-java8中，忽略内部接口的情况，不能用来修饰interface里的方法的有（-）" class="headerlink" title="33.java8中，忽略内部接口的情况，不能用来修饰interface里的方法的有（ ）"></a>33.java8中，忽略内部接口的情况，不能用来修饰interface里的方法的有（ ）</h3><p>A.private<br>B.public<br>C.protected<br>D.static</p><pre><code>正确答案: A C   你的答案: A (错误)</code></pre><h3 id="33-有关finally语句块说法正确的是（-）"><a href="#33-有关finally语句块说法正确的是（-）" class="headerlink" title="33.有关finally语句块说法正确的是（ ）"></a>33.有关finally语句块说法正确的是（ ）</h3><p>A.不管catch是否捕获异常，finally语句块都是要被执行的<br>B.在try语句块或catch语句块中执行到System.exit(0)直接退出程序<br>C.finally块中的return语句会覆盖try块中的return返回<br>D.finally 语句块在 catch语句块中的return语句之前执行</p><pre><code>正确答案: A B C   你的答案: A (错误)</code></pre><p>A：选项存在疑问，一般情况下不管try{}catch(){}语句块如何结束，finally保证其所包含的语句块最终被执行，但是存在特殊情况：1.try语句没有被执行到，如在try语句之前就返回了；2.在try块中有System.exit(0)），此时finally中的语句块是不会执行的；<br>B：System.exit(0)。表示将整个虚拟机里的内容都释放，JVM停止工作，此时程序正常退出；<br>C和D： finally块中的内容会先于try中的return语句执行，如果finall语句块中也有return语句的话，那么直接从finally中返回了，但是不建议在finally中return。</p>]]></content>
      
      
      <categories>
          
          <category> java基础面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块&amp;继承&amp;方法重写</title>
      <link href="/2019/12/21/%E4%BB%A3%E7%A0%81%E5%9D%97&amp;%E7%BB%A7%E6%89%BF&amp;%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/"/>
      <url>/2019/12/21/%E4%BB%A3%E7%A0%81%E5%9D%97&amp;%E7%BB%A7%E6%89%BF&amp;%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="1-代码块的概述和分类-了解-面试的时候会问-开发不用或者很少用"><a href="#1-代码块的概述和分类-了解-面试的时候会问-开发不用或者很少用" class="headerlink" title="1.代码块的概述和分类(了解)(面试的时候会问,开发不用或者很少用)"></a>1.代码块的概述和分类(了解)(面试的时候会问,开发不用或者很少用)</h3><ul><li>A:代码块概述<ul><li>在Java中，使用{}括起来的代码被称为代码块。</li></ul></li><li>B:代码块分类<ul><li>根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程讲解)。</li></ul></li><li>C:常见代码块的应用<ul><li>a:局部代码块 <ul><li>在方法中出现；限定变量生命周期，及早释放，提高内存利用率</li></ul></li><li>b:构造代码块 (初始化块)<ul><li>在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li></ul></li><li>c:静态代码块 <ul><li>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</li><li>一般用于加载驱动</li></ul></li></ul></li></ul><h3 id="2-代码块的面试题-掌握"><a href="#2-代码块的面试题-掌握" class="headerlink" title="2.代码块的面试题(掌握)"></a>2.代码块的面试题(掌握)</h3><ul><li><p>A:看程序写结果</p></li><li><pre><code>class Student {    static {        System.out.println(&quot;Student 静态代码块&quot;);    }    {        System.out.println(&quot;Student 构造代码块&quot;);    }    public Student() {        System.out.println(&quot;Student 构造方法&quot;);    }}class Demo2_Student {    static {        System.out.println(&quot;Demo2_Student静态代码块&quot;);    }    public static void main(String[] args) {        System.out.println(&quot;我是main方法&quot;);        Student s1 = new Student();        Student s2 = new Student();    }}</code></pre></li></ul><h3 id="3-面向对象-继承案例演示-掌握"><a href="#3-面向对象-继承案例演示-掌握" class="headerlink" title="3.面向对象(继承案例演示)(掌握)"></a>3.面向对象(继承案例演示)(掌握)</h3><ul><li>A:继承(extends)<ul><li>让类与类之间产生关系,子父类关系 </li></ul></li><li>B:继承案例演示：<ul><li>动物类,猫类,狗类</li><li>定义两个属性(颜色,腿的个数)两个功能(吃饭，睡觉)</li></ul></li><li>C:案例演示<ul><li>使用继承前</li></ul></li><li>D:案例演示<ul><li>使用继承后</li></ul></li></ul><h3 id="4-面向对象-继承的好处和弊端-掌握"><a href="#4-面向对象-继承的好处和弊端-掌握" class="headerlink" title="4.面向对象(继承的好处和弊端)(掌握)"></a>4.面向对象(继承的好处和弊端)(掌握)</h3><ul><li><p>A:继承的好处</p><ul><li>a:提高了代码的复用性</li><li>b:提高了代码的维护性</li><li>c:让类与类之间产生了关系，是多态的前提</li></ul></li><li><p>B:继承的弊端</p><ul><li><p>类的耦合性增强了。</p></li><li><p>开发的原则：高内聚，低耦合。</p></li><li><p>耦合：类与类的关系</p></li><li><p>内聚：就是自己完成某件事情的能力</p></li></ul></li></ul><h3 id="5-面向对象-Java中类的继承特点-掌握"><a href="#5-面向对象-Java中类的继承特点-掌握" class="headerlink" title="5.面向对象(Java中类的继承特点)(掌握)"></a>5.面向对象(Java中类的继承特点)(掌握)</h3><ul><li>A:Java中类的继承特点<ul><li>a:Java只支持单继承，不支持多继承。(一个儿子只能有一个爹)<ul><li>有些语言是支持多继承，格式：extends 类1,类2,…</li></ul></li><li>b:Java支持多层继承(继承体系)</li></ul></li><li>B:案例演示<ul><li>Java中类的继承特点<ul><li>如果想用这个体系的所有功能用最底层的类创建对象</li><li>如果想看这个体系的共性功能,看最顶层的类 </li></ul></li></ul></li></ul><h3 id="6-面向对象-继承的注意事项和什么时候使用继承-掌握"><a href="#6-面向对象-继承的注意事项和什么时候使用继承-掌握" class="headerlink" title="6.面向对象(继承的注意事项和什么时候使用继承)(掌握)"></a>6.面向对象(继承的注意事项和什么时候使用继承)(掌握)</h3><ul><li><p>A:继承的注意事项</p><ul><li>a:子类只能继承父类所有非私有的成员(成员方法和成员变量)</li><li>b:子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。</li><li>c:不要为了部分功能而去继承</li><li>项目经理 姓名 工号 工资 奖金</li><li>程序员    姓名 工号 工资</li></ul></li><li><p>B:什么时候使用继承</p><ul><li><p>继承其实体现的是一种关系：”is a”。<br>  Person</p><pre><code>StudentTeacher</code></pre><p>  水果</p><pre><code>苹果香蕉橘子</code></pre><p>采用假设法。<br>  如果有两个类A,B。只有他们符合A是B的一种，或者B是A的一种，就可以考虑使用继承。</p></li></ul></li></ul><h3 id="7-面向对象-继承中成员变量的关系-掌握"><a href="#7-面向对象-继承中成员变量的关系-掌握" class="headerlink" title="7.面向对象(继承中成员变量的关系)(掌握)"></a>7.面向对象(继承中成员变量的关系)(掌握)</h3><ul><li>A:案例演示<ul><li>a:不同名的变量</li><li>b:同名的变量</li></ul></li></ul><h3 id="8-面向对象-this和super的区别和应用-掌握"><a href="#8-面向对象-this和super的区别和应用-掌握" class="headerlink" title="8.面向对象(this和super的区别和应用)(掌握)"></a>8.面向对象(this和super的区别和应用)(掌握)</h3><ul><li>A:this和super都代表什么<ul><li>this:代表当前对象的引用,谁来调用我,我就代表谁</li><li>super:代表当前对象父类的引用</li></ul></li><li>B:this和super的使用区别<ul><li>a:调用成员变量<ul><li>this.成员变量 调用本类的成员变量,也可以调用父类的成员变量</li><li>super.成员变量 调用父类的成员变量</li></ul></li><li>b:调用构造方法<ul><li>this(…)    调用本类的构造方法</li><li>super(…)    调用父类的构造方法</li></ul></li><li>c:调用成员方法<ul><li>this.成员方法 调用本类的成员方法,也可以调用父类的方法</li><li>super.成员方法 调用父类的成员方法</li></ul></li></ul></li></ul><h3 id="9-面向对象-继承中构造方法的关系-掌握"><a href="#9-面向对象-继承中构造方法的关系-掌握" class="headerlink" title="9.面向对象(继承中构造方法的关系)(掌握)"></a>9.面向对象(继承中构造方法的关系)(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>子类中所有的构造方法默认都会访问父类中空参数的构造方法</li></ul></li><li><p>B:为什么呢?</p><ul><li><p>因为子类会继承父类中的数据，可能还会使用父类的数据。</p></li><li><p>所以，子类初始化之前，一定要先完成父类数据的初始化。</p></li><li><p>其实：</p><ul><li>每一个构造方法的第一条语句默认都是：super() Object类最顶层的父类。</li></ul></li></ul></li></ul><h3 id="10-面向对象-继承中构造方法的注意事项-掌握"><a href="#10-面向对象-继承中构造方法的注意事项-掌握" class="headerlink" title="10.面向对象(继承中构造方法的注意事项)(掌握)"></a>10.面向对象(继承中构造方法的注意事项)(掌握)</h3><ul><li>A:案例演示<ul><li>父类没有无参构造方法,子类怎么办?</li><li>super解决</li><li>this解决</li></ul></li><li>B:注意事项<ul><li>super(…)或者this(….)必须出现在构造方法的第一条语句上</li></ul></li></ul><h3 id="11-面向对象-继承中的面试题-掌握"><a href="#11-面向对象-继承中的面试题-掌握" class="headerlink" title="11.面向对象(继承中的面试题)(掌握)"></a>11.面向对象(继承中的面试题)(掌握)</h3><ul><li><p>A:案例演示</p></li><li><p>看程序写结果1<br>class Fu{<br>  public int num = 10;<br>  public Fu(){</p><pre><code>System.out.println(&quot;fu&quot;);</code></pre><p>  }<br>}<br>class Zi extends Fu{<br>  public int num = 20;<br>  public Zi(){</p><pre><code>System.out.println(&quot;zi&quot;);</code></pre><p>  }<br>  public void show(){</p><pre><code>int num = 30;System.out.println(num);System.out.println(this.num);System.out.println(super.num);</code></pre><p>  }<br>}<br>class Test1_Extends {<br>  public static void main(String[] args) {</p><pre><code>Zi z = new Zi();z.show();</code></pre><p>  }<br>}</p><p>看程序写结果2<br>class Fu {<br>  static {</p><pre><code>System.out.println(&quot;静态代码块Fu&quot;);</code></pre><p>  }</p><p>  {</p><pre><code>System.out.println(&quot;构造代码块Fu&quot;);</code></pre><p>  }</p><p>  public Fu() {</p><pre><code>System.out.println(&quot;构造方法Fu&quot;);</code></pre><p>  }<br>}</p><p>class Zi extends Fu {<br>  static {</p><pre><code>System.out.println(&quot;静态代码块Zi&quot;);</code></pre><p>  }</p><p>  {</p><pre><code>System.out.println(&quot;构造代码块Zi&quot;);</code></pre><p>  }</p><p>  public Zi() {</p><pre><code>System.out.println(&quot;构造方法Zi&quot;);</code></pre><p>  }<br>}</p><p>Zi z = new Zi(); 请执行结果。</p></li></ul><h3 id="12-面向对象-继承中成员方法关系-掌握"><a href="#12-面向对象-继承中成员方法关系-掌握" class="headerlink" title="12.面向对象(继承中成员方法关系)(掌握)"></a>12.面向对象(继承中成员方法关系)(掌握)</h3><ul><li>A:案例演示<ul><li>a:不同名的方法</li><li>b:同名的方法</li></ul></li></ul><h3 id="13-面向对象-方法重写概述及其应用-掌握"><a href="#13-面向对象-方法重写概述及其应用-掌握" class="headerlink" title="13.面向对象(方法重写概述及其应用)(掌握)"></a>13.面向对象(方法重写概述及其应用)(掌握)</h3><ul><li>A:什么是方法重写<ul><li>重写:子父类出现了一模一样的方法(注意:返回值类型可以是子父类,这个我们学完面向对象讲) </li></ul></li><li>B:方法重写的应用：<ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法。这样，即沿袭了父类的功能，又定义了子类特有的内容。</li></ul></li><li>C:案例演示<ul><li>a:定义一个手机类。</li></ul></li></ul><h3 id="14-面向对象-方法重写的注意事项-掌握"><a href="#14-面向对象-方法重写的注意事项-掌握" class="headerlink" title="14.面向对象(方法重写的注意事项)(掌握)"></a>14.面向对象(方法重写的注意事项)(掌握)</h3><ul><li><p>A:方法重写注意事项</p><ul><li><p>a:父类中私有方法不能被重写</p><ul><li>因为父类私有方法子类根本就无法继承</li></ul></li><li><p>b:子类重写父类方法时，访问权限不能更低</p><ul><li>最好就一致</li></ul></li><li><p>c:父类静态方法，子类也必须通过静态方法进行重写</p><ul><li>其实这个算不上方法重写，但是现象确实如此，至于为什么算不上方法重写，多态中我会讲解(静态只能覆盖静态)</li></ul></li><li><p>子类重写父类方法的时候，最好声明一模一样。</p></li></ul></li><li><p>B:案例演示</p><ul><li>方法重写注意事项</li></ul></li></ul><h3 id="15-面向对象-方法重写的面试题-掌握"><a href="#15-面向对象-方法重写的面试题-掌握" class="headerlink" title="15.面向对象(方法重写的面试题)(掌握)"></a>15.面向对象(方法重写的面试题)(掌握)</h3><ul><li><p>A:方法重写的面试题</p><ul><li><p>Override和Overload的区别?Overload能改变返回值类型吗?</p></li><li><p>overload可以改变返回值类型,只看参数列表</p></li><li><p>方法重写：子类中出现了和父类中方法声明一模一样的方法。与返回值类型有关,返回值是一致(或者是子父类)的</p></li><li><p>方法重载：本类中出现的方法名一样，参数列表不同的方法。与返回值类型无关。</p></li><li><p>子类对象调用方法的时候：</p><ul><li>先找子类本身，再找父类。</li></ul></li></ul></li></ul><h3 id="16-面向对象-使用继承前的学生和老师案例-掌握"><a href="#16-面向对象-使用继承前的学生和老师案例-掌握" class="headerlink" title="16.面向对象(使用继承前的学生和老师案例)(掌握)"></a>16.面向对象(使用继承前的学生和老师案例)(掌握)</h3><ul><li>A:案例演示<ul><li>使用继承前的学生和老师案例</li><li>属性:姓名,年龄</li><li>行为:吃饭</li><li>老师有特有的方法:讲课</li><li>学生有特有的方法:学习</li></ul></li></ul><h3 id="17-使用继承后的学生和老师案例-掌握"><a href="#17-使用继承后的学生和老师案例-掌握" class="headerlink" title="17.使用继承后的学生和老师案例)(掌握)"></a>17.使用继承后的学生和老师案例)(掌握)</h3><ul><li>A:案例演示<ul><li>使用继承后的学生和老师案例</li></ul></li></ul><h3 id="18-猫狗案例分析-实现及测试-掌握"><a href="#18-猫狗案例分析-实现及测试-掌握" class="headerlink" title="18.猫狗案例分析,实现及测试)(掌握)"></a>18.猫狗案例分析,实现及测试)(掌握)</h3><ul><li>A:猫狗案例分析</li><li>B:案例演示<ul><li>猫狗案例继承版</li><li>属性:毛的颜色,腿的个数</li><li>行为:吃饭</li><li>猫特有行为:抓老鼠catchMouse</li><li>狗特有行为:看家lookHome</li></ul></li></ul><h3 id="19-final关键字修饰类-方法以及变量的特点-掌握"><a href="#19-final关键字修饰类-方法以及变量的特点-掌握" class="headerlink" title="19.final关键字修饰类,方法以及变量的特点)(掌握)"></a>19.final关键字修饰类,方法以及变量的特点)(掌握)</h3><ul><li>A:final概述</li><li>B:final修饰特点<ul><li>修饰类，类不能被继承</li><li>修饰变量，变量就变成了常量，只能被赋值一次</li><li>修饰方法，方法不能被重写</li></ul></li></ul><h3 id="20-final关键字修饰局部变量-掌握"><a href="#20-final关键字修饰局部变量-掌握" class="headerlink" title="20.final关键字修饰局部变量)(掌握)"></a>20.final关键字修饰局部变量)(掌握)</h3><ul><li>A:案例演示<ul><li>方法内部或者方法声明上都演示一下(了解)</li><li>基本类型，是值不能被改变</li><li>引用类型，是地址值不能被改变,对象中的属性可以改变</li></ul></li></ul><h3 id="21-final修饰变量的初始化时机-掌握"><a href="#21-final修饰变量的初始化时机-掌握" class="headerlink" title="21.final修饰变量的初始化时机)(掌握)"></a>21.final修饰变量的初始化时机)(掌握)</h3><ul><li>A:final修饰变量的初始化时机<ul><li>显示初始化 </li><li>在对象构造完毕前即可</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象&amp;构造方法</title>
      <link href="/2019/12/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/12/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-面向对象的特征"><a href="#1-面向对象的特征" class="headerlink" title="1.面向对象的特征"></a>1.面向对象的特征</h3><ul><li>继承：<br>继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段。</li><li>封装：<br>通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口。</li><li>多态：<br>多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的（就像电动剃须刀是A系统，它的供电系统是B系统，B系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A系统只会通过B类对象调用供电的方法，但并不知道供电系统的底层实现是什么，究竟通过何种方式获得了动力）。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1). 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2). 对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。 </li></ul><h3 id="2-构造方法Constructor概述和格式-掌握"><a href="#2-构造方法Constructor概述和格式-掌握" class="headerlink" title="2.构造方法Constructor概述和格式(掌握)"></a>2.构造方法Constructor概述和格式(掌握)</h3><ul><li>A:构造方法概述和作用<ul><li>给对象的数据(属性)进行初始化</li></ul></li><li>B:构造方法格式特点<ul><li>a:方法名与类名相同(大小也要与类名一致)</li><li>b:没有返回值类型，连void都没有</li><li>c:没有具体的返回值return;</li></ul></li></ul><h3 id="3-构造方法的重载及注意事项-掌握"><a href="#3-构造方法的重载及注意事项-掌握" class="headerlink" title="3.构造方法的重载及注意事项(掌握)"></a>3.构造方法的重载及注意事项(掌握)</h3><ul><li>A:案例演示<ul><li>构造方法的重载</li><li>重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表</li></ul></li><li>B:构造方法注意事项<ul><li>a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。</li><li>b:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。<ul><li>注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法</li></ul></li></ul></li></ul><h3 id="4-给成员变量赋值的两种方式的区别"><a href="#4-给成员变量赋值的两种方式的区别" class="headerlink" title="4.给成员变量赋值的两种方式的区别"></a>4.给成员变量赋值的两种方式的区别</h3><ul><li>A:setXxx()方法<ul><li>修改属性值 </li></ul></li><li>B:构造方法<ul><li>给对象中属性进行初始化 </li></ul></li></ul><h3 id="5-学生类的代码及测试-掌握"><a href="#5-学生类的代码及测试-掌握" class="headerlink" title="5.学生类的代码及测试(掌握)"></a>5.学生类的代码及测试(掌握)</h3><ul><li><p>A:案例演示</p><ul><li>学生类：<ul><li>成员变量：<ul><li>name，age</li></ul></li><li>构造方法：<ul><li>无参，带两个参</li></ul></li><li>成员方法：<ul><li>getXxx()/setXxx()</li><li>show()：输出该类的所有成员变量值</li></ul></li></ul></li></ul></li><li><p>B:给成员变量赋值：</p><ul><li>a:setXxx()方法</li><li>b:构造方法</li></ul></li><li><p>C:输出成员变量值的方式：</p><ul><li>a:通过getXxx()分别获取然后拼接</li><li>b:通过调用show()方法搞定</li></ul></li></ul><h3 id="6-创建一个对象的步骤-掌握"><a href="#6-创建一个对象的步骤-掌握" class="headerlink" title="6.创建一个对象的步骤(掌握)"></a>6.创建一个对象的步骤(掌握)</h3><ul><li>A:画图演示<ul><li>画图说明一个对象的创建过程做了哪些事情?</li><li>Student s = new Student();</li><li>1,Student.class加载进内存</li><li>2,声明一个Student类型引用s</li><li>3,在堆内存创建对象,</li><li>4,给对象中属性默认初始化值</li><li>5,属性进行显示初始化</li><li>6,构造方法进栈,对对象中的属性赋值,构造方法弹栈</li><li>7,将对象的地址值赋值给s</li></ul></li></ul><h3 id="7-static关键字的特点-掌握"><a href="#7-static关键字的特点-掌握" class="headerlink" title="7.static关键字的特点(掌握)"></a>7.static关键字的特点(掌握)</h3><ul><li>A:static关键字的特点<ul><li>a:随着类的加载而加载</li><li>b:优先于对象存在</li><li>c:被类的所有对象共享<ul><li>举例：咱们班级的学生应该共用同一个班级编号。</li><li>其实这个特点也是在告诉我们什么时候使用静态?<ul><li>如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。</li></ul></li><li>举例：<ul><li>饮水机(用静态修饰)</li><li>水杯(不能用静态修饰)</li><li>共性用静态,特性用非静态</li></ul></li></ul></li><li>d:可以通过类名调用<ul><li>其实它本身也可以通过对象名调用。</li><li>推荐使用类名调用。</li><li>静态修饰的内容一般我们称其为：与类相关的，类成员</li></ul></li></ul></li></ul><h3 id="8-static的注意事项-掌握"><a href="#8-static的注意事项-掌握" class="headerlink" title="8.static的注意事项(掌握)"></a>8.static的注意事项(掌握)</h3><ul><li>A:static的注意事项<ul><li>a:在静态方法中是没有this关键字的<ul><li>如何理解呢?<ul><li>静态是随着类的加载而加载，this是随着对象的创建而存在。</li><li>静态比对象先存在。</li></ul></li></ul></li><li>b:静态方法只能访问静态的成员变量和静态的成员方法<ul><li>静态方法：<ul><li>成员变量：只能访问静态变量</li><li>成员方法：只能访问静态成员方法</li></ul></li><li>非静态方法：<ul><li>成员变量：可以是静态的，也可以是非静态的</li><li>成员方法：可是是静态的成员方法，也可以是非静态的成员方法。</li></ul></li><li>简单记：<ul><li>静态只能访问静态。</li></ul></li></ul></li></ul></li></ul><h3 id="9-静态变量和成员变量的区别-掌握"><a href="#9-静态变量和成员变量的区别-掌握" class="headerlink" title="9.静态变量和成员变量的区别(掌握)"></a>9.静态变量和成员变量的区别(掌握)</h3><ul><li>静态变量也叫类变量  成员变量也叫对象变量</li><li>A:所属不同<ul><li>静态变量属于类，所以也称为为类变量</li><li>成员变量属于对象，所以也称为实例变量(对象变量)</li></ul></li><li>B:内存中位置不同<ul><li>静态变量存储于方法区的静态区</li><li>成员变量存储于堆内存</li></ul></li><li>C:内存出现时间不同<ul><li>静态变量随着类的加载而加载，随着类的消失而消失</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失</li></ul></li><li>D:调用不同<ul><li>静态变量可以通过类名调用，也可以通过对象调用</li><li>成员变量只能通过对 象名调用</li></ul></li></ul><h3 id="10-main方法的格式详细解释-了解"><a href="#10-main方法的格式详细解释-了解" class="headerlink" title="10.main方法的格式详细解释(了解)"></a>10.main方法的格式详细解释(了解)</h3><ul><li>A:格式<ul><li>public static void main(String[] args) {}</li></ul></li><li>B:针对格式的解释<ul><li>public 被jvm调用，访问权限足够大。</li><li>static 被jvm调用，不用创建对象，直接类名访问</li><li>void被jvm调用，不需要给jvm返回值</li><li>main 一个通用的名称，虽然不是关键字，但是被jvm识别</li><li>String[] args 以前用于接收键盘录入的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码补码反码</title>
      <link href="/2019/12/21/%E5%8E%9F%E7%A0%81%E8%A1%A5%E7%A0%81%E5%8F%8D%E7%A0%81/"/>
      <url>/2019/12/21/%E5%8E%9F%E7%A0%81%E8%A1%A5%E7%A0%81%E5%8F%8D%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p>&emsp;&emsp;1.在计算机系统中，数值一律用补码来表示（存储）。用补码进行加法运算。</p><p>&emsp;&emsp;2.正数和0的补码、反码是本身原码,所以对于正数来说，可以理解为不存在反码和补码。<br>&emsp;&emsp;3.负数的反码：符号位不变，其他位取反。<br>&emsp;&emsp;4.负数的补码：对于负数而言， 补码 =  它的反码 + 1 。<br>&emsp;&emsp;5.知道负数的补码，求原码：  原码 = 补码 -1 ，或对补码在取补码，就是先对补码取反码，然后将得到的数再 +1。</p><h2 id="byte的取值范围为什么是-128-127？"><a href="#byte的取值范围为什么是-128-127？" class="headerlink" title="byte的取值范围为什么是-128~127？"></a>byte的取值范围为什么是-128~127？</h2><p>&emsp;&emsp;1.byte占用8位，每位用0或1表示，能够表示256(2^8)个数据。<br>&emsp;&emsp;2.这8位分为符号位（最高位）和数值位（剩余七位），符号位0表示正数，1表示负数。<br>&emsp;&emsp;3.按上一步的理解，容易得到（+127：0111 1111、+1：0000 0001、+0：0000 0000、-0：1000 0000、-1：1000 0001、-127：1111 1111），计算机底层定义了+0（0000 0000）就是0，那么“可怜的-0”又该何去何从呢？计算机遇到这个二进制该如何处理呢？总不能把这两个都对应0吧，这显然是资源浪费。<br>&emsp;&emsp;4.最后来解决这个-128为什么可以用1000 0000表示。这里我分析的是byte，它就8位。在无符号位的二进制中128的表示为1000 0000。有符号位的情况下byte好像无法表示+128或-128。如果我们假设现在byte不是占用8位，而是9位，最高位是符号位。那么-128就能够是1 1000 0000，其补码也是1 1000 0000，很神奇吧，一样的。-128的补码尾八位就是1000 0000。那就规定【1000 0000是-128的补码，且-128是没有原码和反码的，即不能利用1000 0000反推其原码和反码】。<br>&emsp;&emsp;5.你也可以简单就认为计算机规定了1000 0000就是-128，是一种人为设计没有什么道理可以言。</p><h2 id="byte-by-byte-130-结果是多少呢"><a href="#byte-by-byte-130-结果是多少呢" class="headerlink" title="byte by = (byte)130,结果是多少呢?"></a>byte by = (byte)130,结果是多少呢?</h2><p>&emsp;&emsp;1、首先，java的正整数都会默认为int类型，所以130在强制转型之前，是int类型的数据<br>&emsp;&emsp;2、此时130的二进制码是（原码）：<br>     0000 0000 0000 0000 0000 0000 1000 0010<br>&emsp;&emsp;3、最高位是符号位，0代表正数1为负数，然而计算机运算的时候会事先将所有数据转成补码在运算<br>     而且正数的原码反码和补码都是一样，所以130的补码同样是：<br>     0000 0000 0000 0000 0000 0000 1000 0010<br>&emsp;&emsp;4、正整数的原码转成补码后，就开始强制转型了，因为byte的取值范围是 -2^7~2^7-1，所以byte类型的数据包含8个二进制位，最高一位属于正负符号位，所以不能计入取值范围<br>&emsp;&emsp;5、我们将int类型数强转为byte类型，就是直接把上面的二进制码超出第八位的所有数字都砍掉，因此，我们获得了强转之后的补码1000 0010<br>&emsp;&emsp;6、如果要获得这个补码的真实结果，我们还需要把它转化成原码，再计算它的十进制数值：<br>&emsp;&emsp;1000 0010的反码是：（所有位数减一，最高符号位不变）<br>&emsp;&emsp;1000 0001<br>&emsp;&emsp;以上反码的原码是：（所有位数取反，符号位不变）<br>&emsp;&emsp;1111 1110<br>&emsp;&emsp;根据以上原码计算二进制：<br>&emsp;&emsp;首位是1，是一个负数，得出结果为 -126</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原码补码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符&amp;选择结构&amp;循环结构</title>
      <link href="/2019/12/20/%E8%BF%90%E7%AE%97%E7%AC%A6&amp;%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84&amp;%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2019/12/20/%E8%BF%90%E7%AE%97%E7%AC%A6&amp;%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84&amp;%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-逻辑运算符的基本用法-掌握"><a href="#1-逻辑运算符的基本用法-掌握" class="headerlink" title="1.逻辑运算符的基本用法  掌握"></a>1.逻辑运算符的基本用法  掌握</h2><ul><li><p>A:逻辑运算符有哪些</p><ul><li>&amp;,|,^,!</li><li>&amp;&amp;,|| </li></ul></li><li><p>B:案例演示</p></li><li><p>逻辑运算符的基本用法</p></li><li><p>注意事项：</p><ul><li>a:逻辑运算符一般用于连接boolean类型的表达式或者值。</li><li>b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。<ul><li>算术表达式：a + b</li><li>比较表达式：a == b 条件表达式 </li></ul></li></ul></li><li><p>C:结论：</p></li><li><p>&amp;逻辑与:有false则false。</p></li><li><p>|逻辑或:有true则true。</p></li><li><p>^逻辑异或:相同为false，不同为true。</p></li><li><p>!逻辑非:非false则true，非true则false。</p><ul><li>特点：偶数个不改变本身。</li></ul></li></ul><h2 id="2-逻辑运算符-amp-amp-和-amp-的区别-掌握"><a href="#2-逻辑运算符-amp-amp-和-amp-的区别-掌握" class="headerlink" title="2.逻辑运算符&amp;&amp;和&amp;的区别  掌握"></a>2.逻辑运算符&amp;&amp;和&amp;的区别  掌握</h2><ul><li>A:案例演示<ul><li>&amp;&amp;和&amp;的区别?<ul><li>a:最终结果一样。</li><li>b:&amp;&amp;具有短路效果。左边是false，右边不执行。</li><li>&amp;是无论左边是false还是true,右边都会执行</li></ul></li></ul></li><li>B:同理||和|的区别?</li><li>C:开发中常用谁?<ul><li>&amp;&amp;,||,!</li></ul></li></ul><h2 id="3-位运算符的基本用法1-了解"><a href="#3-位运算符的基本用法1-了解" class="headerlink" title="3.位运算符的基本用法1  了解"></a>3.位运算符的基本用法1  了解</h2><ul><li><p>A:位运算符有哪些</p><ul><li>&amp;,|,^,~ ,&gt;&gt;,&gt;&gt;&gt;,&lt;&lt;</li></ul></li><li><p>B:案例演示</p><ul><li><p>位运算符的基本用法1</p></li><li><p>&amp;,|,^,~ 的用法</p></li><li><p>&amp;:有0则0</p></li><li><p>|:有1则1</p></li><li><p>^:相同则0，不同则1</p></li><li><p>~:按位取反</p></li></ul></li></ul><h2 id="4-位异或运算符的特点及面试题-掌握"><a href="#4-位异或运算符的特点及面试题-掌握" class="headerlink" title="4.位异或运算符的特点及面试题  掌握"></a>4.位异或运算符的特点及面试题  掌握</h2><ul><li><p>A:案例演示</p><ul><li><p>位异或运算符的特点</p></li><li><p>^的特点：一个数据对另一个数据位异或两次，该数本身不变。</p></li></ul></li><li><p>B:面试题：</p><ul><li>请自己实现两个整数变量的交换</li><li>注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。</li></ul></li></ul><h2 id="5-位运算符的基本用法2及面试题-了解"><a href="#5-位运算符的基本用法2及面试题-了解" class="headerlink" title="5.位运算符的基本用法2及面试题  了解"></a>5.位运算符的基本用法2及面试题  了解</h2><ul><li>A:案例演示 &gt;&gt;,&gt;&gt;&gt;,&lt;&lt;的用法:<ul><li>&lt;&lt;:左移    左边最高位丢弃，右边补齐0</li><li>&gt;&gt;:右移    最高位是0，左边补齐0;最高为是1，左边补齐1</li><li>&gt;&gt;&gt;:无符号右移 无论最高位是0还是1，左边补齐0</li><li>最有效率的算出2 * 8的结果</li></ul></li></ul><h2 id="6-三元运算符的基本用法-掌握"><a href="#6-三元运算符的基本用法-掌握" class="headerlink" title="6.三元运算符的基本用法  掌握"></a>6.三元运算符的基本用法  掌握</h2><ul><li>A:三元运算符的格式</li><li>关系表达式  ? 表达式1 : 表达式2;</li><li>B:三元运算符的执行流程 </li><li>C:案例演示<ul><li>获取两个数中的最大值</li></ul></li></ul><h2 id="7-三元运算符的练习-掌握"><a href="#7-三元运算符的练习-掌握" class="headerlink" title="7.三元运算符的练习  掌握"></a>7.三元运算符的练习  掌握</h2><ul><li>A:案例演示<ul><li>比较两个整数是否相同</li></ul></li><li>B:案例演示<ul><li>获取三个整数中的最大值</li></ul></li></ul><h2 id="8-顺序结构语句-了解"><a href="#8-顺序结构语句-了解" class="headerlink" title="8.顺序结构语句  了解"></a>8.顺序结构语句  了解</h2><ul><li>A:什么是流程控制语句<ul><li>流程控制语句：可以控制程序的执行流程。</li></ul></li><li>B:流程控制语句的分类<ul><li>顺序结构</li><li>选择结构</li><li>循环结构</li></ul></li><li>C:执行流程：<ul><li>从上往下，依次执行。</li></ul></li><li>D:案例演示<ul><li>输出几句话看效果即可</li></ul></li></ul><h2 id="9-选择结构if语句格式1及其使用-掌握"><a href="#9-选择结构if语句格式1及其使用-掌握" class="headerlink" title="9.选择结构if语句格式1及其使用  掌握"></a>9.选择结构if语句格式1及其使用  掌握</h2><ul><li><p>A:选择结构的分类</p><ul><li>if语句</li><li>switch语句</li></ul></li><li><p>B:if语句有几种格式</p><ul><li>格式1</li><li>格式2</li><li>格式3</li></ul></li><li><p>C:if语句的格式1</p><pre><code>if 比较表达式  {    语句体;}</code></pre></li><li><p>D:if语句的格式2</p><pre><code>if 比较表达式  {    语句体1;}else {    语句体2;}</code></pre><p>E:if语句的格式3：</p><pre><code>if 比较表达式1  {    语句体1;}else if 比较表达式2  {    语句体2;}else if 比较表达式3  {    语句体3;}...else {    语句体n+1;}</code></pre><font color ='red'>if必须出现一次且只能出现一次，else可出现0-1次，else if可出现0-N次。</font></li></ul><h2 id="10-if语句的格式2和三元的相互转换问题-掌握"><a href="#10-if语句的格式2和三元的相互转换问题-掌握" class="headerlink" title="10.if语句的格式2和三元的相互转换问题  掌握"></a>10.if语句的格式2和三元的相互转换问题  掌握</h2><ul><li><p>A:案例演示</p><ul><li>if语句和三元运算符完成同一个效果</li></ul></li><li><p>B:案例演示</p><ul><li><p>if语句和三元运算符的区别</p></li><li><p>三元运算符实现的，都可以采用if语句实现。反之不成立。</p></li><li><p>什么时候if语句实现不能用三元改进呢?</p><ul><li>当if语句控制的操作是一个输出语句的时候就不能。</li><li>为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。</li></ul></li></ul></li></ul><h2 id="11-选择结构switch语句的格式及其解释-掌握"><a href="#11-选择结构switch语句的格式及其解释-掌握" class="headerlink" title="11.选择结构switch语句的格式及其解释  掌握"></a>11.选择结构switch语句的格式及其解释  掌握</h2><ul><li><p>A:switch语句的格式</p></li><li><pre><code>switch 表达式  {      case 值1：        语句体1;        break;        case 值2：        语句体2;        break;        …        default：            语句体n+1;        break;}</code></pre></li><li><p>B:switch语句的格式解释</p></li><li><p>C:面试题</p><ul><li>byte可以作为switch的表达式吗?</li><li>long可以作为switch的表达式吗?</li><li>String可以作为switch的表达式吗?</li></ul></li><li><p>switch 匹配的表达式可以是(重要)：</p><ul><li>byte、short、char、int类型及这4种类型的包装类型</li><li>枚举类型</li><li>String 类型</li></ul></li><li><p>C:执行流程</p><ul><li>先计算表达式的值</li><li>然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句</li></ul></li></ul><h2 id="12-选择结构switch语句的注意事项-掌握"><a href="#12-选择结构switch语句的注意事项-掌握" class="headerlink" title="12.选择结构switch语句的注意事项  掌握"></a>12.选择结构switch语句的注意事项  掌握</h2><ul><li>A:案例演示<ul><li>a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</li><li>b:default可以省略吗?<ul><li>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。</li><li>特殊情况：<ul><li>case就可以把值固定。</li><li>A,B,C,D</li></ul></li></ul></li><li>c:break可以省略吗?<ul><li>最后一个可以省略,其他不要省略，不然会出现一个现象：case穿透</li></ul></li><li>d:default一定要在最后吗?<ul><li>不是，可以在任意位置。但是建议在最后。</li></ul></li><li>e:switch语句的结束条件<ul><li>a:遇到break就结束了</li><li>b:执行到switch的右大括号就结束了</li></ul></li></ul></li></ul><h2 id="13-选择结构if语句和switch语句的区别-掌握"><a href="#13-选择结构if语句和switch语句的区别-掌握" class="headerlink" title="13.选择结构if语句和switch语句的区别  掌握"></a>13.选择结构if语句和switch语句的区别  掌握</h2><ul><li>A:总结switch语句和if语句的各自使用场景</li><li>switch建议判断固定值的时候用</li><li>if建议判断区间或范围的时候用</li></ul><h2 id="14-循环结构概述和for语句的格式"><a href="#14-循环结构概述和for语句的格式" class="headerlink" title="14.循环结构概述和for语句的格式"></a>14.循环结构概述和for语句的格式</h2><ul><li><p>A:循环结构的分类</p><ul><li>for,while,do…while </li></ul></li><li><p>B:循环结构for语句的格式：</p><pre><code>for(初始化表达式;条件表达式;循环后的操作表达式) {    循环体;}</code></pre><h2 id="15-循环结构while语句"><a href="#15-循环结构while语句" class="headerlink" title="15.循环结构while语句"></a>15.循环结构while语句</h2></li><li><p>A:循环结构while语句的格式：</p><pre><code>while循环的基本格式：while(判断条件语句) {    循环体语句;}完整格式：初始化语句;while(判断条件语句) {     循环体语句;     控制条件语句;}</code></pre><h2 id="16-循环结构do…while语句"><a href="#16-循环结构do…while语句" class="headerlink" title="16.循环结构do…while语句"></a>16.循环结构do…while语句</h2></li><li><p>A:循环结构do…while语句的格式：</p><pre><code>do {    循环体语句;}while(判断条件语句);完整格式；初始化语句;do {    循环体语句;    控制条件语句;}while(判断条件语句);</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL和DML语句</title>
      <link href="/2019/12/18/DDL%E5%92%8CDML%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/12/18/DDL%E5%92%8CDML%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>Transaction Control:事务控制,COMMIT、ROLLBACK、SAVEPOINT等</p><p>1.SQL语句主要可以划分为以下几类：<br>&emsp;&emsp;DDL(Data Definition Language):数据定义语言，定义对数据库对象(库、表、列、索引)的操作。CREATE、DROP、ALTER、RENAME、 TRUNCATE等<br>&emsp;&emsp;DML(Data Manipulation Language): 数据操作语言，定义对数据库记录的操作。INSERT、DELETE、UPDATE<br>&emsp;&emsp;DCL(Data Control Language): 数据控制语言，定义对数据库、表、字段、用户的访问权限和安全级别。GRANT、REVOKE等</p><p>2.在数据库系统中，SQL语句不区分大小写(建议用大写) 。但字符串常量区分大小写。SQL语句可单行或多行书写，以“;”结尾。</p><p>– 字符串常量(数据)区分大小写<br>SELECT * FROM Dba_Users;<br>SELECT * FROM Dba_Users WHERE username=’J1510’;<br>SELECT * FROM Dba_Users WHERE username=’j1510’;</p><h2 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h2><p>数值型：int  number<br>字符型：<br>char：固定长度字符。CHAR(8),存入“jack”，数据库开辟8个字节的空间存储数据。速度快<br>varchar：可变长度。varchar(8),存入“jack”，数据库开辟4个字节的空间存储数据。节省空间<br>varchar2：可变长度。oracle不建议存储空字符，建议存储null，为了oracle的兼容性，推荐使用。<br>日期型：date</p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>创建  表  表名(<br>列名[字段]  列类型(长度),<br>列名  列类型(长度),<br>列名  列类型(长度)<br>);</p><p>CREATE TABLE tb_user(<br>NAME VARCHAR2(18),<br>sex CHAR(3),<br>age INT<br>);<br>注意：列和列之间用”,”隔开，最后一个列不需要”,”</p><p>– 查询表<br>– 查询 所有列 从  表名 (命令语言，编程语言)<br>SELECT * FROM tb_user;</p><p>– 修改  Alter<br>– 增加两个字段address,phone<br>– 修改 表  表名  add （列 类型[长度],列 类型[长度]）<br>ALTER TABLE tb_user ADD(address VARCHAR2(100),phone VARCHAR2(21));</p><p>– 删除字段<br>– 修改 表  表名  DROP （列）<br>ALTER TABLE tb_user DROP (address,phone);</p><p>– 修改字段的长度<br>– 修改 表  表名  MODIFY （列 类型[长度]）<br>ALTER TABLE tb_user MODIFY (address VARCHAR2(200));</p><p>– 修改列名<br>– 修改 表  表名  RENAME COLUMN 旧列名 to  新列名<br>ALTER TABLE tb_user RENAME COLUMN phone TO iphone6s;</p><p>– 修改表名<br>– 改名  旧表名 to  新表名<br>RENAME tb_user TO tb_student;<br>RENAME tb_student TO tb_user;</p><p>– 删除表<br>– 删除  表  表名<br>– 注意：drop 会删除表结构和表所有数据，并且不能恢复，慎用<br>DROP TABLE tb_user;</p><p>– 注释  简单了解<br>– 注释  on 表  表名  is  ‘自己的注释’<br>COMMENT  on table tb_user is ‘用户表’;<br>COMMENT  on column tb_user.name is ‘姓名’;</p><p>–  用户.表名[对象名]<br>– 默认查询当前用户的表<br>SELECT * FROM tb_user;<br>SELECT * FROM j1510.tb_user;<br>SELECT * FROM scott.emp;</p><p>– 数据字典分类<br>– dba:所有<br>– ALL:用户所能访问的所有对象<br>– user:当前用户<br>SELECT * FROM user_tables;<br>SELECT * FROM all_tables;<br>SELECT * FROM dba_tables;</p><p>– 查询scott用户的dept表，前提是有查询scott表的权限<br>SELECT * FROM scott.dept;</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle创建用户和表空间</title>
      <link href="/2019/12/18/oracle%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E8%A1%A8%E7%A9%BA%E9%97%B4/"/>
      <url>/2019/12/18/oracle%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E8%A1%A8%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>Oracle是通过用户去管理数据。<br>我们要存储数据,必须先建表空间，再建用户，再建对象(表、索引、视图……)</p><ol><li>建议做自己的数据用自己的用户。不要使用System等系统用户。</li><li>用户一定要使用表空间。</li></ol><h2 id="建表空间"><a href="#建表空间" class="headerlink" title="建表空间"></a>建表空间</h2><p>表空间： 映射数据实际存储位置，建议一个用户使用一个表空间</p><p>格式：<br>创建 表空间 表空间名称<br>数据文件保存路径、<br>大小<br>自动扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLESPACE j1510</span><br><span class="line">DATAFILE &#39;C:\oracle\product\10.2.0\oradata\orcl\j1510.dbf&#39; SIZE 20M </span><br><span class="line">AUTOEXTEND ON;</span><br></pre></td></tr></table></figure><p>注意：表空间名称j1510，执行成功后在路径下会有一个j1510.dbf文件产生。C:\oracle\product\10.2.0\oradata\orcl是Oracle安装路径。</p><p>–删除表空间同时删除表空间的所在的物理文件</p><blockquote><p>DROP TABLESPACE j1510 INCLUDING CONTENTS AND DATAFILES;</p></blockquote><p>–严重注意: 千万不要手动去删除文件夹下面的dbf文件</p><p>–数据字典查询所有表空间<br>select * from DBA_TABLESPACES;<br>–查询所有数据文件<br>select * from DBA_DATA_FILES;</p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>create user j1510    –创建  用户  用户名<br>  identified by j1510   –密码  密码字符<br>  default tablespace j1510   –默认表空间  表空间名<br>  temporary tablespace TEMP;  –临时表空间  表空间名</p><p>–删除用户,注意：drop会删除用户的所有表和表数据，表空间还存在。<br> drop user j1510;</p><p>–数据字典，查询所有用户。<br> select * from dba_users;</p><p>–oracle创建数据库会默认创建一个测试用户scott,密码tiger，这个用户默认是锁定</p><p>ALTER USER j1510 ACCOUNT LOCK;  –加锁<br>ALTER USER j1510 ACCOUNT UNLOCK;–解锁</p><p>– 赋予连接权限给j1506用户<br>GRANT CONNECT TO j1510;<br>– 赋予连接权限给j1506用户，j1506可以将该权限再赋给另一个用户<br>grant connect to j1510 with admin option;<br>– 角色  （一般直接赋予角色权限）<br>grant DBA to j1510 with admin option;</p><p>– 收回权限<br>REVOKE CONNECT FROM j1510;</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Get/Post请求中文乱码问题</title>
      <link href="/2019/12/04/%E8%A7%A3%E5%86%B3GetPost%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/04/%E8%A7%A3%E5%86%B3GetPost%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="给服务器设置编码"><a href="#给服务器设置编码" class="headerlink" title="给服务器设置编码"></a>给服务器设置编码</h2><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><p>&emsp;&emsp;在url地址栏输入回车是get请求，form表单不写method=”post”,默认就是get请求。<br>&emsp;&emsp;get请求过来的数据，在url地址栏上就已经经过编码了，所以我们取到的就是乱码。<font color="red">Tomcat8.0之前</font>，用get请求访问tomcat时的编码方式，默认的编码方式使用ISO-8859-1。<br>&emsp;&emsp;解决方式：<br>&emsp;&emsp;1.先让文字回到ISO-8859-1对应的字节数组，然后再按utf-8组拼字符串，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2.在Tomcat配置文件server.xml中添加URIEncoding=”utf-8”,但是一般不用.定位到 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector connectionTimeout=<span class="string">"20000"</span> port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span> redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"utf-8"</span>/&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<font color="green">从tomcat8.0开始，用get请求访问tomcat时的编码方式不再是ISO-8859-1，而变成了UTF-8 所有Tomcat8.0不用处理get请求乱码问题</font></p><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p>&emsp;&emsp;是以二进制流的形式发送到的服务器。服务器收到数据后。默认以iso-8859-1进行编码。<br>&emsp;&emsp;解决方式：<br>&emsp;&emsp;1.<font color="red">这种方法必须获取请求参数之前调用</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">//设置请求体里面的文字编码</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(request.getParameter(<span class="string">"参数名"</span>).getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><h2 id="给浏览器设置编码-常用"><a href="#给浏览器设置编码-常用" class="headerlink" title="给浏览器设置编码 (常用)"></a>给浏览器设置编码 (常用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); <span class="comment">//(UTF-8是国际通用编码)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Get/Post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie详细笔记</title>
      <link href="/2019/12/02/Cookie%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/02/Cookie%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="中文文件下载"><a href="#中文文件下载" class="headerlink" title="中文文件下载"></a>中文文件下载</h2><p>针对浏览器类型，对文件名字做编码处理 Firefox (Base64) , IE、Chrome … 使用的是URLEncoder,如果文件的名字带有中文，那么需要对这个文件名进行编码处理.如果是IE，或者 Chrome（谷歌浏览器） ，使用URLEncoding 编码.如果是Firefox ，使用Base64编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取来访的客户端类型</span></span><br><span class="line">String clientType = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line"><span class="keyword">if</span>(clientType.contains(<span class="string">"Firefox"</span>))&#123;</span><br><span class="line">   fileName = DownLoadUtil.base64EncodeFileName(fileName);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//IE ，或者  Chrome （谷歌浏览器） ，</span></span><br><span class="line"><span class="comment">//对中文的名字进行编码处理</span></span><br><span class="line">fileName = URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>之前的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"login_success.html"</span>);</span><br><span class="line">```</span><br><span class="line"><span class="comment">//重定向写法： 重新定位方向 参数即跳转的位置</span></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">response.sendRedirect(<span class="string">"login_success.html"</span>);</span><br></pre></td></tr></table></figure><ol><li>地址上显示的是最后的那个资源的路径地址</li><li>请求次数最少有两次， 服务器在第一次请求后，会返回302 以及一个地址， 浏览器在根据这个地址，执行第二次访问。</li><li>可以跳转到任意路径。 不是自己的工程也可以跳。</li><li>效率稍微低一点， 执行两次请求。 </li><li>后续的请求，没法使用上一次的request存储的数据，或者 没法使用上一次的request对象，因为这是两次不同的请求。</li></ol><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发的写法： 参数即跳转的位置</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"login_success.html"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><ol><li>地址上显示的是请求servlet的地址。  返回200 ok</li><li>请求次数只有一次， 因为是服务器内部帮客户端执行了后续的工作。 </li><li>只能跳转自己项目的资源路径 。  </li><li>效率上稍微高一点，因为只执行一次请求。 </li><li>可以使用上一次的request对象。 </li></ol><p><img src="https://i.loli.net/2019/12/05/DmXCUwJ4osTv1hA.png" alt="" title="请求转发"></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>饼干. 其实是一份小数据， 是服务器给客户端，并且存储在客户端上的一份小数据</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>自动登录、浏览记录、购物车。</p></blockquote><h3 id="为什么要有这个Cookie"><a href="#为什么要有这个Cookie" class="headerlink" title="为什么要有这个Cookie"></a>为什么要有这个Cookie</h3><blockquote><p>http的请求是无状态。 客户端与服务器在通讯的时候，是无状态的，其实就是客户端在第二次来访的时候，服务器根本就不知道这个客户端以前有没有来访问过。 为了更好的用户体验，更好的交互 [自动登录]，其实从公司层面讲，就是为了更好的收集用户习惯[大数据]</p></blockquote><h3 id="Cookie怎么用"><a href="#Cookie怎么用" class="headerlink" title="Cookie怎么用"></a>Cookie怎么用</h3><h4 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h4><ul><li>添加Cookie给客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line">response.addCookie(cookie);<span class="comment">//给响应，添加一个cookie</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2. 客户端收到的信息里面，响应头中多了一个字段 Set-Cookie</p><p><img src="https://i.loli.net/2019/12/05/vcWpTPLh65EQurD.png" alt="" title="Set-Cookie"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端带过来的cookie</span></span><br><span class="line"></span><br><span class="line"> Cookie[] cookies = request.getCookies();</span><br><span class="line">  <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">String cookieName = c.getName();</span><br><span class="line">String cookieValue = c.getValue();</span><br><span class="line">System.out.println(cookieName + <span class="string">" = "</span>+ cookieValue);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>常用方法</li></ul><blockquote><p>//关闭浏览器后，cookie就没有了。 —&gt; 针对没有设置cookie的有效期。<br>        //    expiry： 有效 以秒计算。<br>        //正值 ： 表示 在这个数字过后，cookie将会失效。<br>        //负值： 关闭浏览器，那么cookie就失效， 默认值是 -1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">cookie.setValue(newValue);<span class="comment">//赋值新的值</span></span><br><span class="line">cookie.setDomain(<span class="string">".itheima.com"</span>);<span class="comment">//用于指定只有请求了指定的域名，才会带上该cookie</span></span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo"</span>);<span class="comment">//只有访问该域名下的cookieDemo的这个路径地址才会带cookie</span></span><br></pre></td></tr></table></figure><h2 id="例子一-显示最近访问的时间。"><a href="#例子一-显示最近访问的时间。" class="headerlink" title="例子一 显示最近访问的时间。"></a>例子一 显示最近访问的时间。</h2><ol><li>判断账号是否正确</li><li>如果正确，则获取cookie。 但是得到的cookie是一个数组， 我们要从数组里面找到我们想要的对象。</li><li>如果找到的对象为空，表明是第一次登录。那么要添加cookie</li><li>如果找到的对象不为空， 表明不是第一次登录。 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line"><span class="comment">//获取cookie last-name --- &gt;</span></span><br><span class="line">Cookie [] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//从数组里面找出我们想要的cookie</span></span><br><span class="line">Cookie cookie = CookieUtil.findCookie(cookies, <span class="string">"last"</span>);<span class="comment">//是第一次登录，没有cookie</span></span><br><span class="line"><span class="keyword">if</span>(cookie == <span class="keyword">null</span>)&#123;</span><br><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"last"</span>, System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//一个小时</span></span><br><span class="line">response.addCookie(c);</span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//1. 去以前的cookie第二次登录，有cookie</span></span><br><span class="line"><span class="keyword">long</span> lastVisitTime = Long.parseLong(cookie.getValue());</span><br><span class="line"><span class="comment">//2. 输出到界面，</span></span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName +<span class="string">",上次来访时间是："</span>+<span class="keyword">new</span> Date(lastVisitTime));</span><br><span class="line">    <span class="comment">//3. 重置登录的时间</span></span><br><span class="line">cookie.setValue(System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">response.getWriter().write(<span class="string">"登陆失败 "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子二：-显示商品浏览记录。"><a href="#例子二：-显示商品浏览记录。" class="headerlink" title="例子二： 显示商品浏览记录。"></a>例子二： 显示商品浏览记录。</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>拷贝基础课第一天的 htmll原型文件，到工程的WebContent里面。</li><li>在WebContent目录下新建一个jsp文件， product_list.jsp, 然后拷贝原来product_list.html的内容到jsp里面。 建好之后，jsp里面的所有ISO-8859-1 改成 UTF-8。拷贝html标签的所有内容。 替换jsp的html标签即可</li><li>修改product_info.htm里面的手机数码超链接地址<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"product_list.jsp"</span>&gt;</span>手机数码<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改首页(index.html)顶部的手机数码跳转的位置为 product_list.jsp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"product_list.jsp"</span>&gt;</span>手机数码<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2019/12/05/lfPwVducrURJzCQ.png" alt="" title="显示商品浏览记录分析"></p><h3 id="Jsp-里面使用Java代码"><a href="#Jsp-里面使用Java代码" class="headerlink" title="Jsp 里面使用Java代码"></a>Jsp 里面使用Java代码</h3><p>jsp</p><p> Java Server Pager —&gt; 最终会翻译成一个类， 就是一个Servlet</p><p>定义全局变量<br>&lt;%! int a = 99; %&gt;</p><p>定义局部变量<br>&lt;% int b = 999; %&gt;</p><p>在jsp页面上，显示 a 和 b的值，<br>    &lt;%=a %&gt;<br>    &lt;%=b %&gt;</p><h3 id="jsp显示浏览记录"><a href="#jsp显示浏览记录" class="headerlink" title="jsp显示浏览记录"></a>jsp显示浏览记录</h3><p><img src="https://i.loli.net/2019/12/05/C7RZEcyp3i1WzJ8.png" alt="" title="jsp显示浏览记录"></p><h3 id="清除浏览记录"><a href="#清除浏览记录" class="headerlink" title="清除浏览记录"></a>清除浏览记录</h3><p> 其实就是清除Cookie， 删除cookie是没有什么delete方法的。只有设置maxAge 为0 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"history"</span>,<span class="string">""</span>);</span><br><span class="line">cookie.setMaxAge(<span class="number">0</span>); <span class="comment">//设置立即删除</span></span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo02"</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><h3 id="Cookie总结"><a href="#Cookie总结" class="headerlink" title="Cookie总结"></a>Cookie总结</h3><ol><li><p>服务器给客户端发送过来的一小份数据，并且存放在客户端上。</p></li><li><p>获取cookie， 添加cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getCookie();</span><br><span class="line">response.addCookie();</span><br></pre></td></tr></table></figure></li><li><p>Cookie分类</p></li></ol><p>会话Cookie<br>&emsp;&emsp;默认情况下，关闭了浏览器，那么cookie就会消失。</p><p>持久Cookie<br>&emsp;&emsp;在一定时间内，都有效，并且会保存在客户端上。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>); <span class="comment">//设置立即删除</span></span><br><span class="line">cookie.setMaxAge(<span class="number">100</span>); <span class="comment">//100 秒</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Cookie的安全问题。<blockquote><p>由于Cookie会保存在客户端上，所以有安全隐患问题。  还有一个问题， Cookie的大小与个数有限制。 为了解决这个问题 —&gt; Session .</p></blockquote></li></ol><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><blockquote><p>会话，Session是基于Cookie的一种会话机制。 Cookie是服务器返回一小份数据给客户端，并且存放在客户端上。 Session是，数据存放在服务器端。</p></blockquote><p>常用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到会话ID</span></span><br><span class="line">String id = session.getId();</span><br><span class="line"><span class="comment">//存值</span></span><br><span class="line">session.setAttribute(name, value);</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line">session.getAttribute(name);</span><br><span class="line"><span class="comment">//移除值</span></span><br><span class="line">session.removeAttribute(name);</span><br></pre></td></tr></table></figure><ul><li>Session何时创建，何时销毁?</li></ul><p>创建:</p><blockquote><p>如果有在servlet里面调用了 request.getSession()</p></blockquote><p>销毁:</p><blockquote><ol><li>关闭服务器</li><li>session会话时间过期。 有效期过了，默认有效期： 30分钟。</li></ol></blockquote><p>session 是存放在服务器的内存中的一份数据。 当然可以持久化. Redis . 即使关了浏览器，session也不会销毁。</p><h2 id="例子三：-简单购物车。"><a href="#例子三：-简单购物车。" class="headerlink" title="例子三： 简单购物车。"></a>例子三： 简单购物车。</h2><p><img src="https://i.loli.net/2019/12/05/JP9wYZguOp1UbqM.png" alt="icon" title="简单购物车"></p><h3 id="CartServlet-代码"><a href="#CartServlet-代码" class="headerlink" title="CartServlet 代码"></a>CartServlet 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//1. 获取要添加到购物车的商品id</span></span><br><span class="line"><span class="keyword">int</span> id = Integer.parseInt(request.getParameter(<span class="string">"id"</span>)); <span class="comment">// 0 - 1- 2 -3 -4 </span></span><br><span class="line">String [] names = &#123;<span class="string">"Iphone7"</span>,<span class="string">"小米6"</span>,<span class="string">"三星Note8"</span>,<span class="string">"魅族7"</span> , <span class="string">"华为9"</span>&#125;;</span><br><span class="line"><span class="comment">//取到id对应的商品名称</span></span><br><span class="line">String name = names[id];</span><br><span class="line"><span class="comment">//2. 获取购物车存放东西的session  Map&lt;String , Integer&gt;  iphoen7 3</span></span><br><span class="line"><span class="comment">//把一个map对象存放到session里面去，并且保证只存一次。 </span></span><br><span class="line">Map&lt;String, Integer&gt; map = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="comment">//session里面没有存放过任何东西。</span></span><br><span class="line"><span class="keyword">if</span>(map == <span class="keyword">null</span>)&#123;</span><br><span class="line">map = <span class="keyword">new</span> LinkedHashMap&lt;String , Integer&gt;();</span><br><span class="line">request.getSession().setAttribute(<span class="string">"cart"</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 判断购物车里面有没有该商品</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(name))&#123;</span><br><span class="line"><span class="comment">//在原来的值基础上  + 1 </span></span><br><span class="line">map.put(name, map.get(name) + <span class="number">1</span> );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有购买过该商品，当前数量为1 。</span></span><br><span class="line">map.put(name, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 输出界面。（跳转）</span></span><br><span class="line">response.getWriter().write(<span class="string">"&lt;a href='product_list.jsp'&gt;&lt;h3&gt;继续购物&lt;/h3&gt;&lt;/a&gt;&lt;br&gt;"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;a href='cart.jsp'&gt;&lt;h3&gt;去购物车结算&lt;/h3&gt;&lt;/a&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="移除Session中的元素"><a href="#移除Session中的元素" class="headerlink" title="移除Session中的元素"></a>移除Session中的元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制干掉会话，里面存放的任何数据就都没有了。</span></span><br><span class="line">session.invalidate();</span><br><span class="line"><span class="comment">//从session中移除某一个数据</span></span><br><span class="line">session.removeAttribute(<span class="string">"cart"</span>);</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>请求转发和重定向（面试经常问。）</li></ul><ul><li><p>Cookie</p><p>  服务器给客户端发送一小份数据， 存放在客户端上。</p><p>  基本用法：</p><pre><code>添加cookie获取cookie。</code></pre><p>  演练例子：</p><pre><code>1. 获取上一次访问时间2. 获取商品浏览记录。</code></pre></li><li><p>什么时候有cookie</p><p>  response.addCookie(new Cookie())</p></li><li><p>Cookie 分类</p><pre><code>会话Cookie    关闭浏览器，就失效持久cookie    存放在客户端上。 在指定的期限内有效。     setMaxAge();</code></pre></li></ul><ul><li><p>Session</p><pre><code>也是基于cookie的一种会话技术，  数据存放存放在服务器端会在cookie里面添加一个字段 JSESSIONID . 是tomcat服务器生成。 setAttribute 存数据getAttribute 取数据removeAttribute  移除数据getSessionId();  获取会话idinvalidate() 强制让会话失效。</code></pre></li><li><p>创建和销毁</p></li></ul><p>&emsp;&emsp;调用request.getSesion创建<br>&emsp;&emsp;销毁：服务器关闭 ， 会话超时（30分钟）</p><p>&emsp;&emsp;setAttribute 存放的值，在浏览器关闭后还有！，就算客户端把电脑砸了也还有。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器和eclipse部署Web应用</title>
      <link href="/2019/12/02/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ceclipse%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/"/>
      <url>/2019/12/02/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ceclipse%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载和安装Tomcat"><a href="#一、下载和安装Tomcat" class="headerlink" title="一、下载和安装Tomcat"></a>一、下载和安装Tomcat</h2><p>&emsp;&emsp;官方站点：<a href="http://tomcat.apache.org/index.html" target="_blank" rel="noopener">http://tomcat.apache.org/index.html</a> 获取Tomcat安装程序包.</p><p>&emsp;&emsp;tar.gz文件是Linux操作系统下的压缩版本，解压到一个非中文、无空格目录即可。zip文件也是压缩版本，可用于Linux和Windows，解压到一个非中文、无空格目录即可。exe文件是Windows系统下的安装版本，双击运行按照向导进行安装。无论是解压还是安装的，都需要配置JAVA_HOME环境变量，该变量的值是JDK的安装目录</p><h3 id="Tomcat目录结构："><a href="#Tomcat目录结构：" class="headerlink" title="Tomcat目录结构："></a>Tomcat目录结构：</h3><p><img src="https://i.loli.net/2019/12/02/zl1KSnZYO8PHJyo.png" alt="" title="tomcat目录结构"></p><h2 id="二、eclipse下部署Web应用"><a href="#二、eclipse下部署Web应用" class="headerlink" title="二、eclipse下部署Web应用"></a>二、eclipse下部署Web应用</h2><p>步骤：<br>&emsp;&emsp;1.创建Runtime：开发WEB应用之前，必须要创建一个Runtime。Runtime并不是JRE，而是指WEB应用在开发的时候使用的应用服务器（如Tomcat等）。<br>&emsp;&emsp;操作流程：Window——&gt;Preferences——&gt;Server——&gt;Runtime Environment ，Add对应的Tomcat版本，next， 将Tomcat的安装根路径加进来，选上自己的jdk版本，然后Finish完成。</p><p>&emsp;&emsp;2.创建Server：创建了Runtime，只是说明开发时使用的WEB应用运行时环境。在这个环境的基础上，eclipse要托管服务器，才能真正在eclipse里面集成开发。eclipse底下的server窗口将Tomcat托管上。</p><p>&emsp;&emsp;3.创建web项目：File——&gt;New——&gt;Dynamic Web Object,</p><p><img src="https://i.loli.net/2019/12/02/oQpvJDX6x8lF5C7.png" alt="" title="创建web项目"></p><p>&emsp;&emsp;4.部署WEB应用:<br>&emsp;<img src="https://i.loli.net/2019/12/02/TjsVe1LUWa6DP2I.png" alt="" title="部署WEB应用"><br>&emsp;<img src="https://i.loli.net/2019/12/02/n4TjLsMKaF9812q.png" alt="" title="部署WEB应用过程成功"><br><br><br>&emsp;&emsp;5.运行WEB应用：项目run on server<br><br></p><h3 id="web工程目录结构："><a href="#web工程目录结构：" class="headerlink" title="web工程目录结构："></a>web工程目录结构：</h3><p><img src="https://i.loli.net/2019/12/02/RIpTjkMYF9hAPlv.png" alt="" title="web工程目录结构"></p><h3 id="部署war包到Tomcat"><a href="#部署war包到Tomcat" class="headerlink" title="部署war包到Tomcat"></a>部署war包到Tomcat</h3><p>&emsp;&emsp;war文件：war表示一个WEB应用压缩包。是一个可直接运行的web模块，通常用于网站，将其打成包部署到容器中。以Tomcat来说，将war包放在其\webapps\目录下，然后启动Tomcat，这个包就自动解压，相当于发布项目。直接可以用eclipse导出war file<br>&emsp;&emsp;1.一般是开发打war包给测试，比如说现在测试拿到一个war包，名字叫Servlet01.war。<br>&emsp;&emsp;2.打开Tomcat的安装路径，假设是“D:\Tomcat\apache-tomcat-7.0.68”，进入到其webapps文件夹中，把 Servlet01.war放到 webapps文件夹。<br>&emsp;&emsp;3.启动Tomcat。（双击Tomcat-bin-startup.bat）<br>&emsp;&emsp;4.在浏览器输入“http:localhost:tomcat_port/Servlet01即可打开Servlet01项目的 index.html页面（port是tomcat的端口号）。如果Servlet01项目没有index.html页面，那就需要打开其他相应的页面。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web应用程序与Web服务器</title>
      <link href="/2019/12/01/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8EWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/12/01/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8EWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、web应用程序"><a href="#一、web应用程序" class="headerlink" title="一、web应用程序"></a>一、web应用程序</h2><p>&emsp;&emsp;应用程序可以基于2种不同的模式下开发，一种是CS架构，一种是BS架构。CS架构就是Client/Server，用户必须装客户端程序才能使用，Office，WPS,QQ就是基于CS架构的应用，也叫桌面应用程序。BS架构就是Browser/Server,用户只要有浏览器就行。像淘宝，京东，微博等的就是基于BS架构的应用程序，也叫web应用程序。</p><h2 id="二、应用程序优缺点"><a href="#二、应用程序优缺点" class="headerlink" title="二、应用程序优缺点"></a>二、应用程序优缺点</h2><h3 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h3><p>优点:                         </p><blockquote><p>1.交互性强。<br>2.具有安全的存取模式。<br>3.网络通信量低。<br>4.响应速度快。<br>5.利于处理大量数据。</p></blockquote><p>缺点:</p><blockquote><p>1.需要专门的客户端安装程序。<br>2.兼容性差。<br>3.开发、维护成本较高。<br>4.用户群固定。</p></blockquote><h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><p>优点:                         </p><blockquote><p>1.只要有网络、有浏览器就行。<br>2.业务扩展简单方便，通过增加网页即可增加服务器功能。<br>3.维护简单方便。<br>4.开发简单，共享性强。</p></blockquote><p>缺点:</p><blockquote><p>1.无法实现具有个性化的功能要求。<br>2.不同的浏览器可能体验不同。<br>3.客户端服务器端的交互是请求-响应模式，通常动态刷新页面，响应速度明显降低<br>4.在速度和安全性上需要花费巨大的设计成本。</p></blockquote><h2 id="三、Web应用程序开发的相关知识"><a href="#三、Web应用程序开发的相关知识" class="headerlink" title="三、Web应用程序开发的相关知识"></a>三、Web应用程序开发的相关知识</h2><p>&emsp;&emsp;Web表示是网页，它是Internet上供外界访问的资源。Web资源分为静态web资源和动态web资源，也称静态网页和动态网页。像servlet/jsp可用来做动态网页</p><p>&emsp;&emsp;JavaWeb就是用Java技术来解决相关web互联网领域的技术总和。</p><p>&emsp;&emsp;http协议：HTTP是HyperText Transfer Protocal(超文本传输协议)的简写，它是TCP/IP协议的一个应用层协议，用于定义WEB浏览器与WEB服务器之间交换数据的规则。</p><p>&emsp;&emsp;Servlet：Servlet是sun公司提供的一门用于开发动态web资源的技术，同时它也是JSP技术的底层运行基础。Servlet是平台独立的Java类，编写一个Servlet，实际上就是按照Servlet规范编写一个Java类。一句话，Servlet是一个Java类。</p><h2 id="四、Web服务器"><a href="#四、Web服务器" class="headerlink" title="四、Web服务器"></a>四、Web服务器</h2><h3 id="浏览器与服务器之间的交互示意图"><a href="#浏览器与服务器之间的交互示意图" class="headerlink" title="浏览器与服务器之间的交互示意图"></a>浏览器与服务器之间的交互示意图</h3><pre><code>             请求              解析请求消息浏览器  -----------&gt;  服务器  -------------&gt; 接收并处理请求（servlet）       &lt;-----------             &lt;-------------       返回消息             生成响应消息</code></pre><p>&emsp;&emsp;服务器是一个程序，用来接收用户的请求，获取用户传递的参数，将数据以及页面资源返回给用户。只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。</p><blockquote><p>HTTP协议传输数据时会自动将用户数据打成一个http数据包，发送到服务器，服务器根据http协议将数据包解开，获取数据，做相应的处理，并将处理结果再次打成http数据包返回客户端，浏览器解开http数据包，显示数据。</p></blockquote><p>&emsp;&emsp;JavaWeb服务器是一个不完整的JavaEE服务器，JAVA EE服务器完全实现JAVA EE标准。JavaWEB服务器主要是包含了Servlet/JSP、JNDI等基本规范的实现。开发中常用的服务器有：Tomcat、Resin、Jetty。</p><p>&emsp;&emsp;Servlet容器（Tomcat）主要为JavaWeb应用提供运行时环境，所以也可以称为JavaWeb应用容器，或者Servlet/JSP容器。Servlet容器主要负责管Servlet、JSP的生命周期以及它们的共享数据。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
