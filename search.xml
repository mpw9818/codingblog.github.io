<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cookie (重要)</title>
      <link href="/2019/12/05/Cookie/"/>
      <url>/2019/12/05/Cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要有这个Cookie"><a href="#为什么要有这个Cookie" class="headerlink" title="为什么要有这个Cookie"></a>为什么要有这个Cookie</h2><p>&emsp;&emsp;Cookies应用场景:自动登录、浏览记录、购物车。</p><blockquote><p>http的请求是无状态。 客户端(浏览器)与服务器在通讯的时候，是无状态的，其实就是客户端在第二次来访的时候，服务器不知道这个客户端以前有没有来访问过，不能在多个请求之间共享信息(通过Cookie和Session解决);Cookies是Web服务器发送到浏览器的简短文本信息，以后在访问同一个Web站点或域时浏览器就会毫无更改地返回该文本信息至服务器。用户可以决定是否接受Cookie。（数据存储在本地磁盘，降低服务器压力）每个站点，浏览器通常只接受20条Cookie,总共接受300条，以及每条Cookie限制为4KB。</p></blockquote><h2 id="cookie服务器与浏览器交流的过程："><a href="#cookie服务器与浏览器交流的过程：" class="headerlink" title="cookie服务器与浏览器交流的过程："></a>cookie服务器与浏览器交流的过程：</h2><p>&emsp;&emsp;<b>1.服务器返回的响应头中包含Set-Cookie响应头，浏览器把该响应头中的内容以key-value对的方式保存。</b></p><p>&emsp;&emsp;1.1.服务端创建一个Cookie对象  – new Cookie（“名字”，“值”）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String  loginName = request.getParameter(<span class="string">"loginName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, URLEncoder.encode(loginName, <span class="string">"utf-8"</span>);<span class="comment">// URLEncoder.encode()为了防止loginName输入的是中文导致发生一些问题。</span></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);<span class="comment">// 指定cookie的存活时间，单位是秒</span></span><br><span class="line">cookie.setPath(request.getContextPath);<span class="comment">// 设置作用域，说明该cookie是属于哪个项目的。必须指定&amp;emsp;request.getContextPath获取当前的项目名。</span></span><br></pre></td></tr></table></figure><p>浏览器中存在很多cookie的，不同的页面存放了不同的cookie,且cookie跟浏览器有关，谷歌该项目的cookie和其他浏览器中该项目的cookie是不同的，你在谷歌中访问了项目，该cookie是属于谷歌浏览器的，你用另一个浏览器访问该项目，是不存在该cookie的。</p><p>&emsp;&emsp;1.2.把Cookie对象使用addCookie方法把Cookie添加到响应对象中,增加一个Set-Cookie响应头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);<span class="comment">//&lt;font color = "red"&gt; 将cookie响应到浏览器&lt;/font&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<b>2.浏览器再次访问服务器的时候，如果有该服务器对应的cookie，则把cookie读取出来，放到Cookie请求头中。</b><br>&emsp;&emsp;2.1.检查有没有当前服务器对应的Cookie.<br>&emsp;&emsp;2.2.如果有，读取Cookie以键值对的方式在请求头中发送到服务器，增加一个Cookie请求头</p><h2 id="Cookie的有效期-setMaxAge"><a href="#Cookie的有效期-setMaxAge" class="headerlink" title="Cookie的有效期:setMaxAge"></a>Cookie的有效期:setMaxAge</h2><p>//关闭浏览器后，cookie就没有了。 —&gt; 针对没有设置cookie的有效期，默认值是 -1<br>//    expiry： 有效 以秒计算。<br>//正值 ： 表示 在这个数字过后，cookie将会失效。<br>//负值： 关闭浏览器，那么cookie就失效， 默认值是 -1<br>//0：表示cookie马上失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">```</span><br><span class="line">&gt;<span class="comment">//赋值新的值</span></span><br><span class="line">```java</span><br><span class="line">cookie.setValue(newValue);</span><br><span class="line"><span class="comment">//只有访问cookieDemo应用下的请求才会带cookie</span></span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo"</span>);</span><br><span class="line"><span class="comment">//同一应用服务器内共享方法：设置cookie.setPath("/");</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Get/Post请求中文乱码问题</title>
      <link href="/2019/12/04/%E8%A7%A3%E5%86%B3GetPost%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/04/%E8%A7%A3%E5%86%B3GetPost%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="给服务器设置编码"><a href="#给服务器设置编码" class="headerlink" title="给服务器设置编码"></a>给服务器设置编码</h2><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><p>&emsp;&emsp;在url地址栏输入回车是get请求，form表单不写method=”post”,默认就是get请求。<br>&emsp;&emsp;get请求过来的数据，在url地址栏上就已经经过编码了，所以我们取到的就是乱码。<font color="red">Tomcat8.0之前</font>，用get请求访问tomcat时的编码方式，默认的编码方式使用ISO-8859-1。<br>&emsp;&emsp;解决方式：<br>&emsp;&emsp;1.先让文字回到ISO-8859-1对应的字节数组，然后再按utf-8组拼字符串，</p><blockquote><p>String name = new String(request.getParameter(“name”).getBytes(“ISO-8859-1”),”utf-8”)</p></blockquote><p>&emsp;&emsp;2.在Tomcat配置文件server.xml中添加URIEncoding=”utf-8”,但是一般不用.定位到 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector connectionTimeout=<span class="string">"20000"</span> port=<span class="string">"8080"</span> protocol=<span class="string">"HTTP/1.1"</span> redirectPort=<span class="string">"8443"</span> URIEncoding=<span class="string">"utf-8"</span>/&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<font color="green">从tomcat8.0开始，用get请求访问tomcat时的编码方式不再是ISO-8859-1，而变成了UTF-8 所有Tomcat8.0不用处理get请求乱码问题</font></p><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p>&emsp;&emsp;是以二进制流的形式发送到的服务器。服务器收到数据后。默认以iso-8859-1进行编码。<br>&emsp;&emsp;解决方式：<br>&emsp;&emsp;1.<font color="red">这种方法必须获取请求参数之前调用</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">//设置请求体里面的文字编码</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(request.getParameter(<span class="string">"参数名"</span>).getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><h2 id="给浏览器设置编码-常用"><a href="#给浏览器设置编码-常用" class="headerlink" title="给浏览器设置编码 (常用)"></a>给浏览器设置编码 (常用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); <span class="comment">//(UTF-8是国际通用编码)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Get/Post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie详细笔记</title>
      <link href="/2019/12/02/Cookie%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/02/Cookie%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="中文文件下载"><a href="#中文文件下载" class="headerlink" title="中文文件下载"></a>中文文件下载</h2><p>针对浏览器类型，对文件名字做编码处理 Firefox (Base64) , IE、Chrome … 使用的是URLEncoder,如果文件的名字带有中文，那么需要对这个文件名进行编码处理.如果是IE，或者 Chrome（谷歌浏览器） ，使用URLEncoding 编码.如果是Firefox ，使用Base64编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取来访的客户端类型</span></span><br><span class="line">String clientType = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line"><span class="keyword">if</span>(clientType.contains(<span class="string">"Firefox"</span>))&#123;</span><br><span class="line">   fileName = DownLoadUtil.base64EncodeFileName(fileName);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//IE ，或者  Chrome （谷歌浏览器） ，</span></span><br><span class="line"><span class="comment">//对中文的名字进行编码处理</span></span><br><span class="line">fileName = URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>之前的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"login_success.html"</span>);*/</span><br><span class="line">```</span><br><span class="line"><span class="comment">//重定向写法： 重新定位方向 参数即跳转的位置</span></span><br><span class="line">```java</span><br><span class="line">response.sendRedirect(<span class="string">"login_success.html"</span>);</span><br></pre></td></tr></table></figure><ol><li>地址上显示的是最后的那个资源的路径地址</li><li>请求次数最少有两次， 服务器在第一次请求后，会返回302 以及一个地址， 浏览器在根据这个地址，执行第二次访问。</li><li>可以跳转到任意路径。 不是自己的工程也可以跳。</li><li>效率稍微低一点， 执行两次请求。 </li><li>后续的请求，没法使用上一次的request存储的数据，或者 没法使用上一次的request对象，因为这是两次不同的请求。</li></ol><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>&emsp;&emsp;//请求转发的写法： 参数即跳转的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"login_success.html"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><ol><li>地址上显示的是请求servlet的地址。  返回200 ok</li><li>请求次数只有一次， 因为是服务器内部帮客户端执行了后续的工作。 </li><li>只能跳转自己项目的资源路径 。  </li><li>效率上稍微高一点，因为只执行一次请求。 </li><li>可以使用上一次的request对象。 </li></ol><p><img src="https://i.loli.net/2019/12/05/DmXCUwJ4osTv1hA.png" alt="" title="请求转发"></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>饼干. 其实是一份小数据， 是服务器给客户端，并且存储在客户端上的一份小数据</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>自动登录、浏览记录、购物车。</p></blockquote><h3 id="为什么要有这个Cookie"><a href="#为什么要有这个Cookie" class="headerlink" title="为什么要有这个Cookie"></a>为什么要有这个Cookie</h3><blockquote><p>http的请求是无状态。 客户端与服务器在通讯的时候，是无状态的，其实就是客户端在第二次来访的时候，服务器根本就不知道这个客户端以前有没有来访问过。 为了更好的用户体验，更好的交互 [自动登录]，其实从公司层面讲，就是为了更好的收集用户习惯[大数据]</p></blockquote><h3 id="Cookie怎么用"><a href="#Cookie怎么用" class="headerlink" title="Cookie怎么用"></a>Cookie怎么用</h3><h4 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h4><ul><li>添加Cookie给客户端</li></ul><p>&emsp;&emsp;1. 在响应的时候，添加cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line"><span class="comment">//给响应，添加一个cookie</span></span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2. 客户端收到的信息里面，响应头中多了一个字段 Set-Cookie</p><p><img src="https://i.loli.net/2019/12/05/vcWpTPLh65EQurD.png" alt="" title="Set-Cookie"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端带过来的cookie</span></span><br><span class="line"></span><br><span class="line"> Cookie[] cookies = request.getCookies();</span><br><span class="line">  <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">String cookieName = c.getName();</span><br><span class="line">String cookieValue = c.getValue();</span><br><span class="line">System.out.println(cookieName + <span class="string">" = "</span>+ cookieValue);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>常用方法</li></ul><blockquote><p>//关闭浏览器后，cookie就没有了。 —&gt; 针对没有设置cookie的有效期。<br>        //    expiry： 有效 以秒计算。<br>        //正值 ： 表示 在这个数字过后，cookie将会失效。<br>        //负值： 关闭浏览器，那么cookie就失效， 默认值是 -1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">cookie.setValue(newValue);<span class="comment">//赋值新的值</span></span><br><span class="line"></span><br><span class="line">cookie.setDomain(<span class="string">".itheima.com"</span>);<span class="comment">//用于指定只有请求了指定的域名，才会带上该cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo"</span>);<span class="comment">//只有访问该域名下的cookieDemo的这个路径地址才会带cookie</span></span><br></pre></td></tr></table></figure><h2 id="例子一-显示最近访问的时间。"><a href="#例子一-显示最近访问的时间。" class="headerlink" title="例子一 显示最近访问的时间。"></a>例子一 显示最近访问的时间。</h2><ol><li>判断账号是否正确</li><li>如果正确，则获取cookie。 但是得到的cookie是一个数组， 我们要从数组里面找到我们想要的对象。</li><li>如果找到的对象为空，表明是第一次登录。那么要添加cookie</li><li>如果找到的对象不为空， 表明不是第一次登录。 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line"><span class="comment">//获取cookie last-name --- &gt;</span></span><br><span class="line">Cookie [] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//从数组里面找出我们想要的cookie</span></span><br><span class="line">Cookie cookie = CookieUtil.findCookie(cookies, <span class="string">"last"</span>);<span class="comment">//是第一次登录，没有cookie</span></span><br><span class="line"><span class="keyword">if</span>(cookie == <span class="keyword">null</span>)&#123;</span><br><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"last"</span>, System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//一个小时</span></span><br><span class="line">response.addCookie(c);</span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//1. 去以前的cookie第二次登录，有cookie</span></span><br><span class="line"><span class="keyword">long</span> lastVisitTime = Long.parseLong(cookie.getValue());</span><br><span class="line"><span class="comment">//2. 输出到界面，</span></span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName +<span class="string">",上次来访时间是："</span>+<span class="keyword">new</span> Date(lastVisitTime));</span><br><span class="line">    <span class="comment">//3. 重置登录的时间</span></span><br><span class="line">cookie.setValue(System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">response.getWriter().write(<span class="string">"登陆失败 "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子二：-显示商品浏览记录。"><a href="#例子二：-显示商品浏览记录。" class="headerlink" title="例子二： 显示商品浏览记录。"></a>例子二： 显示商品浏览记录。</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>拷贝基础课第一天的 htmll原型文件，到工程的WebContent里面。</li><li>在WebContent目录下新建一个jsp文件， product_list.jsp, 然后拷贝原来product_list.html的内容到jsp里面。 建好之后，jsp里面的所有ISO-8859-1 改成 UTF-8。拷贝html标签的所有内容。 替换jsp的html标签即可</li><li>修改product_info.htm里面的手机数码超链接地址<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"product_list.jsp"</span>&gt;</span>手机数码<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改首页(index.html)顶部的手机数码跳转的位置为 product_list.jsp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"product_list.jsp"</span>&gt;</span>手机数码<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2019/12/05/lfPwVducrURJzCQ.png" alt="" title="显示商品浏览记录分析"></p><h3 id="Jsp-里面使用Java代码"><a href="#Jsp-里面使用Java代码" class="headerlink" title="Jsp 里面使用Java代码"></a>Jsp 里面使用Java代码</h3><p>jsp</p><p> Java Server Pager —&gt; 最终会翻译成一个类， 就是一个Servlet</p><p>定义全局变量<br>&lt;%! int a = 99; %&gt;</p><p>定义局部变量<br>&lt;% int b = 999; %&gt;</p><p>在jsp页面上，显示 a 和 b的值，<br>    &lt;%=a %&gt;<br>    &lt;%=b %&gt;</p><h3 id="jsp显示浏览记录"><a href="#jsp显示浏览记录" class="headerlink" title="jsp显示浏览记录"></a>jsp显示浏览记录</h3><p><img src="https://i.loli.net/2019/12/05/C7RZEcyp3i1WzJ8.png" alt="" title="jsp显示浏览记录"></p><h3 id="清除浏览记录"><a href="#清除浏览记录" class="headerlink" title="清除浏览记录"></a>清除浏览记录</h3><p> 其实就是清除Cookie， 删除cookie是没有什么delete方法的。只有设置maxAge 为0 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"history"</span>,<span class="string">""</span>);</span><br><span class="line">cookie.setMaxAge(<span class="number">0</span>); <span class="comment">//设置立即删除</span></span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo02"</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><h3 id="Cookie总结"><a href="#Cookie总结" class="headerlink" title="Cookie总结"></a>Cookie总结</h3><ol><li><p>服务器给客户端发送过来的一小份数据，并且存放在客户端上。</p></li><li><p>获取cookie， 添加cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getCookie();</span><br><span class="line">response.addCookie();</span><br></pre></td></tr></table></figure></li><li><p>Cookie分类</p></li></ol><p>会话Cookie<br>&emsp;&emsp;默认情况下，关闭了浏览器，那么cookie就会消失。</p><p>持久Cookie<br>&emsp;&emsp;在一定时间内，都有效，并且会保存在客户端上。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>); <span class="comment">//设置立即删除</span></span><br><span class="line">cookie.setMaxAge(<span class="number">100</span>); <span class="comment">//100 秒</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Cookie的安全问题。<blockquote><p>由于Cookie会保存在客户端上，所以有安全隐患问题。  还有一个问题， Cookie的大小与个数有限制。 为了解决这个问题 —&gt; Session .</p></blockquote></li></ol><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><blockquote><p>会话 ， Session是基于Cookie的一种会话机制。 Cookie是服务器返回一小份数据给客户端，并且存放在客户端上。 Session是，数据存放在服务器端。</p></blockquote><blockquote><p>常用API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到会话ID</span></span><br><span class="line">String id = session.getId();</span><br><span class="line"><span class="comment">//存值</span></span><br><span class="line">session.setAttribute(name, value);</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line">session.getAttribute(name);</span><br><span class="line"><span class="comment">//移除值</span></span><br><span class="line">session.removeAttribute(name);</span><br></pre></td></tr></table></figure><ul><li>Session何时创建  ， 何时销毁?</li></ul><p>创建:</p><blockquote><p>如果有在servlet里面调用了 request.getSession()</p></blockquote><p>销毁:</p><blockquote><ol><li>关闭服务器</li><li>session会话时间过期。 有效期过了，默认有效期： 30分钟。</li></ol></blockquote><p>session 是存放在服务器的内存中的一份数据。 当然可以持久化. Redis . 即使关了浏览器，session也不会销毁。</p><h2 id="例子三：-简单购物车。"><a href="#例子三：-简单购物车。" class="headerlink" title="例子三： 简单购物车。"></a>例子三： 简单购物车。</h2><p><img src="https://i.loli.net/2019/12/05/JP9wYZguOp1UbqM.png" alt="icon" title="简单购物车"></p><h3 id="CartServlet-代码"><a href="#CartServlet-代码" class="headerlink" title="CartServlet 代码"></a>CartServlet 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//1. 获取要添加到购物车的商品id</span></span><br><span class="line"><span class="keyword">int</span> id = Integer.parseInt(request.getParameter(<span class="string">"id"</span>)); <span class="comment">// 0 - 1- 2 -3 -4 </span></span><br><span class="line">String [] names = &#123;<span class="string">"Iphone7"</span>,<span class="string">"小米6"</span>,<span class="string">"三星Note8"</span>,<span class="string">"魅族7"</span> , <span class="string">"华为9"</span>&#125;;</span><br><span class="line"><span class="comment">//取到id对应的商品名称</span></span><br><span class="line">String name = names[id];</span><br><span class="line"><span class="comment">//2. 获取购物车存放东西的session  Map&lt;String , Integer&gt;  iphoen7 3</span></span><br><span class="line"><span class="comment">//把一个map对象存放到session里面去，并且保证只存一次。 </span></span><br><span class="line">Map&lt;String, Integer&gt; map = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"><span class="comment">//session里面没有存放过任何东西。</span></span><br><span class="line"><span class="keyword">if</span>(map == <span class="keyword">null</span>)&#123;</span><br><span class="line">map = <span class="keyword">new</span> LinkedHashMap&lt;String , Integer&gt;();</span><br><span class="line">request.getSession().setAttribute(<span class="string">"cart"</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 判断购物车里面有没有该商品</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(name))&#123;</span><br><span class="line"><span class="comment">//在原来的值基础上  + 1 </span></span><br><span class="line">map.put(name, map.get(name) + <span class="number">1</span> );</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有购买过该商品，当前数量为1 。</span></span><br><span class="line">map.put(name, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 输出界面。（跳转）</span></span><br><span class="line">response.getWriter().write(<span class="string">"&lt;a href='product_list.jsp'&gt;&lt;h3&gt;继续购物&lt;/h3&gt;&lt;/a&gt;&lt;br&gt;"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;a href='cart.jsp'&gt;&lt;h3&gt;去购物车结算&lt;/h3&gt;&lt;/a&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="移除Session中的元素"><a href="#移除Session中的元素" class="headerlink" title="移除Session中的元素"></a>移除Session中的元素</h2><pre><code>//强制干掉会话，里面存放的任何数据就都没有了。session.invalidate();//从session中移除某一个数据//session.removeAttribute(&quot;cart&quot;);</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>请求转发和重定向（面试经常问。）</li></ul><ul><li><p>Cookie</p><p>  服务器给客户端发送一小份数据， 存放在客户端上。</p><p>  基本用法：</p><pre><code>添加cookie获取cookie。</code></pre><p>  演练例子：</p><pre><code>1. 获取上一次访问时间2. 获取商品浏览记录。</code></pre></li><li><p>什么时候有cookie</p><p>  response.addCookie(new Cookie())</p></li><li><p>Cookie 分类</p><pre><code>会话Cookie    关闭浏览器，就失效持久cookie    存放在客户端上。 在指定的期限内有效。     setMaxAge();</code></pre></li></ul><ul><li><p>Session</p><pre><code>也是基于cookie的一种会话技术，  数据存放存放在服务器端会在cookie里面添加一个字段 JSESSIONID . 是tomcat服务器生成。 setAttribute 存数据getAttribute 取数据removeAttribute  移除数据getSessionId();  获取会话idinvalidate() 强制让会话失效。</code></pre></li><li><p>创建和销毁</p></li></ul><p>&emsp;&emsp;调用request.getSesion创建<br>&emsp;&emsp;销毁：服务器关闭 ， 会话超时（30分钟）</p><p>&emsp;&emsp;setAttribute 存放的值，在浏览器关闭后还有！，就算客户端把电脑砸了也还有。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器和eclipse部署Web应用</title>
      <link href="/2019/12/02/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ceclipse%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/"/>
      <url>/2019/12/02/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ceclipse%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载和安装Tomcat"><a href="#一、下载和安装Tomcat" class="headerlink" title="一、下载和安装Tomcat"></a>一、下载和安装Tomcat</h2><p>&emsp;&emsp;官方站点：<a href="http://tomcat.apache.org/index.html" target="_blank" rel="noopener">http://tomcat.apache.org/index.html</a> 获取Tomcat安装程序包.</p><p>&emsp;&emsp;tar.gz文件是Linux操作系统下的压缩版本，解压到一个非中文、无空格目录即可。zip文件也是压缩版本，可用于Linux和Windows，解压到一个非中文、无空格目录即可。exe文件是Windows系统下的安装版本，双击运行按照向导进行安装。无论是解压还是安装的，都需要配置JAVA_HOME环境变量，该变量的值是JDK的安装目录</p><h3 id="Tomcat目录结构："><a href="#Tomcat目录结构：" class="headerlink" title="Tomcat目录结构："></a>Tomcat目录结构：</h3><p><img src="https://i.loli.net/2019/12/02/zl1KSnZYO8PHJyo.png" alt="" title="tomcat目录结构"></p><h2 id="二、eclipse下部署Web应用"><a href="#二、eclipse下部署Web应用" class="headerlink" title="二、eclipse下部署Web应用"></a>二、eclipse下部署Web应用</h2><p>步骤：<br>&emsp;&emsp;1.创建Runtime：开发WEB应用之前，必须要创建一个Runtime。Runtime并不是JRE，而是指WEB应用在开发的时候使用的应用服务器（如Tomcat等）。<br>&emsp;&emsp;操作流程：Window——&gt;Preferences——&gt;Server——&gt;Runtime Environment ，Add对应的Tomcat版本，next， 将Tomcat的安装根路径加进来，选上自己的jdk版本，然后Finish完成。</p><p>&emsp;&emsp;2.创建Server：创建了Runtime，只是说明开发时使用的WEB应用运行时环境。在这个环境的基础上，eclipse要托管服务器，才能真正在eclipse里面集成开发。eclipse底下的server窗口将Tomcat托管上。</p><p>&emsp;&emsp;3.创建web项目：File——&gt;New——&gt;Dynamic Web Object,</p><p><img src="https://i.loli.net/2019/12/02/oQpvJDX6x8lF5C7.png" alt="" title="创建web项目"></p><p>&emsp;&emsp;4.部署WEB应用:<br>&emsp;<img src="https://i.loli.net/2019/12/02/TjsVe1LUWa6DP2I.png" alt="" title="部署WEB应用"><br>&emsp;<img src="https://i.loli.net/2019/12/02/n4TjLsMKaF9812q.png" alt="" title="部署WEB应用过程成功"><br><br><br>&emsp;&emsp;5.运行WEB应用：项目run on server<br><br></p><h3 id="web工程目录结构："><a href="#web工程目录结构：" class="headerlink" title="web工程目录结构："></a>web工程目录结构：</h3><p><img src="https://i.loli.net/2019/12/02/RIpTjkMYF9hAPlv.png" alt="" title="web工程目录结构"></p><h3 id="部署war包到Tomcat"><a href="#部署war包到Tomcat" class="headerlink" title="部署war包到Tomcat"></a>部署war包到Tomcat</h3><p>&emsp;&emsp;war文件：war表示一个WEB应用压缩包。是一个可直接运行的web模块，通常用于网站，将其打成包部署到容器中。以Tomcat来说，将war包放在其\webapps\目录下，然后启动Tomcat，这个包就自动解压，相当于发布项目。直接可以用eclipse导出war file<br>&emsp;&emsp;1.一般是开发打war包给测试，比如说现在测试拿到一个war包，名字叫Servlet01.war。<br>&emsp;&emsp;2.打开Tomcat的安装路径，假设是“D:\Tomcat\apache-tomcat-7.0.68”，进入到其webapps文件夹中，把 Servlet01.war放到 webapps文件夹。<br>&emsp;&emsp;3.启动Tomcat。（双击Tomcat-bin-startup.bat）<br>&emsp;&emsp;4.在浏览器输入“http:localhost:tomcat_port/Servlet01即可打开Servlet01项目的 index.html页面（port是tomcat的端口号）。如果Servlet01项目没有index.html页面，那就需要打开其他相应的页面。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web应用程序与Web服务器</title>
      <link href="/2019/12/01/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8EWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/12/01/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8EWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、web应用程序"><a href="#一、web应用程序" class="headerlink" title="一、web应用程序"></a>一、web应用程序</h2><p>&emsp;&emsp;应用程序可以基于2种不同的模式下开发，一种是CS架构，一种是BS架构。CS架构就是Client/Server，用户必须装客户端程序才能使用，Office，WPS,QQ就是基于CS架构的应用，也叫桌面应用程序。BS架构就是Browser/Server,用户只要有浏览器就行。像淘宝，京东，微博等的就是基于BS架构的应用程序，也叫web应用程序。</p><h2 id="二、应用程序优缺点"><a href="#二、应用程序优缺点" class="headerlink" title="二、应用程序优缺点"></a>二、应用程序优缺点</h2><h3 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h3><p>优点:                         </p><blockquote><p>1.交互性强。<br>2.具有安全的存取模式。<br>3.网络通信量低。<br>4.响应速度快。<br>5.利于处理大量数据。</p></blockquote><p>缺点:</p><blockquote><p>1.需要专门的客户端安装程序。<br>2.兼容性差。<br>3.开发、维护成本较高。<br>4.用户群固定。</p></blockquote><h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><p>优点:                         </p><blockquote><p>1.只要有网络、有浏览器就行。<br>2.业务扩展简单方便，通过增加网页即可增加服务器功能。<br>3.维护简单方便。<br>4.开发简单，共享性强。</p></blockquote><p>缺点:</p><blockquote><p>1.无法实现具有个性化的功能要求。<br>2.不同的浏览器可能体验不同。<br>3.客户端服务器端的交互是请求-响应模式，通常动态刷新页面，响应速度明显降低<br>4.在速度和安全性上需要花费巨大的设计成本。</p></blockquote><h2 id="三、Web应用程序开发的相关知识"><a href="#三、Web应用程序开发的相关知识" class="headerlink" title="三、Web应用程序开发的相关知识"></a>三、Web应用程序开发的相关知识</h2><p>&emsp;&emsp;Web表示是网页，它是Internet上供外界访问的资源。Web资源分为静态web资源和动态web资源，也称静态网页和动态网页。像servlet/jsp可用来做动态网页</p><p>&emsp;&emsp;JavaWeb就是用Java技术来解决相关web互联网领域的技术总和。</p><p>&emsp;&emsp;http协议：HTTP是HyperText Transfer Protocal(超文本传输协议)的简写，它是TCP/IP协议的一个应用层协议，用于定义WEB浏览器与WEB服务器之间交换数据的规则。</p><p>&emsp;&emsp;Servlet：Servlet是sun公司提供的一门用于开发动态web资源的技术，同时它也是JSP技术的底层运行基础。Servlet是平台独立的Java类，编写一个Servlet，实际上就是按照Servlet规范编写一个Java类。一句话，Servlet是一个Java类。</p><h2 id="四、Web服务器"><a href="#四、Web服务器" class="headerlink" title="四、Web服务器"></a>四、Web服务器</h2><h3 id="浏览器与服务器之间的交互示意图"><a href="#浏览器与服务器之间的交互示意图" class="headerlink" title="浏览器与服务器之间的交互示意图"></a>浏览器与服务器之间的交互示意图</h3><pre><code>             请求              解析请求消息浏览器  -----------&gt;  服务器  -------------&gt; 接收并处理请求（servlet）       &lt;-----------             &lt;-------------       返回消息             生成响应消息</code></pre><p>&emsp;&emsp;服务器是一个程序，用来接收用户的请求，获取用户传递的参数，将数据以及页面资源返回给用户。只有当Internet上运行在其他计算机中的浏览器发出请求时，服务器才会响应。</p><blockquote><p>HTTP协议传输数据时会自动将用户数据打成一个http数据包，发送到服务器，服务器根据http协议将数据包解开，获取数据，做相应的处理，并将处理结果再次打成http数据包返回客户端，浏览器解开http数据包，显示数据。</p></blockquote><p>&emsp;&emsp;JavaWeb服务器是一个不完整的JavaEE服务器，JAVA EE服务器完全实现JAVA EE标准。JavaWEB服务器主要是包含了Servlet/JSP、JNDI等基本规范的实现。开发中常用的服务器有：Tomcat、Resin、Jetty。</p><p>&emsp;&emsp;Servlet容器（Tomcat）主要为JavaWeb应用提供运行时环境，所以也可以称为JavaWeb应用容器，或者Servlet/JSP容器。Servlet容器主要负责管Servlet、JSP的生命周期以及它们的共享数据。</p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
